[{"path":"index.html","id":"welcome","chapter":"Welcome","heading":"Welcome","text":"guide contains documentation users developers VisionEval modeling system. table contains main\nsections contained guide along, descriptions, referenced identify sections \nserve best starting points.","code":""},{"path":"index.html","id":"about-visioneval","chapter":"Welcome","heading":"About VisionEval","text":"VisionEval collaborative project build family strategic tools performance-based transportation planning\nsingle open-source programming framework. Strategic tools designed evaluate many alternative futures \npolicies help state metropolitan area governments address pressing issues, despite uncertainty.","code":""},{"path":"index.html","id":"why-use-visioneval","chapter":"Welcome","heading":"Why Use VisionEval?","text":"Strategic planning becoming increasingly important means help state metropolitan area governments select\npolicies actions address pressing issues fraught uncertainty. specifically, Federal direction\nchallenged state, regional, local transportation agencies measuring outcomes decisions \nperformance-based planning, including considering transportation solutions may impact future goals \nsustainability, health, mobility. complicating matters, plans need resilient changing\ntransportation land use trends implications emerging technologies constraints. VisionEval open\nsource common framework building successful GreenSTEP family strategic planning tools intended \naddress needs.VisionEval merges family tools open-source project supporting community forum partner agencies\nothers sharing use enhancement. goal support broad array potential tool uses enable\npooled enhancements expanding types outcomes measured refine specificity transportation land use\nsolutions considered. work date draws successful past interested future users nationally, \ndefine policy needs uses tools, set direction moving forward.","code":""},{"path":"index.html","id":"how-to-use-this-guide","chapter":"Welcome","heading":"How to Use this Guide","text":"guide contains diversity information intended different audiences interacting VisionEval system.\nUse list try identify kind user sections guide serve best\nstarting points. can explore guide systematically using Topic Index, navigating\nmain sections left sidebar.Decision-maker & semi-technical planner: interested applying VisionEval system want high-level\noverview technical details.Concept Primer: introduction concepts underlying VisionEval modeling system \ncan used support transportation planning efforts, without technical model details.Model applier: wanting learn VisionEval system implement model application.Getting Started: Instructions get VisionEval installed runningConcept Primer: introduction concepts underlying VisionEval modeling system can used support transportation planning efforts, without technical model detailsTutorials: Start VisionEval Tutorial 101 introduction start applying VisionEval model, followed referencing -depth tutorial materials VERSPM, VERPAT, VE-State models.Developer: developer researcher interested making contributions VisionEval system.Developer Documentation","code":""},{"path":"getting-started.html","id":"getting-started","chapter":"1 Getting Started","heading":"1 Getting Started","text":"","code":""},{"path":"getting-started.html","id":"overview","chapter":"1 Getting Started","heading":"1.1 Overview","text":"page explains obtain VisionEval software install , \nprovides brief overview installed. Please\nlook Concept Primary learn VisionEval can support scenario\nplanning help develop strategies manage transportation system\nperformance.Concept Primer VisionEval Tutorial\nfound later book contain complete details setting VisionEval\nmodels local data, running scenarios, extracting analyzing results.Installation SetupInstallation SetupWorkflowWorkflowEditing Running ModelsEditing Running ModelsGetting ResultsGetting ResultsUsing WalkthroughUsing WalkthroughVisionEval runs within R Statistical Environment system R\navailable. two paths installing VisionEval:Install stand-alone Windows installer:\nDownload zipped\nfolder \nVisionEval website specific version R.\nsimplest way quickly get VisionEval computer.\nInstall stand-alone Windows installer:Download zipped\nfolder \nVisionEval website specific version R.\nsimplest way quickly get VisionEval computer.Copy clone system code repository:\narea Mac/Linux user, interested contributing\ndevelopment VisionEval modules, models, framework, \nvisualizer, choose path.\nrecent stable release hosted VisionEval \nGitHub. Development releases \navailable \nVisionEval-dev. \ndownloaded cloned one VisionEval repositories, \nneed build can run .\nCopy clone system code repository:area Mac/Linux user, interested contributing\ndevelopment VisionEval modules, models, framework, \nvisualizer, choose path.area Mac/Linux user, interested contributing\ndevelopment VisionEval modules, models, framework, \nvisualizer, choose path.recent stable release hosted VisionEval \nGitHub. Development releases \navailable \nVisionEval-dev. \ndownloaded cloned one VisionEval repositories, \nneed build can run .recent stable release hosted VisionEval \nGitHub. Development releases \navailable \nVisionEval-dev. \ndownloaded cloned one VisionEval repositories, \nneed build can run .Detailed setup instructions setting VisionEval runtime, building VisionEval source code, can \nfound Detailed Installation Instructions page.","code":""},{"path":"getting-started.html","id":"installation-and-setup","chapter":"1 Getting Started","heading":"1.2 Installation and Setup","text":"","code":""},{"path":"getting-started.html","id":"pre-requisites","chapter":"1 Getting Started","heading":"1.2.0.1 Pre-requisites","text":"need:R, least version 4.1.3R, least version 4.1.3RStudioRStudioOnce R RStudio installed, can retrieve VisionEval\ninstaller . RStudio optional. Read information \nrun VisionEval within base R GUI.","code":""},{"path":"getting-started.html","id":"installer","chapter":"1 Getting Started","heading":"1.2.0.2 Installer","text":"Get VisionEval HereNote: 580 Mb download! Pick version corresponding R installation\n(4.1.3, 4.2.3, 4.3.2, etc).link download .zip file containing following:VisionEval framework code sample modelsThe VisionEval framework code sample modelsAll necessary R packagesAll necessary R packagesDocumentation (book well API documentation)Documentation (book well API documentation)Unzip file empty folder choice (e.g. C:\\VisionEval).","code":""},{"path":"getting-started.html","id":"completing-the-installation","chapter":"1 Getting Started","heading":"1.2.0.3 Completing the Installation","text":"complete installation start VisionEval, :Navigate folder unzipped installer:Navigate folder unzipped installer:Double-click VisionEval.RprojDouble-click VisionEval.RprojRStudio start, VisionEval load. see message\nsimilar following RStudio Console:VisionEval.Rproj file open RStudio double-click ,\ncan start RStudio directly, choose File / Open Project... get \nplace. default, RStudio remembers project last loaded, \ndone get back VisionEval time start\nRStudio (unless work different project).","code":"Loading VisionEval for R4.3.2\nLoading required package: VEModel\nWelcome to the new VisionEval!\nRunning in C:/VisionEval"},{"path":"getting-started.html","id":"starting-visioneval-manually","chapter":"1 Getting Started","heading":"1.2.0.4 Starting VisionEval Manually","text":"need start VisionEval manually reason, just start RStudio (\neven plain R), change installation folder usingRStudio’s Session / Set Working Directory... menu option, orRStudio’s Session / Set Working Directory... menu option, orIn plain R, File / Change dir... menu option, setwd command\nR command line.plain R, File / Change dir... menu option, setwd command\nR command line.run instruction start VisionEval:","code":"source(\"VisionEval.R\")"},{"path":"getting-started.html","id":"starting-visioneval-from-the-rgui","chapter":"1 Getting Started","heading":"1.2.0.5 Starting VisionEval from the RGUI","text":"RStudio mandatory using VisionEval. also possible run\nVisionEval within RGUI comes R. need \nadministrative rights machine, since RStudio requires\nadministrative permissions install.run without RStudio, double-click launch.bat batch file (Windows Explorer).installed R manually, may need set R_HOME environment variable launch.bat work. ’ll\nknow ’s problem get message wrong version R, batch file message saying R \nfound, Window briefly opens shuts without starting R.find proper value R_HOME, start version R \ninstalled VisionEval (Windows start menu even \nnon-administrative installation). run R command:get string look something like :want copy part inside quotes says C:/PROGRA~1/R/R-43~1.2Put value \nUser Environment Variable\ncalled R_HOME can edit launch.bat replacing default R_HOME value file. Edit\nlaunch.bat text editor (- ugh - Notepad) reasonably obvious .launch.bat working, RGUI instance open see startup message appears RStudio:","code":"\nR.home()[1] \"C:/PROGRA~1/R/R-43~1.2\"Loading VisionEval for R4.3.2\nLoading required package: VEModel\nWelcome to the new VisionEval!\nRunning in C:/VisionEval"},{"path":"getting-started.html","id":"workflow-of-visioneval","chapter":"1 Getting Started","heading":"1.3 Workflow of VisionEval","text":"VisionEval models underlying software framework written \nR programming language statistical computing graphics. purpose model\nsystem framework enable models created plug--play fashion modules distributed R\npackages. simple R script used implement model initializing model environment calling modules\nsuccessively. Scenarios constructed set files provide variant model inputs evaluation \ncomparison.use VisionEval evaluate scenarios, several elements users\nneed set :Select install one VisionEval\nmodels,\ncustomizing needed:\nVERSPM\n– Regional Strategic Planning Model\nVERPAT\n– Rapid Policy Analysis Tool\nVE-State\n– VisionEval State-Level Model\nSelect install one VisionEval\nmodels,\ncustomizing needed:VERSPM\n– Regional Strategic Planning ModelVERSPM\n– Regional Strategic Planning ModelVERPAT\n– Rapid Policy Analysis ToolVERPAT\n– Rapid Policy Analysis ToolVE-State\n– VisionEval State-Level ModelVE-State\n– VisionEval State-Level ModelDevelop Base Model region analysis. Base Model\nspecifies:\nModel Geography (zone structure), reported Marea (metropolitan\narea), AZones (county-sized), BZones (often census-tract-sized \nrelated Traffic Analysis Zones travel demand\nmodels) related configuration files\nBase Future Years evaluated scenario (e.g., 2019\n2050)\nLocal Data Files describing Base Scenario conditions region\n(including observed base year data, estimates future year\nconditions scenario policies applied)\nDevelop Base Model region analysis. Base Model\nspecifies:Model Geography (zone structure), reported Marea (metropolitan\narea), AZones (county-sized), BZones (often census-tract-sized \nrelated Traffic Analysis Zones travel demand\nmodels) related configuration filesModel Geography (zone structure), reported Marea (metropolitan\narea), AZones (county-sized), BZones (often census-tract-sized \nrelated Traffic Analysis Zones travel demand\nmodels) related configuration filesBase Future Years evaluated scenario (e.g., 2019\n2050)Base Future Years evaluated scenario (e.g., 2019\n2050)Local Data Files describing Base Scenario conditions region\n(including observed base year data, estimates future year\nconditions scenario policies applied)Local Data Files describing Base Scenario conditions region\n(including observed base year data, estimates future year\nconditions scenario policies applied)Develop variant Future Actions Scenarios, adjusting specific\ninput elements Future Years. VisionEval models support many\ndifferent scenarios. See scenario development chapter later book\ndetails.Develop variant Future Actions Scenarios, adjusting specific\ninput elements Future Years. VisionEval models support many\ndifferent scenarios. See scenario development chapter later book\ndetails.Run model process scenarios.Run model process scenarios.Extract query results summarization analysis R \nexport tabular data files data analysis systems.Extract query results summarization analysis R \nexport tabular data files data analysis systems.steps described pages documentation.","code":""},{"path":"getting-started.html","id":"editing-and-running-models","chapter":"1 Getting Started","heading":"1.4 Editing and Running Models","text":"described model tutorials, VisionEval Model\ncontains following components:Model configuration: visioneval.cnfModel configuration: visioneval.cnfThe model script file, typically called run_model.R (sometimes \n/scripts sub-folder), describes steps performed\nmodel runsThe model script file, typically called run_model.R (sometimes \n/scripts sub-folder), describes steps performed\nmodel runsGlobal parameters describing model geography, preferred data units, \ncurrency conversion deflators /defs sub-folderGlobal parameters describing model geography, preferred data units, \ncurrency conversion deflators /defs sub-folderBase Model Input data /inputs sub-folderBase Model Input data /inputs sub-folderPre-defined query scripts (/queries sub-folder) can extract\nuseful metrics model scenarios runPre-defined query scripts (/queries sub-folder) can extract\nuseful metrics model scenarios runAdditional optional folders model scenarios (either top-level\ndirectories within /scenarios sub-folder, describe\ndeviations Base Model). Scenarios may different\ninputs different model script.Additional optional folders model scenarios (either top-level\ndirectories within /scenarios sub-folder, describe\ndeviations Base Model). Scenarios may different\ninputs different model script.model scenarios run, model also \n/results sub-folder. queries run raw results extracted \ntabular data format like .csv, sub-folder within /results\ncalled /output.See tutorial chapters later book instructions set \nVisionEval study area. Typically, start installing one \nstandard models adjusting visioneval.cnf, /defs /inputs\ncomplete Base Model. completed Base Model, \ncan add scenarios model (described later) varying inputs \ndescribe alternate future conditions.","code":""},{"path":"getting-started.html","id":"running-visioneval-models","chapter":"1 Getting Started","heading":"1.5 Running VisionEval Models","text":"VisionEval includes simple R command-line interface running models \nextracting results.tutorials later book explain select customize one \nVisionEval models, well develop inputs create scenarios \narea.received Welcome new VisionEval! message, can try\nthings copying entering following instructions R Console\nwindow:instructions following:Install sample VisionEval RSPM (Regional Strategic Planning Model)\nmodel data small Rogue Valley MPO Oregon\nmodel installed VisionEval/models/VERSPM-base\ncan re-open model later using instruction;\nrspm <- openModel(\"VERSPM-base\")\nInstall sample VisionEval RSPM (Regional Strategic Planning Model)model data small Rogue Valley MPO OregonThe model data small Rogue Valley MPO OregonThe model installed VisionEval/models/VERSPM-baseThe model installed VisionEval/models/VERSPM-baseYou can re-open model later using instruction;\nrspm <- openModel(\"VERSPM-base\")can re-open model later using instruction;Run model\nresults placed VisionEval/models/VERSPM-base/results\nresults difficult internal R format, ’ll want \nexport something useful subsequent analysis.\nRun modelThe results placed VisionEval/models/VERSPM-base/resultsThe results placed VisionEval/models/VERSPM-base/resultsThe results difficult internal R format, ’ll want \nexport something useful subsequent analysis.results difficult internal R format, ’ll want \nexport something useful subsequent analysis.Export model results several files friendly text table format\n(.csv) can open Excel text editor\nCSV files placed dated subfolder \nVisionEval/models/VERSPM-base/results/outputs\ncan export results SQLite database (created \noutputs folder) using export instruction:\nrspm$export(\"sql\")\nExport model results several files friendly text table format\n(.csv) can open Excel text editorThe CSV files placed dated subfolder \nVisionEval/models/VERSPM-base/results/outputsThe CSV files placed dated subfolder \nVisionEval/models/VERSPM-base/results/outputsYou can export results SQLite database (created \noutputs folder) using export instruction:\nrspm$export(\"sql\")can export results SQLite database (created \noutputs folder) using export instruction:Run set basic queries report summary model performance metrics\nexported, metrics appear .csv files another subfolder \nVisionEval/models/VERSPM-base/results/outputs\ndefault, query output file one row per metric one column per\nmodel scenario.\nRun set basic queries report summary model performance metricsWhen exported, metrics appear .csv files another subfolder \nVisionEval/models/VERSPM-base/results/outputsBy default, query output file one row per metric one column per\nmodel scenario.","code":"rspm <- installModel(\"VERSPM\")\nrspm$run()\nresults <- rspm$results()\nresults$export()\nquery <- rspm$query(\"Full-Query\")\nquery$run()\nquery$export()rspm <- openModel(\"VERSPM-base\")rspm$export(\"sql\")"},{"path":"getting-started.html","id":"using-the-walkthrough","chapter":"1 Getting Started","heading":"1.6 Using the Walkthrough","text":"Additional features VisionEval R interface somewhat systematically explored commented R scripts located \nVisionEval runtime VisionEval/walkthrough folder. walkthrough files easily explored using RStudio.seen message “Welcome new VisionEval”, can set \nwalkthrough running instruction:walkthrough create special runtime directory (within main\nruntime folder), nothing trying affect \n“real” models, remain untouched “models” directory.explore walkthrough scripts:Open script RStudio script editor navigating RStudio\n“Files” pane VisionEval/walkthrough directory, double-clicking\none scripts.Open script RStudio script editor navigating RStudio\n“Files” pane VisionEval/walkthrough directory, double-clicking\none scripts.Select individual lines script editor press “Enter” run line\nconsole. run lines order (“walk ”) \nskip ! commented lines (starting “#” describe going\n).Select individual lines script editor press “Enter” run line\nconsole. run lines order (“walk ”) \nskip ! commented lines (starting “#” describe going\n).things get messed didn’t run walkthrough lines order,\n’s usually enough back run lines skipped. need ,\ncan reset walkthrough starting like :careful: “reset=TRUE” instruction clear walkthrough runtime.\nAnything saved (including outputs running exporting test\nmodels) lost. regular runtime models directory remain\nuntouched.overview walkthrough files learn \n:00-walkthrough.R : Master list walkthrough scripts (nothing specific \nrun - ’s just script listing scripts)00-walkthrough.R : Master list walkthrough scripts (nothing specific \nrun - ’s just script listing scripts)01-install.R : install various VisionEval model sample packaged\nexamples01-install.R : install various VisionEval model sample packaged\nexamples02-running.R : Running (re-running) VisionEval model02-running.R : Running (re-running) VisionEval model03-extract.R : Getting raw results (subset) VisionEval model03-extract.R : Getting raw results (subset) VisionEval model03A-advanced-export.R : Exporting file formats (SQL Excel)03A-advanced-export.R : Exporting file formats (SQL Excel)04-scenarios.R : Working model scenarios - running ,\nsetting up04-scenarios.R : Working model scenarios - running ,\nsetting up05-queries.R : run queries generate summary metrics model results\n(including sets scenarios)05-queries.R : run queries generate summary metrics model results\n(including sets scenarios)","code":"walkthrough()walkthrough(reset=TRUE)"},{"path":"detailed-installation.html","id":"detailed-installation","chapter":"2 Detailed Installation","heading":"2 Detailed Installation","text":"","code":""},{"path":"detailed-installation.html","id":"selecting-an-installation-strategy","chapter":"2 Detailed Installation","heading":"2.1 Selecting an Installation Strategy","text":"install VisionEval, need choose whether perform End-User Installation\nset full Development Environment?considerations:End-user version easier install fewer requirements. also place start new VisionEval.Developer version lets stay ---minute new changes, also make\nchanges software (’re )can install go back forth like (especially create Production Environment).Setting Production Environment let keep models folder\nseparate VisionEval code resides. Use Production Environment avoid move models \nupgrade new version VisionEval R. Production Environment also makes easier keep models\nbacked (without copy gigabytes VisionEval code), straightfoward create Github repository just\nmodel.","code":""},{"path":"detailed-installation.html","id":"recommended-installation-workflow","chapter":"2 Detailed Installation","heading":"2.1.1 Recommended installation workflow:","text":"End User Installation\n’s need ’re just trying running walkthrough tutorials\n’s need ’re just trying running walkthrough tutorialsSet Production Environment model\nStart connecting Production Environment End User Installation\nStart connecting Production Environment End User InstallationAdd Development Installation build VisionEval \ncan just “Development Light” (‘src’ installation within End User installation) re-creating certain packages\n(Instructions )\ncan Full Development Version (Github)\nFull Development Version lets stay current recent VisionEval development.\n’ll need build Full Development Version locally can run model.\n\nRe-connect Production Environment Development Installation ’re ready\ncan just “Development Light” (‘src’ installation within End User installation) re-creating certain packages\n(Instructions )can Full Development Version (Github)\nFull Development Version lets stay current recent VisionEval development.\n’ll need build Full Development Version locally can run model.\nFull Development Version lets stay current recent VisionEval development.’ll need build Full Development Version locally can run model.Re-connect Production Environment Development Installation ’re readyWhen get new version VisionEval, update links Production environment\nVE_RUNTIME .Renviron VisionEval Home (.e. VisionEval code )\nVE_HOME .Renviron VisionEval Runtime (.e. VisionEval models )\nVE_RUNTIME .Renviron VisionEval Home (.e. VisionEval code )VE_HOME .Renviron VisionEval Runtime (.e. VisionEval models )Full instructions found .","code":""},{"path":"detailed-installation.html","id":"end-user-installation","chapter":"2 Detailed Installation","heading":"2.2 End-User Installation","text":"Install R. Pick recent version installer exists\nR require administrative permission install\nPick supported R version\nalready R installed, make sure VisionEval available R version.\ncan multiple R versions installed computer. Just make sure use one consistent VisionEval code installed.\nChoose latest suppored R (R 4.3.2 January 2024) haven’t already chosen reasons\ncan download specific supported version R (January 2024) using following links:\nR 4.1.3: https://cran.r-project.org/bin/windows/base/old/4.1.3\nR 4.2.3: https://cran.r-project.org/bin/windows/base/old/4.2.3\nR 4.3.2: https://cran.r-project.org/bin/windows/base/old/4.3.2\n\n\nR require administrative permission installPick supported R version\nalready R installed, make sure VisionEval available R version.\ncan multiple R versions installed computer. Just make sure use one consistent VisionEval code installed.\nChoose latest suppored R (R 4.3.2 January 2024) haven’t already chosen reasons\ncan download specific supported version R (January 2024) using following links:\nR 4.1.3: https://cran.r-project.org/bin/windows/base/old/4.1.3\nR 4.2.3: https://cran.r-project.org/bin/windows/base/old/4.2.3\nR 4.3.2: https://cran.r-project.org/bin/windows/base/old/4.3.2\n\nalready R installed, make sure VisionEval available R version.can multiple R versions installed computer. Just make sure use one consistent VisionEval code installed.Choose latest suppored R (R 4.3.2 January 2024) haven’t already chosen reasonsYou can download specific supported version R (January 2024) using following links:\nR 4.1.3: https://cran.r-project.org/bin/windows/base/old/4.1.3\nR 4.2.3: https://cran.r-project.org/bin/windows/base/old/4.2.3\nR 4.3.2: https://cran.r-project.org/bin/windows/base/old/4.3.2\nR 4.1.3: https://cran.r-project.org/bin/windows/base/old/4.1.3R 4.2.3: https://cran.r-project.org/bin/windows/base/old/4.2.3R 4.3.2: https://cran.r-project.org/bin/windows/base/old/4.3.2Install RStudio.\ndon’t need RStudio run VisionEval, many people find helpful. computer locked , won’t able install requires administrative permissions.\nGet latest version : https://posit.co/download/rstudio-desktop/\nRStudio now (November 2022) maintained distributed new company called “Posit” (key people involved)\n\nStart RStudio check using intended version R. startup message console window show R version, can display built-variable R.version look version.string\nRStudio doesn’t find desired R version automatically, connect version R want use VisionEval installation using RStudio Tools / Global Options menu item\ndon’t need RStudio run VisionEval, many people find helpful. computer locked , won’t able install requires administrative permissions.Get latest version : https://posit.co/download/rstudio-desktop/\nRStudio now (November 2022) maintained distributed new company called “Posit” (key people involved)\nRStudio now (November 2022) maintained distributed new company called “Posit” (key people involved)Start RStudio check using intended version R. startup message console window show R version, can display built-variable R.version look version.stringIf RStudio doesn’t find desired R version automatically, connect version R want use VisionEval installation using RStudio Tools / Global Options menu itemDownload VisionEval installer version R\nhosted VisionEval-dev repository “releases” section\nlatest development release always located https://github.com/VisionEval/VisionEval-Dev/releases/latest\nVisionEval available R versions (January 5, 2024):\nR 4.1.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.1.3_2023-09-25.zip\nR 4.2.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.2.3_2023-09-25.zip\nR 4.3.2: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.3.1_2023-09-25.zip\n\nVisit page check newer releases: https://github.com/VisionEval/VisionEval-Dev/releases\n“Ignore source, Luke.” can find PackageSources zip files Build Process section\nhosted VisionEval-dev repository “releases” sectionThe latest development release always located https://github.com/VisionEval/VisionEval-Dev/releases/latestVisionEval available R versions (January 5, 2024):\nR 4.1.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.1.3_2023-09-25.zip\nR 4.2.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.2.3_2023-09-25.zip\nR 4.3.2: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.3.1_2023-09-25.zip\nR 4.1.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.1.3_2023-09-25.zipR 4.2.3: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.2.3_2023-09-25.zipR 4.3.2: https://github.com/VisionEval/VisionEval-Dev/releases/download/VE-3.1/VE-3.0-Installer-Windows-R4.3.1_2023-09-25.zipVisit page check newer releases: https://github.com/VisionEval/VisionEval-Dev/releases“Ignore source, Luke.” can find PackageSources zip files Build Process sectionUnzip installer new folder\nWindows, best install VisionEval “Documents” folder Windows redirects access folder.\nbetter location User Profile Windows refers %USERPROFILE%\nfind User Profile folder:\nPress Windows key\nType “%USERPROFILE%” hit enter (File Explorer open, showing folder)\nUse ‘New Folder’ create folder hold unzipped VisionEval installation\n\ncan use standalone unzipper (e.g. SecureZip 7zip) extract VisionEval installer. Windows let use zip file\nfolder can open (double click Windows explorer), highlight copy everything inside installation location.\nfolder put extracted files referred VE_HOME\nWindows, best install VisionEval “Documents” folder Windows redirects access folder.better location User Profile Windows refers %USERPROFILE%find User Profile folder:\nPress Windows key\nType “%USERPROFILE%” hit enter (File Explorer open, showing folder)\nUse ‘New Folder’ create folder hold unzipped VisionEval installation\nPress Windows keyType “%USERPROFILE%” hit enter (File Explorer open, showing folder)Use ‘New Folder’ create folder hold unzipped VisionEval installationYou can use standalone unzipper (e.g. SecureZip 7zip) extract VisionEval installer. Windows let use zip file\nfolder can open (double click Windows explorer), highlight copy everything inside installation location.folder put extracted files referred VE_HOMETo complete installation, start R place installed VisionEval\nWindows Explorer, Double-click VisionEval.Rproj\ncan also use launch.bat script run VisionEval standard R GUI, can’t (don’t want\n) install run RStudio\nSee launch.bat instructions .\n\neverything working, R console window open can type instructions VisionEval\n“Welcome VisionEval!” message appear\nReturn Getting Started page run VisionEval, use walkthrough \nexplore VisionEval models features, develop VisionEval model setup region.\nWindows Explorer, Double-click VisionEval.Rproj\ncan also use launch.bat script run VisionEval standard R GUI, can’t (don’t want\n) install run RStudio\nSee launch.bat instructions .\ncan also use launch.bat script run VisionEval standard R GUI, can’t (don’t want\n) install run RStudioSee launch.bat instructions .everything working, R console window open can type instructions VisionEvalThe “Welcome VisionEval!” message appearReturn Getting Started page run VisionEval, use walkthrough \nexplore VisionEval models features, develop VisionEval model setup region.","code":""},{"path":"detailed-installation.html","id":"setting-up-a-production-environment","chapter":"2 Detailed Installation","heading":"2.3 Setting up a Production Environment","text":"Though possible build local VisionEval model “models” folder VisionEval installation,\ndon’t recommend since need move model every time install new version VisionEval.\nmodels location makes much easier back models put version\ncontrol without bring along entire VisionEval code base.keep code models separate, can set “Production Environment” store model location\ndistinct VisionEval code located. way can upgrade (downgrade) VisionEval without \nmove model, can shift using end-user installation (downloadable .zip installer) development\ninstallation (cloning Github repository).default, VisionEval looks models “models” folder VisionEval runtime, defaults \nfolder extracted VisionEval installer .zip file.production, default behavior problem need move model setups every time change\nversion R VisionEvalYou can prevent headaches setting separate permanent folder models, ’ll refer VE_RUNTIMEThe VisionEval startup code knows two locations referred environment variables (see don’t know\nenvironment variables ):VE_HOME VisionEval application code locatedVE_RUNTIME “models” folder locatedThese can entirely different folders different drives. box, VE_HOME VE_RUNTIME , point folder\nunzipped VisionEval.setting VE_HOME VE_RUNTIME , can start visioneval place put model, \nsimply adjusting VE_HOME allow run model different version R VisionEval.can set VisionEval start either within VE_HOME within `VE_RUNTIME. Separating two\nlocations call “creating Production Environment”.suggest set system can start VisionEval VE_RUNTIME (place store models),\nsince easier update R VisionEval version. set :first thing decide want VisionEval runtime (VE_RUNTIME)first thing decide want VisionEval runtime (VE_RUNTIME)Create folder (example %USERPROFILE%/VE_Models)Create folder (example %USERPROFILE%/VE_Models)Go VisionEval installation (VE_HOME place installed VisionEval code)Go VisionEval installation (VE_HOME place installed VisionEval code)Open .Renviron file favorite text editor (Notepad, nobody’s favorite, \njob)\n.Renviron file exist, please start VisionEval installation using VisionEval.Rproj launch.bat \ncreated automatically\nOpen .Renviron file favorite text editor (Notepad, nobody’s favorite, \njob).Renviron file exist, please start VisionEval installation using VisionEval.Rproj launch.bat \ncreated automaticallyAdd line like following line (change line already exists) refers folder \ncreated store models:\nVE_RUNTIME=C:/Users/MyUserProfileDirectory/VE_ModelsAdd line like following line (change line already exists) refers folder \ncreated store models:Now start VisionEval clicking VisionEval.Rproj (launch.bat), ’ll see running \nfolder assigned VE_RUNTIME. Also notice empty “models” directory created ran\nVisionEval first time. “models” folder creating running VisionEval\nmodels.start VisionEval within VE_RUNTIME folder, need copy runtime support files \ninstallation location.Copy runtime files installation directory VE_RUNTIME:\nlaunch.bat\n.Rprofile\n.Renviron\nVisionEval.Rproj\nlaunch.bat.Rprofile.RenvironVisionEval.RprojIf ’re learning VisionEval, ’ll also want copy walkthrough folder.move following files folders, make actual VisionEval executable. won’t hurt copy\n, just wastes disk space confusing):\nve-lib\nVisionEval.R\nLICENSE\nve-libVisionEval.RLICENSEThe .Renviron file already VE_HOME correctly defined, can check opening text editor.\ncan also define VE_HOME . point folder unzipped VisionEval installer, \nfolder cloned Github repository.later change R VisionEval version, can just copy .Renviron file new installation \nopened R (can manually edit .Renviron point new VE_HOME location.configure VE_RUNTIME use development environment (cloned Github repository) steps little\ndifferent:Build visioneval (see section setting development environment building VisionEval, ). step\nnecessary runnable VisionEval code, generate suitable .Renviron file locating\nVE_HOME.Find copy runtime files “MyVisionEval-Github-clone/built/visioneval/4.3.2/runtime” (whatever R\nversion built VisionEval ). files copy:\nlaunch.bat\n.Rprofile\n.Renviron\nVisionEval.Rproj\nlaunch.bat.Rprofile.RenvironVisionEval.RprojIf set VE_BUILD variable (see setting development environment), runtime files located\nVE_BUILD/built/VE_BRANCH/VE_R_VERSION/runtime :\nVE_BUILD directory set receive built\nVE_BRANCH Github branch building . default ve.build “visioneval” branches \nbuilt location.\ncan create different builds Github branches running ve.build(use.git=TRUE)\n\nVE_R_VERSION version R built VisionEval.\nVE_BUILD directory set receive builtVE_BRANCH Github branch building . default ve.build “visioneval” branches \nbuilt location.\ncan create different builds Github branches running ve.build(use.git=TRUE)\ncan create different builds Github branches running ve.build(use.git=TRUE)VE_R_VERSION version R built VisionEval.delete original runtime folder built directory (startup script requires present,\neven going used).Finally, find generated .Renviron file root directory development environment copy VE_RUNTIME.\nVE_HOME .Renviron location Git root directory (built runtime)\nstill work point VE_HOME built runtime (runtime files located),\njust won’t access developmment environment tools.\nGithub root also contains launch.bat VisionEval-dev.Rproj. can use start VisionEval.\nstart VisionEval development environment (Github clone), need add (edit) VE_RUNTIME\nline .Renviron file located development environment root directory (set full path\nruntime folder).\nVE_HOME .Renviron location Git root directory (built runtime)still work point VE_HOME built runtime (runtime files located),\njust won’t access developmment environment tools.Github root also contains launch.bat VisionEval-dev.Rproj. can use start VisionEval.start VisionEval development environment (Github clone), need add (edit) VE_RUNTIME\nline .Renviron file located development environment root directory (set full path\nruntime folder).","code":"VE_RUNTIME=C:/Users/MyUserProfileDirectory/VE_Models"},{"path":"detailed-installation.html","id":"setting-up-a-development-environment","chapter":"2 Detailed Installation","heading":"2.4 Setting up a Development Environment","text":"development environment allow build rebuild VisionEval Github. Building VisionEval easy;\nrequires little software setup ’s just bit time-consuming first time. basic steps:need copy git clone development source code, can download snapshot code \nzip file GithubYou need one additional software installation (RTools43), addition R (optionally) RStudio run VisionEvalThen just start R root Github run ve.build() functionAfter can make change want VisionEval rebuild changes just running ve.build() .get development code, clone Github repository.can find VisionEval Github repositories:https://github.com/visioneval/Visioneval.git release\nversion code (doesn’t change often, may missing new features bug fixes)https://github.com/visioneval/Visioneval-dev.git \ndevelopment version, probably want use ’re development rather just\ninstalling.don’t want work git, still like build code, can . Visit Github,\nnd hit green Code button, select “Local”, choose “Download ZIP”.plan contribute code back VisionEval project, work Visioneval-dev. ’re just\nmaking local changes rebuilding certain packages use, can use VisionEvalWe’re going teach git . introduction try Git Book \nW3 Schools tutorial.can use Git client familiar . Git Windows one good choice, \ncan use Github desktop client. Either need installed.clone repository, want execute following instruction Git client choice. Please \naware need “fork” repository order make clone build VisionEval locally. See \ndiscussion forking information. people want “fork”.rest section development environment presume VisionEval git clone folder called\n“VisionEval-dev”. ’re attaching Production Environment new VisionEval\nclone, use Github root folder (e.g. /folder//Git-Repos/VisionEval-dev) value VE_HOME\nenvironment variable. can just copy .Renviron file created first run ve.build(), \nset VE_HOME correct value.’ve got cloned repository, make sure following software available. first two (R \nRStudio) need end-user installation .zip installer.R one supported versions (see VisionEval-dev/build/R-versions.yml complete list supported versions)\nGet R \nR installation work, even without administrative permissions (ignore warning access certain features - none matter VisionEval)\nGet R hereR installation work, even without administrative permissions (ignore warning access certain features - none matter VisionEval)RStudio (optional)\nGet RStudio \nRStudio needs administrative permissions; continue without , see command line instructions \nGet RStudio hereRStudio needs administrative permissions; continue without , see command line instructions belowRTools43\nGet RTools43 \nTechnically, need different RTools package R 4.3.2 compared R 4.1.x R 4.2.x. practice, \ncan always use RTools43 part RTools used VisionEval make program couple \nstandard GNU utilities, RTools shell command line practical purposes \nversions.\nneed administrative permissions install RTools43, may need hunt around folder \nwrite permissions (%USERPROFILE% good choice).\nGet RTools43 hereTechnically, need different RTools package R 4.3.2 compared R 4.1.x R 4.2.x. practice, \ncan always use RTools43 part RTools used VisionEval make program couple \nstandard GNU utilities, RTools shell command line practical purposes \nversions.need administrative permissions install RTools43, may need hunt around folder \nwrite permissions (%USERPROFILE% good choice).build re-build VisionEval Git code RStudio, :Start RStudio double-clicking “VisionEval-dev.Rproj” file root Git code (“VisionEval-dev”)don’t RStudio, make sure R_HOME set point version R (see ) just double-click\n“launch.bat”. give standard R GUI VisionEval development environment loaded.Execute R command running R console perform build:build needs internet connection take hour complete depending fast machine\ninternet connection .can run built VisionEval command “ve.run()” also walkthrough command\n“ve.test()”run ve.build() creates two new non-versioned folders “VisionEval-dev” well couple files.Git root (VisionEval-dev), .Renviron file created can use set Production EnvironmentIn existing build directory, build configuration file created called “ve-output-visioneval-4.x.x.make” “4.x.x” whatever R version building forTwo new folders created top repository:\n“dev” contains build log files, build status, library R packages used building included end-user installation\n“built” contains built compoenents\n“dev” contains build log files, build status, library R packages used building included end-user installation“built” contains built compoenentsThe directory structure “built” looks like :\nbuilt\nvisioneval (really, VE_BRANCH - see build different git branches separately)\n4.x.x (x.x whatever sub-version R ’re using; build different R version repository branch ’ll get additional folders)\ndocs (internal documentation, empty unless ve.build(\"docs\")\npkg-dependencies (local R repository dependency packages needed VisionEval; also installed ve-lib )\npkg-ve-repo (local R repository built--uninstalled VisionEval packages)\nruntime (base folder whose contents become basis end-user installer; ve.run() copies folder pollute eventual installers results tests)\nruntime.test (folder won’t exist ve.run())\nsrc (assembled source code framework module packages ends Source installer zip file; can build rebuild packages folders using R Studie R CMD instructions)\nve-lib (installed binary versions VisionEval packages dependencies windows; placed “runtime” folder VisionEval installer zip file)\nve-pkg (installable tar.gz package files built Mac Linux source installation platforms; usually folder empty Windows though magic internal flags can force ve-pkg populated)\n\n\n\nbuilt\nvisioneval (really, VE_BRANCH - see build different git branches separately)\n4.x.x (x.x whatever sub-version R ’re using; build different R version repository branch ’ll get additional folders)\ndocs (internal documentation, empty unless ve.build(\"docs\")\npkg-dependencies (local R repository dependency packages needed VisionEval; also installed ve-lib )\npkg-ve-repo (local R repository built--uninstalled VisionEval packages)\nruntime (base folder whose contents become basis end-user installer; ve.run() copies folder pollute eventual installers results tests)\nruntime.test (folder won’t exist ve.run())\nsrc (assembled source code framework module packages ends Source installer zip file; can build rebuild packages folders using R Studie R CMD instructions)\nve-lib (installed binary versions VisionEval packages dependencies windows; placed “runtime” folder VisionEval installer zip file)\nve-pkg (installable tar.gz package files built Mac Linux source installation platforms; usually folder empty Windows though magic internal flags can force ve-pkg populated)\n\n\nvisioneval (really, VE_BRANCH - see build different git branches separately)\n4.x.x (x.x whatever sub-version R ’re using; build different R version repository branch ’ll get additional folders)\ndocs (internal documentation, empty unless ve.build(\"docs\")\npkg-dependencies (local R repository dependency packages needed VisionEval; also installed ve-lib )\npkg-ve-repo (local R repository built--uninstalled VisionEval packages)\nruntime (base folder whose contents become basis end-user installer; ve.run() copies folder pollute eventual installers results tests)\nruntime.test (folder won’t exist ve.run())\nsrc (assembled source code framework module packages ends Source installer zip file; can build rebuild packages folders using R Studie R CMD instructions)\nve-lib (installed binary versions VisionEval packages dependencies windows; placed “runtime” folder VisionEval installer zip file)\nve-pkg (installable tar.gz package files built Mac Linux source installation platforms; usually folder empty Windows though magic internal flags can force ve-pkg populated)\n\n4.x.x (x.x whatever sub-version R ’re using; build different R version repository branch ’ll get additional folders)\ndocs (internal documentation, empty unless ve.build(\"docs\")\npkg-dependencies (local R repository dependency packages needed VisionEval; also installed ve-lib )\npkg-ve-repo (local R repository built--uninstalled VisionEval packages)\nruntime (base folder whose contents become basis end-user installer; ve.run() copies folder pollute eventual installers results tests)\nruntime.test (folder won’t exist ve.run())\nsrc (assembled source code framework module packages ends Source installer zip file; can build rebuild packages folders using R Studie R CMD instructions)\nve-lib (installed binary versions VisionEval packages dependencies windows; placed “runtime” folder VisionEval installer zip file)\nve-pkg (installable tar.gz package files built Mac Linux source installation platforms; usually folder empty Windows though magic internal flags can force ve-pkg populated)\ndocs (internal documentation, empty unless ve.build(\"docs\")pkg-dependencies (local R repository dependency packages needed VisionEval; also installed ve-lib )pkg-ve-repo (local R repository built--uninstalled VisionEval packages)runtime (base folder whose contents become basis end-user installer; ve.run() copies folder pollute eventual installers results tests)runtime.test (folder won’t exist ve.run())src (assembled source code framework module packages ends Source installer zip file; can build rebuild packages folders using R Studie R CMD instructions)ve-lib (installed binary versions VisionEval packages dependencies windows; placed “runtime” folder VisionEval installer zip file)ve-pkg (installable tar.gz package files built Mac Linux source installation platforms; usually folder empty Windows though magic internal flags can force ve-pkg populated)put real work real models “runtime” “runtime.test” folders. get blown away \nrebuild VisionEval. Set Production Environment instead define VE_RUNTIME.git feature branch VisionEval-dev, can build branch separately default git branch\n(makes sense , don’t need know…).’ll want build feature branch separately need keep built instance base branch alongside \nexperiments rebuild everythign change branches back forth. use name branch\n(instead default “visioneval”) just add parameter ve.build:’ll get subfolder “built” named git branch (e.g. “built/mybranch/4.x.x/…”)’re really working different branches (’re\nusing git worktrees, recommend won’t explain\n), can help put VisionEval builds separate folder. amounts creating “build\nenvironment” similar “production environment”.put builds somewhere else git repository clone, just define VE_BUILD environment variable \n.Renviron root development environment (VisionEval-dev). VE_BUILD name existing folder\nsomewhere outside VisionEval git directory (e.g. :%USERPROFILE%-build”)defined VE_BUILD, restart R RStudio, run ve.build() command line equivalent,\n’ll get structure files folders:VE_BUILD\nbuilt (just like “built” folder within git repository )\nmybranch (“visioneval” don’t set use.git=TRUE)\n4.x.x.\n… etc.\n\n\n\ndev (contents “dev” folder within git repository\ndon’t VE_BUILD set)\nlib\nlogs\n\nbuilt (just like “built” folder within git repository )\nmybranch (“visioneval” don’t set use.git=TRUE)\n4.x.x.\n… etc.\n\n\nmybranch (“visioneval” don’t set use.git=TRUE)\n4.x.x.\n… etc.\n\n4.x.x.\n… etc.\n… etc.dev (contents “dev” folder within git repository\ndon’t VE_BUILD set)\nlib\nlogs\nliblogsve.build() still create “.Renviron” file git root also create “build/ve-output-visioneval-4.x.x.make” file within Git repositoryIf define VE_BUILD, need change VE_HOME: still point root VisionEval git repository.","code":"cd /folder/for/Git-Repos\ngit clone https://github.com/visioneval/VisionEval-dev.git VisionEval-devve.build()ve.build(use.git=TRUE)"},{"path":"detailed-installation.html","id":"frequently-asked-questions-development","chapter":"2 Detailed Installation","heading":"2.4.1 Frequently Asked Questions (development)","text":"need “fork” VisionEval-dev repository (short answer: “”) ever want ?\nGithub misleading operation called “forking” people get confused difference “cloning” \n“forking”. Forking Github-specific operation create new Github-managed copy VisionEval repository within\nGit account. Cloning general Git action makes copy Github repository local computer.\nneed fork VisionEval repository clone development environment computer. Just run\ngit clone operation locally point VisionEval repository using one connection strings\nrevealed Github’s green “<> Code” button repository home page.\n“fork” still need “clone” order get local copy VisionEval repository \ncan build work . don’t need “fork” unless want make changes might contribute back \nVisionEval. Forks Github needed make pull requests. “pull request” offer merge changes\nback main VisionEval code base.\n“pull requests”, always made “development” branch VisionEval-dev, \nsure rebase changes current HEAD “development” branch prior submitting pull\nrequest (guaranteed rejected). none makes sense , shouldn’t even \nthinking forking making pull request.\nneed “fork” VisionEval-dev repository (short answer: “”) ever want ?Github misleading operation called “forking” people get confused difference “cloning” \n“forking”. Forking Github-specific operation create new Github-managed copy VisionEval repository within\nGit account. Cloning general Git action makes copy Github repository local computer.Github misleading operation called “forking” people get confused difference “cloning” \n“forking”. Forking Github-specific operation create new Github-managed copy VisionEval repository within\nGit account. Cloning general Git action makes copy Github repository local computer.need fork VisionEval repository clone development environment computer. Just run\ngit clone operation locally point VisionEval repository using one connection strings\nrevealed Github’s green “<> Code” button repository home page.need fork VisionEval repository clone development environment computer. Just run\ngit clone operation locally point VisionEval repository using one connection strings\nrevealed Github’s green “<> Code” button repository home page.“fork” still need “clone” order get local copy VisionEval repository \ncan build work . don’t need “fork” unless want make changes might contribute back \nVisionEval. Forks Github needed make pull requests. “pull request” offer merge changes\nback main VisionEval code base.“fork” still need “clone” order get local copy VisionEval repository \ncan build work . don’t need “fork” unless want make changes might contribute back \nVisionEval. Forks Github needed make pull requests. “pull request” offer merge changes\nback main VisionEval code base.“pull requests”, always made “development” branch VisionEval-dev, \nsure rebase changes current HEAD “development” branch prior submitting pull\nrequest (guaranteed rejected). none makes sense , shouldn’t even \nthinking forking making pull request.“pull requests”, always made “development” branch VisionEval-dev, \nsure rebase changes current HEAD “development” branch prior submitting pull\nrequest (guaranteed rejected). none makes sense , shouldn’t even \nthinking forking making pull request.’m using Windows?\nprinciple, VisionEval build run system supported version R available (Mac Linux even Windows Subsytem Linux)\nneed full R development environment place ve.build() R source build installation dependency packages\n“dependency” packages means first build take considerably longer equivalent Windows\nmachine binary packages available (order magnitude several hours instead just one hour,\ndepending speed machine).\nneed LOT RAM build (recommend 16 Gigabytes) ’re trying Linux\ncloud server, ’ll want premium setup configured. ’ve built , run less RAM (work\nreasonably large swap file). Remember running large VE model may still need much 8 9 Gigabytes \nRAM per concurrent scenario.\nneed RStudio Mac Linux (use , system supported RStudio\nsystem graphical user interface).\nneed RTools, Windows. RTools functions part standard Mac Linux operating system\nenvironments. Linux, depending distribution, need install system build environment (e.g. “build-essential” package Debian\nubuntu). furnish make, GNU compilers, etc. also need full R packages (r-base, r-base-dev).\nWithout RStudio, just follow command line instructions \nCaveat one recently (1/2024) tried non-Windows build, may still weirdnesses (e.g. \nfile permissions). Contact jeremy.raw dot.gov ’re trouble non-Windows build.\n’m using Windows?principle, VisionEval build run system supported version R available (Mac Linux even Windows Subsytem Linux)need full R development environment place ve.build() R source build installation dependency packages“dependency” packages means first build take considerably longer equivalent Windows\nmachine binary packages available (order magnitude several hours instead just one hour,\ndepending speed machine).need LOT RAM build (recommend 16 Gigabytes) ’re trying Linux\ncloud server, ’ll want premium setup configured. ’ve built , run less RAM (work\nreasonably large swap file). Remember running large VE model may still need much 8 9 Gigabytes \nRAM per concurrent scenario.need RStudio Mac Linux (use , system supported RStudio\nsystem graphical user interface).need RTools, Windows. RTools functions part standard Mac Linux operating system\nenvironments. Linux, depending distribution, need install system build environment (e.g. “build-essential” package Debian\nubuntu). furnish make, GNU compilers, etc. also need full R packages (r-base, r-base-dev).Without RStudio, just follow command line instructions belowCaveat one recently (1/2024) tried non-Windows build, may still weirdnesses (e.g. \nfile permissions). Contact jeremy.raw dot.gov ’re trouble non-Windows build.build VisionEval command line?\n’s easy, don’t already know want especially familiarity GNU\nBash command line, ’re going explain . Just use RStudio launch.bat (standard R GUI) ve.build().\n’s command line drill:\nOpen RTools43 Bash command line (’s icon within RTools43 Start Menu)\nChange build folder git repository clone. built folder - build\ncontains code needed perform build operations, part versioned Github code.\nType make go something else hour .\n\nmake done, go back git root Windows Explorer double-click launch.bat (\nVisionEval-dev.Rproj) start built VisionEval “ve.run()”\nreally love terminal, can put R executable PATH make finishes, just change \nroot git installation. enter “R” ’ll get R command line right VisionEval running\nwithin . courses, want weren’t setting cluster machines massively\nparallel VisionEval scenario runs?\nwant run command line inside RStudio, can open Terminal window, change “build” directory,\nrun “make” . ’s ! Everything else just like ve.build() within RStudio R\nGUI, though options partial builds.\nSee Makefile.md build\ndirectory learn build options.\ndefault, command line “build” process save log . (run ve.build() within\nR, console window keeps log). ’s magic incantation RTools43 Bash commend line (Mac Linux terminals)\nsave log file (“build/make.” - can use file name location like):\nnohup make >make.2>&1 & tail -f make.\nType Ctrl-C exit tail program (shows log terminal window build runs). Start monitoring\nre-entering just tail -f make.part. tail display doesn’t change , stop \nCtrl-C see get “done” message.\nwant end make process, end tail command (Ctrl-C) first enter commend\n(gets make process ID stops process):\nkill `ps aux | grep make | awk '{print $1}'`\ncan run ps command hand, find make process id (first colum ps output) kill id.build VisionEval command line?’s easy, don’t already know want especially familiarity GNU\nBash command line, ’re going explain . Just use RStudio launch.bat (standard R GUI) ve.build().’s command line drill:\nOpen RTools43 Bash command line (’s icon within RTools43 Start Menu)\nChange build folder git repository clone. built folder - build\ncontains code needed perform build operations, part versioned Github code.\nType make go something else hour .\nOpen RTools43 Bash command line (’s icon within RTools43 Start Menu)Change build folder git repository clone. built folder - build\ncontains code needed perform build operations, part versioned Github code.Type make go something else hour .make done, go back git root Windows Explorer double-click launch.bat (\nVisionEval-dev.Rproj) start built VisionEval “ve.run()”really love terminal, can put R executable PATH make finishes, just change \nroot git installation. enter “R” ’ll get R command line right VisionEval running\nwithin . courses, want weren’t setting cluster machines massively\nparallel VisionEval scenario runs?want run command line inside RStudio, can open Terminal window, change “build” directory,\nrun “make” . ’s ! Everything else just like ve.build() within RStudio R\nGUI, though options partial builds.\nSee Makefile.md build\ndirectory learn build options.default, command line “build” process save log . (run ve.build() within\nR, console window keeps log). ’s magic incantation RTools43 Bash commend line (Mac Linux terminals)\nsave log file (“build/make.” - can use file name location like):Type Ctrl-C exit tail program (shows log terminal window build runs). Start monitoring\nre-entering just tail -f make.part. tail display doesn’t change , stop \nCtrl-C see get “done” message.want end make process, end tail command (Ctrl-C) first enter commend\n(gets make process ID stops process):can run ps command hand, find make process id (first colum ps output) kill id.","code":"nohup make >make.out 2>&1 & tail -f make.outkill `ps aux | grep make | awk '{print $1}'`"},{"path":"conceptprimer.html","id":"conceptprimer","chapter":"3 Concept Primer","heading":"3 Concept Primer","text":"VisionEval differs traditional travel demand models works kind planning concerns helps address. chapter provides quick introduction approach unique features applications VisionEval. reviews main model components key concepts high level, assist new users understanding concepts apply set scenarios, develop inputs evaluate outputs. Links detailed documentation allow reader delve topic, choose.","code":""},{"path":"conceptprimer.html","id":"what-can-i-do-with-visioneval","chapter":"3 Concept Primer","heading":"3.1 What can I do with VisionEval?","text":"Structurally, VisionEval may described “disaggregate demand/aggregate supply” model. , combines rich demographic socioeconomic detail synthetic population aggregate treatments travel (multi-modal VMT congestion without explicit trips, transport networks). implication “aggregate supply” model VisionEval used evaluate performance specific projects corridors.VisionEval can , even makes especially simple, evaluate large numbers scenarios explore combinations alternative future conditions might affect performance measures. Travel demand models, whether built using traditional trip-based contemporary activity-based techniques, sacrifice flexibility network detail. difficult models capture novel behaviors increased propensity use inexpensive ride-hailing services, express shifts vehicle ownership occupancy may influenced multiple factors yet observed. Yet potential shifts often important assessing potential pricing, investment strategies policy priorities. VisionEval also makes relatively simple explore risks opportunities may eventually realized new transportation options mature.VisionEval won’t help us determine particular highway segment built upgraded, kind transit service improvements extended new areas. can help us look market new technologies, explore future scenarios based changed circumstances (altered demographics, increased congestion, alternate road pricing strategies) well changed behaviors (including behaviors might happen, yet observed key enabling technologies early deployment). VisionEval results can explored detail market segment, asking questions benefits might distributed regionally, overall system performance might look like.Ultimately, VisionEval system asking broad range “” questions transportation system might perform, benefits costs might distributed community. can efficiently process hundreds scenarios looking many different types interventions, alternative policies, hypothetical future conditions travel behaviors. results can inform strategic questions, helping decision makers answer questions “options achieving performance result?” “risks new transportation technologies develop different ways?”Using VisionEval answer questions make types modeling obsolete (travel demand models corridor microsimulations). Instead, helps determine worth effort code detailed models, also explore document novel assumptions future may require extra effort implement, prohibitively expensive explore traditional planning models.","code":""},{"path":"conceptprimer.html","id":"strengths-and-limitations","chapter":"3 Concept Primer","heading":"3.2 Strengths and limitations","text":"VisionEval operates broad geographic levels without explicit network representations enable fast analyses across scores different assumptions inputs. especially well suited quickly evaluating several different combinations policies assessing range impacts uncertainty exists several key inputs. much travel behavior asserted based observed travel patterns latter can changed reflect expected changes due new technologies, services, expected changes behavior time. Thus, VisionEval better suited traditional travel modeling approaches certain pursuits:Screening wide range policy actions, especially face uncertainties ranges expected responses effects must consideredResilience testing uncertainties (e.g., population growth, household size, fuel prices)Directly “comparing contrasting” broad ranges combinations policies (e.g., , transit service, active transport, demand management)Analysis broad policy technology changes (e.g., carbon taxes, low-carbon fuels)Evaluating fuel consumption, particulate emissions, greenhouse gas emissions impacts proposed policiesHowever, VisionEval well suited detailed geographic analyses, include effects congestion individual trips tours. Thus, examining effects localized land use (e.g. parcel block) network assumptions carried using VisionEval. Improvements network capacity, efficiency, safety can indirectly incorporated VisionEval.","code":""},{"path":"conceptprimer.html","id":"visioneval-geographies","chapter":"3 Concept Primer","heading":"3.3 VisionEval geographies","text":"Traditional travel forecasting models divide study area thousands traffic analysis zones order facilitate highly granular spatial analyses. allows trip (tour segment) origins destinations enter exit detailed representation multimodal transportation network order study network flows, congestion, efficiency outcomes. VisionEval operates much broader spatial scale, using several levels geography:region defines entire area covered VisionEval analysesAzones large areas cities, counties, Census Public Use Microdata Areas (PUMAs)Bzones subdivisions Azones represent neighborhoods, Census tracts block groups, relatively homogenous areasMetropolitan areas (Marea) defined groups Azones define themThe location type household also coded urban, town, rural areas. place type also defined terms urban density mix jobs housing. usually defined Bzone used model.Watch video presentation information VisionEval geographies","code":""},{"path":"conceptprimer.html","id":"performance-metrics","chapter":"3 Concept Primer","heading":"3.3.1 Performance metrics","text":"following table summarizes many possible performance metrics can summarized region level. ability easily export data enables analyst construct new different performance measures easily.Mobility\nDaily VMT per capita\nAnnual walk trips per capita\nDaily Bike trips per capita\nDaily VMT per capitaAnnual walk trips per capitaDaily Bike trips per capitaEconomy\nAnnual vehicle delay per capita (hours)\nDaily household parking costs\nAnnual household vehicle operating cost (fuel, taxes, parking)\nAnnual household vehicle ownership costs (depreciation, vehicle maintenance, tires, finance charge, insurance, registration)\nAnnual vehicle delay per capita (hours)Daily household parking costsAnnual household vehicle operating cost (fuel, taxes, parking)Annual household vehicle ownership costs (depreciation, vehicle maintenance, tires, finance charge, insurance, registration)Land Use\nNumber percent residents living mixed use areas\nNumber dwelling units housing type (e.g., single family [SF], multi-family [MF])\nNumber percent residents living mixed use areasNumber dwelling units housing type (e.g., single family [SF], multi-family [MF])Environmental\nAnnual greenhouse gas emissions per capita\nHousehold vehicle greenhouse gas/mile\nCommercial vehicle greenhouse gas/mile\nTransit vehicle greenhouse gas/mile\nAnnual greenhouse gas emissions per capitaHousehold vehicle greenhouse gas/mileCommercial vehicle greenhouse gas/mileTransit vehicle greenhouse gas/mileEnergy\nAnnual per capita fuel consumption vehicles (gallons)\nAverage fuel efficiency (net miles per gallon) vehicles\nAnnual external social costs per households (total/percent paid)\nAnnual per capita fuel consumption vehicles (gallons)Average fuel efficiency (net miles per gallon) vehiclesAnnual external social costs per households (total/percent paid)","code":""},{"path":"conceptprimer.html","id":"typical-applications","chapter":"3 Concept Primer","heading":"3.4 Typical applications","text":"VisionEval can used inform planning several different realms, described following sections.","code":""},{"path":"conceptprimer.html","id":"strategic-modeling","chapter":"3 Concept Primer","heading":"3.4.1 Strategic modeling","text":"VisionEval strategic modeling system. differs traditional travel demand microsimulation models principally applied earlier planning process, used different purposes. Rather examining detailed performance specific facilities (assessing individual projects), VisionEval estimates regional small area performance metrics reflect overarching policy goals emission reduction, regional VMT, mode share.Traditional travel models used planning purposes applied estimate outcomes small number alternate input scenarios vary land use characteristics (e.g. type density land uses), socioeconomic characteristics (e.g. population, ages, incomes), /transportation characteristics (e.g. road alignments, lane configurations, tolls, etc.). models, response changed inputs estimated based parameters typically derived household surveys related data sources: , behavior model presumed see today. Even though models often behaviorally complex (e.g., activity-based models), effort required assess many alternative scenarios often prohibitive, models built using complex estimation procedures rooted detailed data existing behavior, can technically difficult impossible reliably encode possible future shifts behavior, explore alternative possible future behaviors.VisionEval typically set run many scenarios explore broad set alternative policies investment priorities may result variety possible categories policy project interventions, range possible future conditions (strong weak economic growth, demographics shift different rates), uncertain deployment new technologies app-based ridesharing (Transportation Network Companies TNCs).full application VisionEval may examine hundreds even thousands permutations inputs representing many possible future outcomes. outputs allow planners decision-makers explore outcomes scenario compared others, can visualize discuss relative impact cross-influences, well unintended consequences, factors represented across scenarios. VisionEval allows planners assess alternative assumptions uncertain phenomena autonomous vehicle (AV) deployment, effective tool identifying risks opportunities, well formulating effective strategic responses new challenges little current data exists many outcomes possible yet none certain. interesting resulting strategic plans can refined detailed models. Based strategic modeling findings, uncertainties can confidently simplified smaller number scenarios explore detail.Notwithstanding typical application strategic model, VisionEval allow detailed investigation certain phenomena fleet composition vehicle ownership relation Greenhouse Gas Analysis. also unique ability explore budget constraints travel. simulation individual households enables assess policies difficult impossible model successfully traditional models.","code":""},{"path":"conceptprimer.html","id":"local-policy-actions","chapter":"3 Concept Primer","heading":"3.4.2 Local policy actions","text":"VisionEval well suited evaluating wide range local policies varying levels geography:Demographics (Azone)\nPopulation age (households & non-institutional group quarters)\nAverage household size percent single-person households\nDriver licensing rates (optional)\nAverage per capita Income\nPopulation age (households & non-institutional group quarters)Average household size percent single-person householdsDriver licensing rates (optional)Average per capita IncomeLandUse (Bzone)\nEmployment type (Total, Retail, Service)\nDwelling units type (SF, MF)\nIncome quartiles (allocating households neighborhoods Dwelling units)\nShare households urban mixed-use areas (optional)\n5D built form measures (Design & Transit)\nDevelopable area\nParking pricing policies\nEmployment type (Total, Retail, Service)Dwelling units type (SF, MF)Income quartiles (allocating households neighborhoods Dwelling units)Share households urban mixed-use areas (optional)5D built form measures (Design & Transit)Developable areaParking pricing policiesTransportation Operations Actions\nRoad lane-miles (freeways, arterials) (Marea)\nTransit service (service miles transit mode) (Marea)\nShort SOV trip diversion (bikes, personal electrics, etc.) (Azone)\nOperations (Ramp metering, Incident response, (Marea)\nspeed smoothing (Freeway ATM, Art Signal optimization) (Marea)\nVMT covered Drivers Eco-Drive programs (Marea)\nEV Charging infrastructure (residential) (Azone)\nRoad lane-miles (freeways, arterials) (Marea)Transit service (service miles transit mode) (Marea)Short SOV trip diversion (bikes, personal electrics, etc.) (Azone)Operations (Ramp metering, Incident response, (Marea)speed smoothing (Freeway ATM, Art Signal optimization) (Marea)VMT covered Drivers Eco-Drive programs (Marea)EV Charging infrastructure (residential) (Azone)Pricing\nFuel electricity costs (Azone)\nRoad cost recovery – registration fee, gas taxes, VMT fee (Azone)\nCarbon pricing otherand environmental impact social costs (Region)\nCongestion fees (Marea)\nPAYD insurance participation (Azone)\nFuel electricity costs (Azone)Road cost recovery – registration fee, gas taxes, VMT fee (Azone)Carbon pricing otherand environmental impact social costs (Region)Congestion fees (Marea)PAYD insurance participation (Azone)Vehicle, Fuels, & Emissions\nElectricity carbon intensity (Azone)\nFuel carbon intensity (composites vehicle group) (Region)\nLDV-HH percent light trucks (stock) (Azone)\nLDV-HH vehicle age average (Azone)\nLDV car service, vehicle mix (stock) (Region)\nTransit vehicles & fuels mix (Marea)\nLDV commercial service vehicle mix, %Light Trucks (stock) (Region)\nHeavy truck vehicle mix (stock) (Region)\nElectricity carbon intensity (Azone)Fuel carbon intensity (composites vehicle group) (Region)LDV-HH percent light trucks (stock) (Azone)LDV-HH vehicle age average (Azone)LDV car service, vehicle mix (stock) (Region)Transit vehicles & fuels mix (Marea)LDV commercial service vehicle mix, %Light Trucks (stock) (Region)Heavy truck vehicle mix (stock) (Region)","code":""},{"path":"conceptprimer.html","id":"scenario-analyses","chapter":"3 Concept Primer","heading":"3.5 Scenario analyses","text":"key value VisionEval facilitates running many scenarios possible futures. practice, user typically starts setting model reference scenario (.e. scenario represents current policies extrapolation current trends). model can validated current past years point. Reference scenario serves pivot point development alternative scenarios modify one policy assumptions assumptions future (e.g. assumptions urban area expansion, assumptions future light-duty vehicle fleet composition). VisionEval models address large number factors specified dozens input files, set inputs many different values, potential number alternate scenarios defined probably uncountable. reason, scenario generation process simplified defining categories inputs related affect behavior related policies likely deployed. example former definition pricing category groups inputs affecting price/cost operating light-duty vehicles (e.g. fuel price, congestion price, carbon price). example latter definition land use category addition including land use inputs development density, also includes transportation inputs associated land use transit service frequency. category inputs, several levels change reference scenario assumptions defined. Alternate scenarios can developed swapping reference scenario inputs category different level inputs category. typically done two ways:Sensitivity tests change single category inputs run. tests useful exploring relative effects category.Combinatorial tests compose scenarios combinations categories levels.Note number combinatorial scenarios function number categories number levels category. example, inputs grouped 5 categories category 3 levels, total 243 scenarios (3x3x3x3x3) generated combinations. reason, automated processes typically developed aid set-running scenarios, analysis results.","code":""},{"path":"conceptprimer.html","id":"building-blocks","chapter":"3 Concept Primer","heading":"3.6 Building blocks","text":"","code":""},{"path":"conceptprimer.html","id":"household-synthesis-and-land-use","chapter":"3 Concept Primer","heading":"3.6.1 Household synthesis and land use","text":"One strengths VisionEval rich detail individual households. allows household specific policies, travel behavior can respond specific household costs attributes, outputs can mined differences population groups. approach building synthesized population borrows state practice activity-based travel demand models.Watch short video household synthesisVisionEval creates simulated households Azone user-supplied projections persons age group average per capita income. simulated household characteristics number persons 6 age groups, number workers 5 age groups, lifecycle category, household income. simulated households assigned dwelling unit type (single family multi-family) using model sensitive household characteristics number units type assigned Azone (based user inputs). simulated household assigned Bzone based number dwelling units assigned type Bzone household’s income compared relative income distribution BZone. Separately, Bzones attributed employment land use attributes (location type, built form ‘D’ values, urban mixed use, employment type). Household members workers assigned Bzone work location function distribution jobs model area. home work location tied specific Bzone associated attributes.Policies added household function home work Bzones:Parking restrictions (work non-work)Travel demand management (TDM) programs (home work-based)Car service availabilityThe following sections describe module contributes concept.","code":""},{"path":"conceptprimer.html","id":"synthesize-households","chapter":"3 Concept Primer","heading":"3.6.1.1 Synthesize households","text":"Household synthesis carried several steps:Create customized PUMS dataset: done prior setting model VisionEval. household dataset prepared Census PUMS data modeled region. default data included VisionEval Oregon. PUMS data regions may used instead, rebuilding package reflect Census households region interest.Create Households: identified types PUMS households expanded meet user control totals demographic inputs. Census PUMS data used define probabilities person age group found hundreds household types. matrix balancing process used allocate persons age PUMS household types way matches input control totals optional constraints. sampled households expanded meet user control totals demographic inputs.Predict Workers: number workers age group within simulated household predicted using Census PUMS probabilities. user may optionally specify changes employment rates age group Azone simulate changes labor force participation time /differences employment rates location.Assign LifeCyle: Categorizes households categorized six lifecycle categories given household age mix employment status.Predict Income: annual income simulated household predicted function household’s worker count age group, average per capita income household resides (AZone), interactions neighborhood income age (seniors). models estimated Census PUMS data.","code":""},{"path":"conceptprimer.html","id":"household-drivers-and-autos","chapter":"3 Concept Primer","heading":"3.6.1.2 Household drivers and autos","text":"number drivers autos household calculated two steps:Assign Drivers: Drivers age group assigned household function numbers persons workers age group, household income, land use characteristics, transit availability. Metropolitan areas also sensitive transit service level urban mixed use indicators home location. Optional restriction drivers age group can used calibration address trends lower millennial licensure rates.Assign Vehicle Ownership: number vehicles owned leased household determined function household characteristics, land use characteristics, transportation system characteristics. Households metropolitan areas also sensitive transit service level urban mixed use indicators home location. model first predicts zero-auto households number vehicles owned (6), .","code":""},{"path":"conceptprimer.html","id":"land-use-attributes","chapter":"3 Concept Primer","heading":"3.6.1.3 Land use attributes","text":"Two steps required add land use attributes synthetic population:Calculate 4D Measures: Several land use 5D built form measures calculated Bzone. density, diversity, destination accessibilities based Bzone population, employment, dwelling units, developable land area inputs. design variable user input.Calculate Urban Mixed Use Measure: urban mixed measure household calculated based population density home Bzone dwelling unit type. model based 2001 NHTS data. model iterates match optional input target share households locate urban mixed-use areas.","code":""},{"path":"conceptprimer.html","id":"land-use-household-linkages","chapter":"3 Concept Primer","heading":"3.6.1.4 Land use-household linkages","text":"Several land use attributes added household:Assign Location Types: Households assigned land use location types – urban, town, rural – random allocation based household’s dwelling unit type input proportions mix dwelling types enclosing Bzone.Predict Housing: Dwelling unit types assigned regular group quarter households based input Bzone supply dwelling units type. Residential households also consider relative costliness housing within Azone (logged ratio household’s income relative mean income Azone), household size, oldest age person, interaction size income ratio.Locate Employment: number input jobs Bzone employment type (retail, service, total) scaled total jobs equals total household workers within Marea. worker table developed worker assigned work Bzone. assignment essentially uses gravity-type model tabulations workers jobs Bzone (marginal controls) distance residence employment Bzones (IPF seed, inverse straight-line distances home work Bzone centroids).","code":""},{"path":"conceptprimer.html","id":"policy-levers","chapter":"3 Concept Primer","heading":"3.6.1.5 Policy levers","text":"Several assumptions parking, demand management, mobility services can also coded:Assign Parking Restrictions: Households assigned specific parking restrictions fees residence, workplace(s), places likely visit based parking inputs BZone (within Bzones coded within metropolitan areas [Marea] ).\nResidential Parking Restrictions & Fees: number free parking spaces available household’s residence set based input value identify average residential parking spaces dwelling type Bzone. household vehicles parked free space residential parking cost (part auto ownership costs) identified function input parking rates home Bzone ().\nEmployer Parking Fees: workers pay parking set inputs define proportion workers facing parking fees Bzone. Whether payment part cash /buy back program similarly set input proportions Bzone associated fees set input parking rates work Bzone.\nNon-work Parking Fees: cost parking activities shopping estimated likelihood household visit Bzone parking fee Bzone. likelihood calculated gravity-type model, given relative amount activity Bzone (numbers households Bzone scaled retail service job attractions Bzone marginals) proximity destination (inverse distance matrix home Bzone seed matrix). average daily parking cost weighted average fee faced destination bzone likelihood visiting Bzone.\nAssign Parking Restrictions: Households assigned specific parking restrictions fees residence, workplace(s), places likely visit based parking inputs BZone (within Bzones coded within metropolitan areas [Marea] ).Residential Parking Restrictions & Fees: number free parking spaces available household’s residence set based input value identify average residential parking spaces dwelling type Bzone. household vehicles parked free space residential parking cost (part auto ownership costs) identified function input parking rates home Bzone ().Employer Parking Fees: workers pay parking set inputs define proportion workers facing parking fees Bzone. Whether payment part cash /buy back program similarly set input proportions Bzone associated fees set input parking rates work Bzone.Non-work Parking Fees: cost parking activities shopping estimated likelihood household visit Bzone parking fee Bzone. likelihood calculated gravity-type model, given relative amount activity Bzone (numbers households Bzone scaled retail service job attractions Bzone marginals) proximity destination (inverse distance matrix home Bzone seed matrix). average daily parking cost weighted average fee faced destination bzone likelihood visiting Bzone.Assign Demand Management: Households assigned individualized marketing programs based input participation levels within home Bzone. worker household can also assigned employee commute options program based input participation levels workers within assigned work Bzone. simple percentage reduction household VMT applied based household’s participation one program (maximum multiple program participation, avoid double-counting). Worker reductions applied worker’s work travel portion overall household VMT, summed multiple workers household participate programs.\n\nCaution: model assumes high-caliber TDM programs place produce significant VMT savings. Inputs reflect .\nAssign Demand Management: Households assigned individualized marketing programs based input participation levels within home Bzone. worker household can also assigned employee commute options program based input participation levels workers within assigned work Bzone. simple percentage reduction household VMT applied based household’s participation one program (maximum multiple program participation, avoid double-counting). Worker reductions applied worker’s work travel portion overall household VMT, summed multiple workers household participate programs.Caution: model assumes high-caliber TDM programs place produce significant VMT savings. Inputs reflect .Assign CarSvc Availability: car service level assigned household based input car service coverage household resides (Bzone). High Car Service availability can impact auto ownership (households may fewer vehicles high level car service available) auto operating cost (see discussion next section household costs budgets).Assign CarSvc Availability: car service level assigned household based input car service coverage household resides (Bzone). High Car Service availability can impact auto ownership (households may fewer vehicles high level car service available) auto operating cost (see discussion next section household costs budgets).","code":""},{"path":"conceptprimer.html","id":"household-multimodal-travel","chapter":"3 Concept Primer","heading":"3.6.2 Household multimodal travel","text":"Watch video overview Household Multimodal Travel moduleTravel various modes households (vehicle, transit, bike, walk modes) estimated simple function rich demographic land use attributes household. metropolitan areas travel also influenced inputs transport supply per capita basis, available roadway capacity bus-equivalent transit service levels. Transit, bike, walk trips also influenced household VMT (.e. household VMT decreases, trips modes increase, vise verse). Traditional travel models incorporate behavioral dynamics choice models build tours trips synthetic person. VisionEval, contrast, uses simple regression equations directly estimate average per capita trips miles mode, linked average trip lengths.adjusting VMT household budget limitations adjusted household participation TDM programs (home & work-based) short-trip SOV diversion calculating household trips modes. household’s bike miles also adjusted reflect SOV diversion input.following sections describe module, implemented sequence:household’s daily VMT calculated without household budget adjustmentsThe household’s vehicle operating costs calculatedThe household’s vehicle operating cost budget calculated daily VMT adjusted fit within budget necessaryDaily VMT reductions due TDM measures short-trip SOV diversions calculated appliedVehicle non-vehicular (AltMode) trips calculated household","code":""},{"path":"conceptprimer.html","id":"transport-supply","chapter":"3 Concept Primer","heading":"3.6.2.1 Transport supply","text":"Transport supply variables defined two steps. Note calculations carried within metropolitan areas\n(Mareas) :Assign Transit Service: Transit service levels input metropolitan areas neighborhood (Bzone). Annual revenue-miles (.e. transit miles revenue service) eight transit modes read inputs metropolitan area. Bzone-level Transit D attribute defines access transit (yet work access) household based inputs relative transit accessibility. Using factors derived National Transit Database (NTD), input annual transit revenue miles eight transit modes converted bus-equivalent miles three transit vehicle types (van, bus, rail). Per capita relative transit supply bus-equivalent service-miles calculated.Assign Road Miles: Stores input numbers freeway lane-miles arterial lane-miles metropolitan area year. Computes relative roadway supply, arterial freeway lane-miles per capita.","code":""},{"path":"conceptprimer.html","id":"household-travel-calculations","chapter":"3 Concept Primer","heading":"3.6.2.2 Household travel calculations","text":"Household travel vehicles calculated three steps:Calculate Household Daily VMT (Dvmt): Household average daily vehicle miles traveled (VMT) estimated function household characteristics(income, workers, children, drivers), vehicle ownership, attributes neighborhood (population density) metropolitan area (urban mixed-use, transit service level, freeway lane-miles) household resides. also calculates household VMT percentiles used modules calculate whether household likely electric vehicle (EV) calculate proportions plug-hybrid electric vehicles (PHEV) VMT powered electricity. values derived 2001 NHTS data.CalculateVehicleTrips: module calculates average daily vehicle trips households consistent household VMT. Average length household vehicle trips estimated function household characteristics (drivers/non-driers, income), vehicle ownership (auto sufficiency), attributes neighborhood (population density) metropolitan area (urban mixed-use, freeway lane-miles) household resides, interactions among variables. average trip length divided average household VMT get estimate average number daily vehicle trips.Calculate AltMode Trips: module calculates household transit trips, walk trips, bike trips. models sensitive household VMT run household VMT adjustments (e.g., account cost household VMT) made. Twelve models estimate trips three modes metropolitan non-metropolitan areas, two steps . first step determines whether household AltMode trips second part determines number trips. models include terms household characteristics (size, income, age mix) household’s overall VMT. Neighborhood factors (population density) factors bike trip models. households metropolitan areas transit service level impact well, transit ridership also sensitive residents live urban mixed-use neighborhoods.","code":""},{"path":"conceptprimer.html","id":"sov-diversion","chapter":"3 Concept Primer","heading":"3.6.2.3 SOV diversion","text":"Household single-occupant vehicle (SOV) travel reduced achieve bike micro-transportation input policy goals, .e., diverting portion SOV travel within 20-mile tour distance (round trip distance). allows evaluating potential light-weight vehicles (e.g. bicycles, electric bikes, electric scooters) infrastructure support use, reducing SOV travel. First, amount household’s VMT occurs SOV tours round trip distances 20 miles less estimated. average trip length within tours estimated. models sensitive household characteristics(drivers, income, kids), vehicle ownership (auto sufficiency), attributes neighborhood (population density, dwelling type) metropolitan area (urban mixed-use, freeway lane-miles) household resides, household’s overall VMT.diversion short trips assumed apply urban town location types. VMT reductions allocated households function household’s SOV VMT (inverse ) SOV trip length. words, assumed households qualifying SOV travel households shorter SOV trips likely divert SOV travel bicycle-like modes. estimates household’s share diverted VMT, average trip length diverted VMT applied elsewhere reduce DVMT increase bike trips. Zero vehicle households allowed divert SOV travel. Census PUMS data used estimate models.","code":""},{"path":"conceptprimer.html","id":"dvmt-reductions","chapter":"3 Concept Primer","heading":"3.6.2.4 DVMT reductions","text":"household’s VMT adjusted TDM program(s) participation, , well input metropolitan area short-trips SOV diversion goals. SOV diversion also increases bike trips (diverted SOV VMT divided SOV average trip length).","code":""},{"path":"conceptprimer.html","id":"vehicles-fuels-and-emissions","chapter":"3 Concept Primer","heading":"3.6.3 Vehicles, fuels and emissions","text":"powertrains, fuels, associated emissions datasets modeled vehicle groups among complex inputs used VisionEval. Default datasets included VisionEval installer simplify user. user can use defaults develop data matches VisionEval input requirements. anticipated different datasets developed users can shared VisionEval community. example, one package may represent base scenario federal vehicle, fuel, emission standards, another package represents California zero-emissions vehicle (ZEV) rules low carbon fuel home location’s car service.model looks household vehicle sales tables indexed vehicle type age determine probability powertrain sales year, along associated fuel efficiency attributes. household vehicle assigned attributes consistent probabilities. cases electric vehicles (EVs) replaced plug-hybrid electric vehicles (PHEVs) household VMT residential charging limitations exist.powertrain mix non-household vehicle groups – car service, commercial service, transit, heavy trucks – applied VMT (rather individual vehicles) scenario year (rather sales year). input adjustment average vehicle age commercial vehicle type share.Fuels vehicle groups can rely package defaults, use one two input options. user can either provide composite carbon intensity representing gallons fuel used vehicle group, provide fuel mix shares (base fuel mix, biofuel blend proportions), combined package default lifecycle (well--wheels) carbon intensity individual fuels. resulting carbon intensity per gallon applied gallons generated VMT vehicle fuel efficiency assumptions. Adjustments fuel efficiency due reduced speeds due congestion well operational programs (e.g., speed smoothing) EcoDrive programs.table summarizes vehicle fuel options available within VisionEval.Note individual vehicles modeled households, based sales year default datasets age owned vehicle. groups’ vehicle fuel attributes apply VMT scenario modeled year. result, PHEVs exist household vehicles, instead PHEVs represented miles driven HEVs miles EVs.Watch video overview vehicles, fuels, emissions","code":""},{"path":"conceptprimer.html","id":"household-vehicle-table","chapter":"3 Concept Primer","heading":"3.6.3.1 Household vehicle table","text":"household vehicle table generated two steps:Create Vehicle Table: vehicle table created record every vehicle owned household, additional vehicle records added reach household’s number driving age persons. vehicle record populated household ID geography fields (Azone, Marea) access time attributes. vehicle record either “” (driving-age person without vehicle) assigned access car service level, depending upon coverage household’s home Bzone.Assign Vehicle Type:. Identifies many household vehicles light trucks many automobiles function number vehicles, person--vehicle vehicle--driver ratios, number children, dwelling unit type, income, density, urban mixed use data (metropolitan areas ).","code":""},{"path":"conceptprimer.html","id":"powertrains-and-fuels-defaults","chapter":"3 Concept Primer","heading":"3.6.3.2 Powertrains and fuels defaults","text":"values defined two steps:Load Default Values:. script, run rest VisionEval started, reads processes default powertrains fuels files package creates datasets used modules compute fuel electricity consumption, well associated fuel electricity carbon intensity emissions vehicle travel.Initialize step run VisionEval part initialization run. Optional user-supplied vehicle fuel input files, , processed (including input data checks). available, modules compute carbon intensities vehicle travel use user-supplied data instead package default datasets.","code":""},{"path":"conceptprimer.html","id":"assign-household-powertrains-and-fuels","chapter":"3 Concept Primer","heading":"3.6.3.3 Assign household powertrains and fuels","text":"powertrain fuel type assigned vehicle household three steps:Assign Vehicle Age: Assigns vehicle ages household vehicle car service vehicle used household function vehicle group (household vehicles ), household income, assumed mean vehicle age vehicle type Azone. age model starts observed vehicle age distribution relationship vehicle age income. data currently based summaries 2001 NHTS. Adjustments made based user average vehicle age inputs (household vehicle type, car service overall).Assign Household Vehicle Powertrain: module assigns powertrain type household vehicle. age vehicle used default tables vehicle type identify powertrain mix vehicles sold sales year. default tables identify vehicle characteristics tied powertrain include battery range, fuel efficiency, emissions rate. Assignments EVs may changed PHEVs battery range compatible estimated day--day trip lengths, home dwelling lacks vehicle charging availability.Calculate Carbon Intensity: module calculates average carbon intensity fuels (grams CO2e per megajoule) vehicle group , applicable, vehicle type. Average fuel carbon intensities transit vehicle modes calculated metropolitan area, vehicles calculated entire model region. module also reads input average carbon intensity electricity Azone level.","code":""},{"path":"conceptprimer.html","id":"assign-non-household-powertrains-and-fuels","chapter":"3 Concept Primer","heading":"3.6.3.4 Assign non-household powertrains and fuels","text":"assignment powertrain fuel characteristics carried two steps:Calculate Transit Energy Emissions: module calculates energy consumption carbon emissions transit vehicles urbanized areas. Assumptions (package default user input) powertrain mix fuels three transit vehicle types metropolitan area applied associated Marea transit service miles types. Assumptions (package default user input) average carbon intensity fuel electricity transit vehicle types applied Marea fuel electricity usage across types calculate carbon emissions.Calculate Commercial Energy Emissions: energy consumption carbon emissions heavy trucks commercial service VMT (vehicles) calculated -road (sales) year. VMT shares Commercial Service powertrains vehicle type heavy truck powertrains calculated (per package default user input). fuel efficiency (MPG MPKWH) adjustments applied, due policies (EcoDriving, speed smoothing /congestion (including effects operational congestion fee policies). Ecodriving applies internal combustion engine (ICE) vehicles operational policies congestion apply metropolitan areas. vary powertrain commercial vehicles, vehicle type. Combining fuel efficiency VMT (Household Multimodal Travel Model) results estimates energy usage (fuel electricity). Fuel carbon intensity modes calculated metropolitan area /region applied fuel electricity usage estimate CO2e emissions.","code":""},{"path":"conceptprimer.html","id":"adjustments","chapter":"3 Concept Primer","heading":"3.7 Adjustments","text":"","code":""},{"path":"conceptprimer.html","id":"congestion-adjustments","chapter":"3 Concept Primer","heading":"3.7.1 Congestion adjustments","text":"Congestion, calculated urbanized roads (subset metropolitan area roads, requires estimating combining together VMT vehicle groups. non-household vehicles, base year VMT calculated directly inputs model parameters, future year function input growth basis. Initial allocations DVMT across road class] based input values.Light duty vehicle (LDV) VMT allowed re-allocate freeways arterials balance demand (VMT) roadway supply (lane-miles) generalized cost framework (including roadway speed congestion fees, ). Roadway supply (.e., capacity) adjusted delay-reducing operations policies based fuel-speed curves powertrain, resulting congested speeds impact vehicle fuel efficiency. adjustments applied reflect speed smoothing EcoDrive programs may affect delay reduce acceleration deceleration associated impacts fuel efficiency.fuel efficiency adjustments congestion policies made non-urban roadway VMT. delays faced household associated fuel economy impacts applied individual household’s VMT vehicles. Resulting overall average speeds, delays, DVMT proportions, road class congestion level urbanized roads also tabulated along resulting average per mile congestion fees paid, , overall vehicle hours delay (VHD) vehicle group.Watch video summary VisionEval’s congestion adjustment","code":""},{"path":"conceptprimer.html","id":"initialize-roadway-conditions","chapter":"3 Concept Primer","heading":"3.7.1.1 Initialize roadway conditions","text":"roadway conditions model calculated three steps:Load Default Road VMT Values: calculations completed model run starts. base year roadway VMT processed, including light duty vehicle heavy truck VMT state urbanized area well VMT proportions urbanized area, vehicle group (light duty vehicle, heavy truck, bus), road class. user can either provide direct inputs values specify state /urbanized area model use default data 20xx USDOT Highway Statistics, available.Initialize:. step run model run initialized. User inputs used several modules read checked (many several valid options, proportions sum 1, consistency, congestion fees increase congestion level). values optional, using default data specified. includes various assumptions base year VMT within urbanized area(s) full model region, vehicle group, allocation among road class, growth basis, assumptions freight vehicle groups. also checks inputs operational policies EcoDriving programs, including user-specified “ops” programs congestion fees (road class congestion level).Calculate Road VMT: Adds together metropolitan area VMT vehicle groups (Households, CarService, Commercial Service, Heavy Truck, Transit) allocates across road classes (freeway, arterial, ), limiting urbanized area roadways use congestion calculations. , several factors established base year. One uses input growth basis (population, income, household VMT) estimate future year freight vehicle group (commercial service heavy truck) VMT (using input base year VMT values region Marea, provided, model-estimates otherwise). second base year factor identifies urban non-urban allocation VMT metropolitan area households related commercial service vehicles. Heavy Trucks VMT input specifies proportion VMT urbanized roads transit VMT (transit service modes) assumed occur urbanized roads. Base year allocations urban VMT vehicle group among road classes based input shares, subject adjustment subsequent congestion calculations. Finally, assess delay faced household associated fuel efficiency impacts, individual household’s VMT split miles urbanized road miles.","code":""},{"path":"conceptprimer.html","id":"congestion-model-and-adjustments","chapter":"3 Concept Primer","heading":"3.7.1.2 Congestion model and adjustments","text":"Three adjustments made based congestion levels:Calculate Road Performance: Congestion level road class associated amounts VMT iteratively estimated. Light duty vehicle (LDV) VMT allowed re-allocate freeways arterials balance demand roadway supply (lane-miles) generalized cost framework (including roadway speed congestion fees, estimated base year urbanized area lambda parameter based area’s population freeway-arterial lane-mile ratio). DVMT allocation different aggregate demand-supply ratios relies data 2009 Urban Mobility Study (UMS) 90 urbanized areas, model chooses 5-10 cities similar congestion ratios.\nsupply calculation considers delay-reduction effects deploying urban area operations programs (freeway ramp metering, freeway incident management, arterial signal coordination, arterial access control user-defined “ops” programs. standard -operations program impacts based research (Bigazzi & Clifton 2011). Non-urban speeds also calculated, using simple ratio rural--urban travel volumes.\nresulting average speeds, delay DVMT proportions, road class congestion level urbanized metropolitan area roads calculated, resulting average per mile congestion fees paid, , overall VHD vehicle group.Calculate Road Performance: Congestion level road class associated amounts VMT iteratively estimated. Light duty vehicle (LDV) VMT allowed re-allocate freeways arterials balance demand roadway supply (lane-miles) generalized cost framework (including roadway speed congestion fees, estimated base year urbanized area lambda parameter based area’s population freeway-arterial lane-mile ratio). DVMT allocation different aggregate demand-supply ratios relies data 2009 Urban Mobility Study (UMS) 90 urbanized areas, model chooses 5-10 cities similar congestion ratios.supply calculation considers delay-reduction effects deploying urban area operations programs (freeway ramp metering, freeway incident management, arterial signal coordination, arterial access control user-defined “ops” programs. standard -operations program impacts based research (Bigazzi & Clifton 2011). Non-urban speeds also calculated, using simple ratio rural--urban travel volumes.resulting average speeds, delay DVMT proportions, road class congestion level urbanized metropolitan area roads calculated, resulting average per mile congestion fees paid, , overall VHD vehicle group.Calculate Mpg Mpkwh Adjustments: Adjustments fuel efficiency (MPG MPKwhr) vehicle groups resulting traffic congestion, congestion fees, speed smoothing (.e. active traffic management reduces speed variation), EcoDriving calculated. fuel-speed curves vary road class, congestion powertrains (LdIce, LdHev, LdEv, HdIce) , applicable, vehicle type relative reference speeds road class. adjustments based drive-cycle level simulation research (Bigazzi & Clifton 2011). Note adjustments made policies (standard speed smoothing policies) EcoDrive programs ‘’ road classes (non-freeway arterials) non-urbanized roads, assumed uncongested.Calculate Mpg Mpkwh Adjustments: Adjustments fuel efficiency (MPG MPKwhr) vehicle groups resulting traffic congestion, congestion fees, speed smoothing (.e. active traffic management reduces speed variation), EcoDriving calculated. fuel-speed curves vary road class, congestion powertrains (LdIce, LdHev, LdEv, HdIce) , applicable, vehicle type relative reference speeds road class. adjustments based drive-cycle level simulation research (Bigazzi & Clifton 2011). Note adjustments made policies (standard speed smoothing policies) EcoDrive programs ‘’ road classes (non-freeway arterials) non-urbanized roads, assumed uncongested.Adjust Household Vehicle MPg Mpkwh: Implements fuel efficiency (MPG MPKwh) adjustments household vehicles (including Car Service VMT), reflecting effects congestion, congestion fees, speed smoothing, eco-driving calculated elsewhere. adjustments vary vehicle powertrain, vehicle type, proportion household’s travel driven urban non-urban roads within metropolitan area. Joint effects calculated product congestion speed effects maximum implemented speed-smoothing policies (eco-driving & -speed smoothing).Adjust Household Vehicle MPg Mpkwh: Implements fuel efficiency (MPG MPKwh) adjustments household vehicles (including Car Service VMT), reflecting effects congestion, congestion fees, speed smoothing, eco-driving calculated elsewhere. adjustments vary vehicle powertrain, vehicle type, proportion household’s travel driven urban non-urban roads within metropolitan area. Joint effects calculated product congestion speed effects maximum implemented speed-smoothing policies (eco-driving & -speed smoothing).","code":""},{"path":"conceptprimer.html","id":"household-costs-and-budgets","chapter":"3 Concept Primer","heading":"3.7.2 Household costs and budgets","text":"Two adjustments made response household budgets. Vehicle ownership costs calculated adjustment made number household owned autos costs greater switching ‘High’ level car service, available (subject input limits car service substitutability). Vehicle ownership costs include financing, depreciation, insurance (unless PAYD program), annual registration fees, residential parking fees.Additionally, order respond pricing policies energy costs, VisionEval imposes operating cost budget limitation. Household VMT constrained annual vehicle operating costs must stay maximum share annual household income, budget limit. household-specific average annual vehicle operating costs first calculated, including --pocket per mile costs household owned car service vehicles used household, well time-equivalent cost (input access times, estimates VMT congested speeds, value time input). Vehicle operating costs determine proportional split VMT across household vehicles. --pocket costs include energy, maintenance, repair, & tires, road use taxes (including EV surcharge optional calculation fee fully recover road costs), work/non-work parking, PAYD insurance, input share carbon social costs, well car service fees household. Note time-equivalent costs used allocate travel household vehicles (including car services used household). Time-equivalent cost used balancing household vehicle operating cost budget.following sections describe module contributes concept.Watch video overview costs budgets","code":""},{"path":"conceptprimer.html","id":"auto-ownership-cost-adjustment","chapter":"3 Concept Primer","heading":"3.7.2.1 Auto Ownership Cost & Adjustment","text":"Two steps required calculate adjust auto ownership costs:Calculate Vehicle Cost: Average Vehicle ownership costs calculated vehicle based vehicle type, age, annual VMT (financing, depreciation, insurance), annual registration fees (flat ad valorum), combined residential parking costs (household exceeds free parking limits). , PAYD insurance participation assigned based household characteristics (drivers age, annual mileage, income, location type, vehicle type age) input PAYD insurance program participation. ownership cost converted average vehicle-specific ownership cost per mile dividing estimated household VMT per vehicle.Note PAYD insurance affect cost vehicle ownership determining whether household substitute car services one vehicles. affect --pocket operating cost used budget limitations household VMT.Adjust Vehicle Ownership: Household vehicle ownership adjusted based comparison cost owning versus ‘high’ car service per mile rates, available. module identifies household vehicles ‘High’ car service area, car service mileage rate exceeds household’s estimated vehicle ownership cost per annual household VMT. household’s vehicle table entry changes ‘’ ‘HighCarSvc’ vehicles, limited input assumptions regarding average likelihood owner substitute car services household vehicle (separate values specified vehicle type). auto ownership values also updated (e.g., insurance, total vehicles).","code":""},{"path":"conceptprimer.html","id":"auto-operating-cost-adjustment","chapter":"3 Concept Primer","heading":"3.7.2.2 Auto Operating Cost & Adjustment","text":"Three primary adjustments adjustments auto operating cost carried VisionEval:Calculate Vehicle Operating Cost: composite per mile cost calculated --pocket cost various household car service vehicle VMT (see ), combined cost equivalent travel time (access time travel time congested speeds times value time (VOT)). Total costs result applying vehicle-specific cost rate vehicle’s VMT, VMT split among household vehicles (including car services used household members) (reciprocal) function vehicle-specific composite cost rate:Vehicle maintenance, repair, tire cost (MRT) costs calculated function vehicle type, powertrain vehicle age based data American Automobile Association (AAA) Bureau Labor Statistics (BLS).Fuel energy costs calculated energy rates time average fuel efficiency (miles per gallon Kwhr electricity).Gas taxes federal, state local per gallon taxes cover road costs. Electric vehicles, equivalent per mile cost calculated can applied electric vehicles ($/gallon EV vehicle surcharge tax).Road Cost Recovery taxes (.e. VMT tax) user input. (optional) BalanceRoadCostsAndRevenues module run, extra VMT tax calculated recovers household share road costs, consistent across model households.Congestion fees calculated average congestion price ($/mile) travel urbanized roads Marea multiplied proportion household travel occurring roads.Carbon fee social cost fees carbon cost per mile calculated input carbon price times average household emissions rate (grams/mile), VMT-weighting vehicles household. social costs, per gallon (non-EV vehicle miles) others per mile (regardless powertrain). full per mile costs discounted reflect input proportion social cost paid user. Note Carbon Price Externality Social Costs defaults can overwritten inputs VETravelPeformance package.Daily parking costs work parking costs (workers pay parking) parking cost (cost parking shopping, etc.) summed divided household DVMT. Note residential parking costs included vehicle ownership per mile cost calculations.Pay---drive (PAYD) insurance defined participating households sum annual insurance cost household vehicles divided annual household VMT.Car-service costs cost using car service (dollars/mile) user input car service level (Low, High).Balance Road Costs Revenues: Optionally, extra mileage tax ($/mile) household vehicles needed make difference cost constructing, maintaining, operating roadways revenues total road cost fees including fuel, VMT, congestion charges. Optionally, additional mileage fee ($/mile) household travel calculated fully pay roadway costs attributable household vehicle travel. cost existing new freeway arterial lane-miles Marea calculated difference input lane-miles relative base year input unit road costs (constructing, maintaining, operating). Reductions lane-miles ignored. proportion road costs attributable households set ratio household VMT divided sum household (including CarService), commercial service, car-equivalent heavy truck VMT (multiply PCE). Average road taxes collected per household vehicle mile calculated weighted average average road tax per mile household (calculated CalculateVehicleOperatingCost module) using household VMT (calculated BudgetHouseholdDvmt module) weight. Currently annual fees contribute road cost recovery.Balance Road Costs Revenues: Optionally, extra mileage tax ($/mile) household vehicles needed make difference cost constructing, maintaining, operating roadways revenues total road cost fees including fuel, VMT, congestion charges. Optionally, additional mileage fee ($/mile) household travel calculated fully pay roadway costs attributable household vehicle travel. cost existing new freeway arterial lane-miles Marea calculated difference input lane-miles relative base year input unit road costs (constructing, maintaining, operating). Reductions lane-miles ignored. proportion road costs attributable households set ratio household VMT divided sum household (including CarService), commercial service, car-equivalent heavy truck VMT (multiply PCE). Average road taxes collected per household vehicle mile calculated weighted average average road tax per mile household (calculated CalculateVehicleOperatingCost module) using household VMT (calculated BudgetHouseholdDvmt module) weight. Currently annual fees contribute road cost recovery.Budget Household Dvmt: Household VMT adjusted keep within household’s vehicle operating cost budget, based historic maximum proportion income household willing pay vehicle operations. proportions varies income. household’s DVMT reduced needed keep annual --pocket vehicle operating cost within share household’s annual income. Annual vehicle operating costs include household’s VMT times --pocket per mile vehicle costs, adding credits selected annual payments (annual work parking fee work parking cash--buy-back program, annual vehicle insurance PAYD insurance program, annual auto ownership costs car service program reduced auto ownership). module relies aggregate survey data U.S. Bureau Labor Statistics (BLS) Consumer Expenditure Survey (CES) years 2003-2015.Budget Household Dvmt: Household VMT adjusted keep within household’s vehicle operating cost budget, based historic maximum proportion income household willing pay vehicle operations. proportions varies income. household’s DVMT reduced needed keep annual --pocket vehicle operating cost within share household’s annual income. Annual vehicle operating costs include household’s VMT times --pocket per mile vehicle costs, adding credits selected annual payments (annual work parking fee work parking cash--buy-back program, annual vehicle insurance PAYD insurance program, annual auto ownership costs car service program reduced auto ownership). module relies aggregate survey data U.S. Bureau Labor Statistics (BLS) Consumer Expenditure Survey (CES) years 2003-2015.","code":""},{"path":"conceptprimer.html","id":"processing","chapter":"3 Concept Primer","heading":"3.8 Processing","text":"VisionEval designed easy install, run, summarize, even comparing scores different scenarios. produces consistent detailed performance metrics. user can modify metrics produced model define data exported model. also several ways think validation model within VisionEval mindset. topics explored chapter.","code":""},{"path":"conceptprimer.html","id":"running-visioneval","chapter":"3 Concept Primer","heading":"3.8.1 Running VisionEval","text":"VisionEval implemented entirely R statistical language operates recent versions Microsoft Windows. development work done , although macOS Linux versions usually distributed. fully self-contained installer recent production release VisionEval can found download page. permits installation full VisionEval platform, include example data, even behind firewalls prevent access R Project GitHub repositories.installed user assembles data standard directory structure. model run script customized user typically run command prompt. Running manner allows several different scenarios run time minimal user interaction. results can mined visualized using variety VisionEval third-party products. users use R Shiny similar interactive environments summarizing visualizing output VisionEval. environment especially useful comparing key metrics large number scenarios.","code":""},{"path":"conceptprimer.html","id":"typical-outputs","chapter":"3 Concept Primer","heading":"3.8.2 Typical outputs","text":"VisionEval generates large set performance metrics varying summary levels. Several pre-defined metrics compiled mobility, economic, land use, environmental, energy categories model run. can tabulated individual scenarios compared scenarios, well visualized using variety tools.intermediate data generated various VisionEval module steps can compiled performance metrics, absolute per-capita terms various geographies. Traditional transportation network metrics VMT, vehicle person hours travel, total delay easily compiled overall focused areas within model. Likewise, emission estimates fuel consumption tabulated. can viewed standard reports VEScenarioManager files, especially comparing values scenarios.One example set region-wide performance metrics used Oregon DOT includes:Mobility\nDaily per capita VMT\nAnnual walk trips per capita\nDaily Bike trips per capita\nDaily per capita VMTAnnual walk trips per capitaDaily Bike trips per capitaEconomy\nAnnual vehicle delay per capita (hours)\nDaily household parking costs\nAnnual HH vehicle operating cost (fuel, taxes, parking)\nAnnual HH ownership costs (depreciation, vehicle maintenance, tires, finance charge, insurance, registration)\nAnnual vehicle delay per capita (hours)Daily household parking costsAnnual HH vehicle operating cost (fuel, taxes, parking)Annual HH ownership costs (depreciation, vehicle maintenance, tires, finance charge, insurance, registration)Land Use\nResidents living mixed use areas\nHousing type (SF: MF)\nResidents living mixed use areasHousing type (SF: MF)Environmental\nAnnual GHG emissions per capita\nHH vehicle GHG/mile\nCommercial vehicle GHG/mile\nTransit Vehicle GHG/mile\nAnnual GHG emissions per capitaHH vehicle GHG/mileCommercial vehicle GHG/mileTransit Vehicle GHG/mileEnergy\nAnnual vehicle fuel consumption per capita (gallons)\nAverage vehicle fuel efficiency (net miles per gallon)\nAnnual external social costs per households (total/% paid)\nAnnual vehicle fuel consumption per capita (gallons)Average vehicle fuel efficiency (net miles per gallon)Annual external social costs per households (total/% paid)","code":""},{"path":"conceptprimer.html","id":"exporting-data","chapter":"3 Concept Primer","heading":"3.8.3 Exporting data","text":"data generated VisionEval model run can exported (using exporter.R) desired analyses. user can mine visualize data using variety open source proprietary tools. provides user considerable flexibility creating detailed statistics provided program. VisionEval outputs might serve inputs models (e.g., emissions models, economic impact models) visualization tools, compilation additional performance metrics.","code":""},{"path":"conceptprimer.html","id":"validation","chapter":"3 Concept Primer","heading":"3.8.4 Validation","text":"Setting model includes steps required apply model given study. somewhat related validation, informing types studies VisionEval appropriately sensitive interpreting results. See Getting Started page wiki overview getting started initially.Validation assessment model’s suitability intended purpose, often informed comparisons information used original development. traditional transportation planning models comparison observed versus modeled link flows often key component validation. VisionEval data-driven model inputs values exogenously defined rather emergent behavior complex mathematical equations. aggregate representation travel demand dictates validated level, emphasis wider number comparisons many traditional models.metric used validation can range relatively , per-capita mobility estimates (e.g., VMT VHT mode), large number detailed targets. Examples latter include comparisons external sources (e.g., HPMS data, DMV data), sensitivity tests key variables, comparison comparable communities. example detailed validation criteria used Oregon DOT provides examples targets.several options making adjustments order calibrate validate models. adjustments vary difficulty, appropriate approach varies module. easiest difficult options making adjustments :Self-calibration: Several modules self-calibrating automatically adjust calculations match input values without intervention user.[Selected value validated confirm calculations done correctly]Adjustment model inputs: modules allow user optionally enter data can used adjust models improve match observed conditions.Model estimation data: Several modules use data specific region model deployed, household synthesis. Functions within module generate cross-tabulations required data. Census PUMS data Oregon used develop original models, replaced PUMS data modeled area.Model estimation scripts: advanced user developer can make adjustments model code order facilitate better matching observed local behavior patterns. , course, difficult option opens potential significant errors, possible users know .main validation targets historically included household income, vehicle ownership, vehicle miles travel, fuel consumption. number workers drivers within geography recently become widely used. statistical comparisons can made modeled area whole large geographies nested within (e.g., Azones, Mareas). Sensitivity tests performed evaluate reasonableness (eg. correct direction magnitude) VisionEval output estimates. Comparable community applications VisionEval may also provide reasonableness check model functioning appropriately.Note HPMS definition VMT differs used VisionEval. VisionEval reports household travel regardless occurs, adds Commercial vehicle Heavy Duty Truck Bus travel MPO roads. HPMS reports vehicular travel modes roads within MPO boundary.","code":""},{"path":"conceptprimer.html","id":"lexicon","chapter":"3 Concept Primer","heading":"3.9 Lexicon","text":"","code":""},{"path":"conceptprimer.html","id":"buit-form-measures","chapter":"3 Concept Primer","heading":"3.9.1 5D built form measures","text":"five dimensions considered designing efficient sustainable cities include density, design, destination access, distance transit, diversity built environment. five dimensions build upon original 3Ds (density, diversity, design) advanced Cervero & Kockelman (1997). measures calculated Calculate4DMeasures module household synthesis.","code":""},{"path":"conceptprimer.html","id":"access-time","chapter":"3 Concept Primer","heading":"3.9.2 access time","text":"time required get origin vehicle (case car service, time vehicle get traveler) time get vehicle destination (including time park vehicle). values defined vehicles owned household two levels car service (low high availability levels) Bzone. factors defined azone_vehicle_access_times.csv used CalculateVehicleOperatingCost module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"age-group","chapter":"3 Concept Primer","heading":"3.9.3 age group","text":"VisionEval uses age groups used U.S. Census: 0-14, 15-19, 20-29, 30-54, 55-64, 65+ years old. number persons age group defined synthetic household.","code":""},{"path":"conceptprimer.html","id":"auto-sufficiency","chapter":"3 Concept Primer","heading":"3.9.4 auto sufficiency","text":"Auto sufficiency achieved number vehicles available household equal greater number licensed drivers household. household “auto insufficient” true. Zero-auto households cases household access vehicle. age ubiquitous mobility services definition may become less important describing mobility options open household.","code":""},{"path":"conceptprimer.html","id":"azones","chapter":"3 Concept Primer","heading":"3.9.5 azones","text":"Aggregations Bzones, often corresponding county, city, Census named place, comparable political divisions.\nAdditional details VisionEval model geography levels.","code":""},{"path":"conceptprimer.html","id":"bus-equivalent-miles","chapter":"3 Concept Primer","heading":"3.9.6 bus-equivalent-miles","text":"total bus revenue miles transit system divided assumed transit vehicle type capacities arrive bus-equivalent miles service. total bus revenue miles transit system divided population enclosing Marea(s) compute per capita bus-equivalent miles.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"bzones","chapter":"3 Concept Primer","heading":"3.9.7 bzones","text":"smallest levels geography coded VisionEval, often correspond Census tracts block groups. instances Bzones larger traffic analysis zones used traditional travel demand forecasting models.\nAdditional details VisionEval model geography levels.","code":""},{"path":"conceptprimer.html","id":"carbon-intensity","chapter":"3 Concept Primer","heading":"3.9.8 carbon intensity","text":"emissions measure grams carbon dioxide equivalents per megajoule energy. VisionEval uses “well--wheels” estimate takes account emissions resulting use fuel (“tank--wheels” measures) also carbon emissions required produce transport fuel purchased consumers. Default values estimated various sources VisionEval. user can specify different values. values used several places VEPowertrainsAndFuels package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"carbon-price","chapter":"3 Concept Primer","heading":"3.9.9 carbon price","text":"carbon price dollars per ton used estimate part social cost emissions CalculateVehicleOperatingCost module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"car-service","chapter":"3 Concept Primer","heading":"3.9.10 car service","text":"Car services specific mode used VisionEval models treated vehicles available household. Car services can considered synonym popular ride-sharing services provided mobility---service (MaaS) companies. VisionEval distinguishes two levels car service, categorized “high” “low” level service. Users can define different attributes level car service. Notably, households areas “high” level car service, car service competitive vehicle ownership. Users can define car service substitution probability.","code":""},{"path":"conceptprimer.html","id":"car-service-level","chapter":"3 Concept Primer","heading":"3.9.11 car service level","text":"Car services include taxis, car sharing services (e.g. Car--Go, Zipcar), future automated taxi services. high car service level one vehicle access times (time walk car origin final destination) competitive private car use. High level car service considered increase household car availability similar owning car. Low level car service, approximates current taxi service competitive access time considered increasing household car availability.","code":""},{"path":"conceptprimer.html","id":"car-service-substitution","chapter":"3 Concept Primer","heading":"3.9.12 car service substitution probability","text":"Average likelihood owner substitute car services household vehicle (separate values vehicle type. example, user assumes quarter light truck owners substitute car services owning light truck (e.g. car services wouldn’t enable use light truck intend, towing trailer), light truck substitution probability 0.25.","code":""},{"path":"conceptprimer.html","id":"cash-out-buy-back","chapter":"3 Concept Primer","heading":"3.9.13 cash-out/buy-back program","text":"Parking cash-schemes employee benefit enables accept taxable cash income lieu paid subsidized parking workplace. cash-sometimes combined discounted transit passes places. used inducement reduce commuting auto, especially single-occupant vehicles.\nFHWA excellent primer topic, many consider Donald Shoup’s online book definitive resource topic.","code":""},{"path":"conceptprimer.html","id":"census-pums","chapter":"3 Concept Primer","heading":"3.9.14 Census PUMS","text":"Public Use Microsample (PUMS) data anonymized long form responses American Community Survey (ACS) enable custom tabulations, summaries, visualizations. PUMS formerly associated dicennial Census Households Population. samples anonymized assigning Public Use Microdata Area (PUMA) 100,000 households. Several multi-dimensional summaries used model estimation gleaned PUMS obtained Census data. Data indexed along multiple dimensions permit PUMS data fused travel survey data create synthetic populations.\nACS PUMS data 2005-19 annual increments can accessed PUMS website. Data 1996-2004 can accessed separately.","code":""},{"path":"conceptprimer.html","id":"commercial-service","chapter":"3 Concept Primer","heading":"3.9.15 commercial service","text":"use vehicles firms government agencies non-personal travel delivery freight. (e.g., parcel delivery, business meetings, sales calls). automobiles light trucks can used commercial services, defined terms powertrain fuel type (gasoline, diesel, compressed natural gas).\nAdditional details","code":""},{"path":"conceptprimer.html","id":"congestion-fee","chapter":"3 Concept Primer","heading":"3.9.16 congestion fee","text":"fee collected manage congestion, charging higher price congested periods, thereby reducing demand freeing capacity higher value users freight movement. Separate price schemes can set year imposed severe extreme congestion. input average amount paid per mile congestion pricing fee. input CalculateRoadPerformance module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"congestion-level","chapter":"3 Concept Primer","heading":"3.9.17 congestion level","text":"Five levels congestion – none, moderate, heavy, severe, extreme – estimated within Marea comparing relative roadway supply aggregate level daily VMT (demand). Lookup tables used estimate average speeds delay freeways arterials. effects four standard operations programs (freeway ramp metering incident management, arterial signal progression access control) optional user-defined programs included calculations. calculations carried CalculateRoadPerformance module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"development-type","chapter":"3 Concept Primer","heading":"3.9.18 development type","text":"NEED INFO mixing jobs housing","code":""},{"path":"conceptprimer.html","id":"dwelling-unit-type","chapter":"3 Concept Primer","heading":"3.9.19 dwelling unit type","text":"household inhabits dwelling unit either single-family dwelling, multi-family dwelling, group quarters.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"ecodrive","chapter":"3 Concept Primer","heading":"3.9.20 EcoDrive","text":"term used describe energy efficient use vehicles order reduce fuel consumption emissions. Primarily European pursuit, EcoDriving involves changes vehicular technology, vehicle navigation automation systems, driving techniques. Factors expressing degree EcoDriving adoption applied CalculateMpgMpkwhAdjustments module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"employee-commute-options-program","chapter":"3 Concept Primer","heading":"3.9.21 employee commute options program","text":"voluntary employer-based program aimed reducing solo commutes automobile using strategies incentive tailored towards specific organization. Strategies range providing information management encouragement use alternative modes transportation cash incentives. Cash-/buy-programs one example latter.\nmassDOT guidebook provides extensive information programs.\nstates programs mandatory large employers. Information Oregon’s Employee Commute Options program includes information conducting employee surveys demonstrate progress towards commuting trip reduction targets.input used within Travel Demand Management input work-based policies. input assumes workers participate strong employee commute options programs (e.g., free transit pass, emergency ride home, bike rider facilities, etc.).input complement IMP (Individualized marketing programs)","code":""},{"path":"conceptprimer.html","id":"employment-rate","chapter":"3 Concept Primer","heading":"3.9.22 employment rate","text":"employment rate number potential workers aged 17 divided total number persons Bzone. Note calculated rate based zonal attributes, proxy labor force participation rate.","code":""},{"path":"conceptprimer.html","id":"employment-type","chapter":"3 Concept Primer","heading":"3.9.23 employment type","text":"Zonal employment estimates VisionEval made retail, service, total employment categories. delineation retail service employment typically two-digit sectors North American Industrial Classification System (NAICS). NAICS system widely used governmental reporting systems.","code":""},{"path":"conceptprimer.html","id":"ev-surcharge","chapter":"3 Concept Primer","heading":"3.9.24 EV surcharge","text":"states impose tax electric vehicles beyond sales tax vehicle registration fees make shortfall gasoline sales tax revenue might otherwise contribute towards costs roadway infrastructure. methods rates vary considerably, EV owners paying sales tax EV surcharges owners conventional autos. EV surcharge can accounted CalculateVehicleOperatingCosts module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"freeway-lane-miles","chapter":"3 Concept Primer","heading":"3.9.25 freeway lane-miles","text":"sum number lanes multiplied length freeway segment within metropolitan area (Marea). lane-miles arterials calculated separated (see roadway lane-miles. created AssignRoadMiles module VETransportSupply package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"freight-vehicle-groups","chapter":"3 Concept Primer","heading":"3.9.26 freight vehicle groups","text":"see vehicle groups","code":""},{"path":"conceptprimer.html","id":"fuel-efficiency","chapter":"3 Concept Primer","heading":"3.9.27 fuel efficiency","text":"VisionEval simulate driving cycles uses measures relative fuel efficiency derived USEPA’s Physical Emission Rate Estimator (PERE) different vehicle powertrains congested conditions. user-supplied values congestion_efficiency.csv define congestion performance powertrain relative best (1.0) worst (0.0) values. data used LoadDefaultValues module VEPowertrainsAndFuels package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"fuel-speed-curves","chapter":"3 Concept Primer","heading":"3.9.28 fuel-speed curves","text":"set exogenously calculated adjustments average fuel economy vehicles function vehicle type (light-duty heavy-duty), powertrain, roadway type. curves derivation described Bigazzi & Clifton (2011).","code":""},{"path":"conceptprimer.html","id":"growth-basis","chapter":"3 Concept Primer","heading":"3.9.29 growth basis","text":"growth commercial heavy truck travel time increase rate population , firms establishments explicitly modeled VisionEval. Future year daily VMT calculated function population income heavy trucks population, income, household daily VMT commercial service.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"heavy-truck","chapter":"3 Concept Primer","heading":"3.9.30 heavy truck","text":"single class heavy trucks used represent commercial vehicles larger light duty trucks included commercial service vehicles. vehicle operating emissions parameters specified vehicle groups defined heavy trucks, impacts calculated several VisionEval packages.","code":""},{"path":"conceptprimer.html","id":"individualized-marketing-programs-individualized-marketing-programs-imp","chapter":"3 Concept Primer","heading":"3.9.31 individualized marketing programs {#individualized-marketing-programs} (IMP)","text":"Education public outreach efforts designed encourage voluntary travel behavior changes. Rather using broad messages entire population approaches targets specific groups travelers information relevant .\nconcise fact sheet describes implementation Oregon. Dill & Mohr (2010) investigate long-term effectiveness programs.IMP policies used Travel Demand Management inputs. complementary employee based programs.VE-RSPM, assumes minimum population density 4,000 persons per square mile necessary implement successful IM program requirement household reside urban mixed-use district. number households identified participating minimum number needed meet program goal number qualifying households. source: ODOT","code":""},{"path":"conceptprimer.html","id":"intelligent-transportation-systems","chapter":"3 Concept Primer","heading":"3.9.32 intelligent transportation systems (ITS)","text":"Systems integrate information, communications, advanced vehicular technologies transportation infrastructure, maintenance, operations programs improve mobility safety. programs typically centrally controlled transportation agencies rather individually autonomous solutions like personal navigation systems. Examples systems include traveler information systems (e.g., 511 systems, variable message signs), adaptive traffic signal systems, ramp metering, electronic toll collection.","code":""},{"path":"conceptprimer.html","id":"its","chapter":"3 Concept Primer","heading":"3.9.33 ITS","text":"see [intelligent transportation systems](#intelligent-transportation-systems}","code":""},{"path":"conceptprimer.html","id":"lambda-parameter","chapter":"3 Concept Primer","heading":"3.9.34 lambda parameter","text":"assumed split light-duty household commercial service vehicles freeways arterials calculated dynamically ratio respective average travel speeds urbanized area specific factor (lambda). latter adjusts raw ratio speeds match observed percentages using data 90 urbanized areas. calculation carried CalculateRoadPerformance module.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"licensure-rate","chapter":"3 Concept Primer","heading":"3.9.35 licensure rate","text":"percent adults aged 17 possess drivers license, summarized PUMS data modeled region.","code":""},{"path":"conceptprimer.html","id":"lifecycle","chapter":"3 Concept Primer","heading":"3.9.36 lifecycle","text":"label used describe stage life household’s members . guessed VisionEval function number adults, children, workers household. assigned AssignLifeCycle module. assumes one 10 values defined 2009 NHTS LIF_CYC variable\nAdditional details","code":""},{"path":"conceptprimer.html","id":"location-type","chapter":"3 Concept Primer","heading":"3.9.37 location type","text":"household classified whether enclosing Bzone located urban, town, rural area. location_type variable defined Bzone.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"metropolitan-area","chapter":"3 Concept Primer","heading":"3.9.38 metropolitan area (Marea)","text":"VisionEval metropolitan area (Marea) collection Azones define unique urbanized area shared characteristics freeway lane-miles transit revenue-miles. cases transit service area might define metropolitan area rather political boundaries.\nAdditional details VisionEval model geography levels.","code":""},{"path":"conceptprimer.html","id":"mixed-use","chapter":"3 Concept Primer","heading":"3.9.39 mixed use","text":"see urban mixed-use","code":""},{"path":"conceptprimer.html","id":"national-household-travel-survey","chapter":"3 Concept Primer","heading":"3.9.40 National Household Travel Survey (NHTS)","text":"NHTS collects household traveler information travel diaries random sample U.S. households. 2017 survey collected data 26,000 households selected nationwide additional 103,112 additional “add-” samples purchased nine states four regional metropolitan planning agencies. information collected comparable data collected bespoke household travel surveys. latest year NHTS data available 2017, seven prior surveys dating 1969 conducted . Publicly available data available reduced geographic detail (.e., households coded state place size ranges) 2017 prior years. VisionEval developed using public use NHTS data 2001, Multimodal Travel package developed using confidential 2009 NHTS data.","code":""},{"path":"conceptprimer.html","id":"nhts","chapter":"3 Concept Primer","heading":"3.9.41 NHTS","text":"see National Household Travel Survey","code":""},{"path":"conceptprimer.html","id":"non-institutional-group-quarters","chapter":"3 Concept Primer","heading":"3.9.42 Non-institutional group quarters","text":"Persons living non-institutional group dwellings (e.g., college dormitories, halfway houses). Persons living institutional group dwellings included VisionEval, include hospital patients, prison inmates, military barracks.","code":""},{"path":"conceptprimer.html","id":"out-of-pocket-cost","chapter":"3 Concept Primer","heading":"3.9.43 out-of-pocket cost","text":"variable costs automobile usage considered --pocket costs. often considered perceived cost using automobiles. VisionEval include cost fuel parking cost using CarService. --pockets subset auto operating costs.","code":""},{"path":"conceptprimer.html","id":"parking-costs","chapter":"3 Concept Primer","heading":"3.9.44 parking costs","text":"Parking costs VisionEval trip-based costs, commonly paid one ends trip, sometimes paid monthly basis. standard practice handling parking pricing urban travel demand models include trip costs auto travel. Two types parking costs addressed model - parking costs places employment parking costs places. Daily parking costs calculated household added variable costs. includes fees parking workplace (including cash-policies) non-work trips. Parking fees subset parking restrictions. Parking fees can paid residential, workplace, destinations.","code":""},{"path":"conceptprimer.html","id":"parking-restrictions","chapter":"3 Concept Primer","heading":"3.9.45 parking restrictions","text":"Parking restrictions fees affect households places residence work, well places travel within modeled area. information coded Bzone level typically includes average number free parking spaces dwelling unit type (single family, multi-family, group quarters), average daily parking cost, proportion workers pay parking participate cash -buy back program. Parking restrictions used Azones members defined metropolitan area (Marea) within model.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"pay-as-you-drive","chapter":"3 Concept Primer","heading":"3.9.46 pay-as-you-drive (PAYD)","text":"insurance program, also known usage-based insurance, whose premiums based actual usage insured vehicle well well drive. viewed emerging standard insurance. Using PAYD assumption VisionEval enables analyst precisely calculate auto ownership cost based household daily VMT estimates. proportion households using PAYD included calculations carried CalculateVehicleOwnCost module.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"passenger-car-equivalents","chapter":"3 Concept Primer","heading":"3.9.47 passenger car equivalents (PCE)","text":"factor indicates number light-duty vehicles heavy truck equivalent terms vehicle length lane usage calculating roadway capacity. used BalanceRoadCostsAndRevenues module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"powertrain","chapter":"3 Concept Primer","heading":"3.9.48 powertrain","text":"VisionEval uses detailed operating emissions characteristics several different types vehicular powertrains, enabling scenarios quickly assembled different assumptions mix future years. Four powertrain types presently defined VisionEval: internal combustion engines (ICE), hybrid electric vehicles (HEV), plug-hybrid electric vehicles (PHEV), battery electric vehicles (BEV). powertrain assigned household vehicle AssignHhVehiclePowertrain module.","code":""},{"path":"conceptprimer.html","id":"regular-households","chapter":"3 Concept Primer","heading":"3.9.49 regular households","text":"Related unrelated persons living dwelling unit, including persons living non-institutional group quarters","code":""},{"path":"conceptprimer.html","id":"region","chapter":"3 Concept Primer","heading":"3.9.50 region","text":"region defines entire modeled area represented model. limit size modeled region, although sub-state areas, states, andmegaregions often simulated using VisionEval.\nAdditional details VisionEval model geography levels.","code":""},{"path":"conceptprimer.html","id":"relative-roadway-supply","chapter":"3 Concept Primer","heading":"3.9.51 relative roadway supply","text":"synthetic measure divides total arterial freeway lane-miles (.e., sum length miles times number lanes distinct roadway segment) sum estimated trip lengths households. calculation carried Marea year. Thus, measure applies metropolitan areas defined model. value calculated AssignRoadMiles module used several modules.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"road-class","chapter":"3 Concept Primer","heading":"3.9.52 road class","text":"proportion lane miles classified freeway, arterial, roadways. vehicle miles travel (VMT) calculated households, commercial service, heavy trucks split three classes roadways LoadDefaultRoadDvmtValues module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"road-costs","chapter":"3 Concept Primer","heading":"3.9.53 road costs","text":"includes costs roadway expansion, modernization projects, preservation, operations, maintenance administration. VisionEval calculates average mileage tax household vehicles needed make differences cost constructing, maintaining, operating roadways revenues fuel taxes pricing schemes (e.g., VMT taxes, congestion taxes). latter calculated based assumptions fuel consumption (function total daily VMT) fuel efficiency. VisionEval adds auto operating costs households important note costs might passed governments future years assumed VisionEval. road costs revenues reconciled BalanceRoadCostsAndRevenue module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"road-lane-miles","chapter":"3 Concept Primer","heading":"3.9.54 road lane-miles","text":"sum number lanes multiplied length arterial roadway segment within metropolitan area (Marea). lane-miles freeways calculated separated (see freeway lane-miles. created AssignRoadMiles module VETransportSupply package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"road-use-taxes","chapter":"3 Concept Primer","heading":"3.9.55 road use taxes","text":"see road costs","code":""},{"path":"conceptprimer.html","id":"short-trip-sov-diversion","chapter":"3 Concept Primer","heading":"3.9.56 short-trip SOV diversion","text":"DivertSovTravel module reduces travel single-occupant vehicles (SOVs) account assumed availability solo travel alternatives bicycles (traditional electric) scooters. user inputs goal diverting proportion SOV travel within 20-mile round-trip distance (.e., trips longer 10 miles one direction).\nAdditional details","code":""},{"path":"conceptprimer.html","id":"social-costs","chapter":"3 Concept Primer","heading":"3.9.57 Social Costs","text":"Present future generations bear costs due impact transportation fully recouped auto operating costs auto ownership costs, costs abating pollution, security safety costs, noise. VisionEval includes costs full-cost accounting approach calculating costs benefits. social cost parameters defined inputs CalculateVehicleOperatingCost module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"speed-smoothing","chapter":"3 Concept Primer","heading":"3.9.58 Speed Smoothing","text":"traffic management action design reduces speed variation freeways arterials. Note introduction autonomous vehicles likely achieve effect even constitute quarter vehicles roadway (Levin & Boyles 2015, Mahmassani 2016). Thus, speed smoothing might become important property future traffic systems analysts include future years even spite current local interest programs.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"transit-d","chapter":"3 Concept Primer","heading":"3.9.59 Transit d (D4C)","text":"Multimodal Module introduces additional sensitivity variables, including Transit Frequency Bzone level. input bzone_transit_service.csv accounts Smart Location Database D4c: Aggregate frequency transit service within 0.25 miles CBG boundary per hour evening peak period.” Smart Location Database (2021) User Guide, page 5","code":""},{"path":"conceptprimer.html","id":"transit-modes","chapter":"3 Concept Primer","heading":"3.9.60 Transit Modes","text":"VisionEval includes eight transit modes, also called transit service modes places documentation. eight modes include demand-responsive (DR), vanpool similar (VP), standard motor bus (MB), bus rapid transit commuter bus (RB), monorail automated guideway (MG), streetcar trolley bus (SR), light heavy rail (HR), commuter rail (CR) services. latter includes specialized CR services hybrid rail, cable cars, aerial tramways.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"transit-service-levels","chapter":"3 Concept Primer","heading":"3.9.61 transit service level","text":"User-supplied annual revenue miles service eight transit modes translated bus-equivalents, revenue miles, ultimately, vehicle miles. transit service levels set AssignTransitService module VETransportSupply package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"transit-service-miles","chapter":"3 Concept Primer","heading":"3.9.62 transit service miles","text":"Bus-equivalent-miles used compute transit service levels summed calculate transit miles transit mode. calculations carried AssignTransitService module VETransportSupply package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"transit-vehicle-type","chapter":"3 Concept Primer","heading":"3.9.63 transit vehicle type","text":"Different energy consumption emissions characteristics defined vans, buses, rail transit modes.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"travel-demand-management","chapter":"3 Concept Primer","heading":"3.9.64 travel demand management (TDM)","text":"Policies programs used discourage travel single-occupant vehicles order achieve safer efficient multimodal transportation systems. TDM encompasses wide variety initiatives, include promotion active transport, public transportation modes, car bike sharing, telecommuting. Adjustments household VMT due TDM actions coded BudgetHouseholdDvmt module VETravelPerformance package.\nAdditional detailsThe two components workplace (employee based) home based (individualized marketing programs).","code":""},{"path":"conceptprimer.html","id":"urban-mixed-use","chapter":"3 Concept Primer","heading":"3.9.65 urban mixed-use","text":"mixed use development neighborhood one includes residential non-residential land uses close proximity one another, allowing pedestrian access many desired goods services. places walkable,“bikeable,” encourage local economy strong social connections. transportation perspective places distinguished high degree accessibility using non-motorized modes (active transport).\nVisionEval proportion Bzone falls category can either specified user calculated program. latter random sampling asserted distribution used define whether household mixed-use area. density enclosing Bzone weights probability household classified (.e., higher density higher probability assigned mixed-use neighborhood). calculations carried CalculateUrbanMixMeasure module VEHouseholds package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"urbanized-area-urbanized-area","chapter":"3 Concept Primer","heading":"3.9.66 urbanized area {urbanized-area}","text":"Collectively urban, “metro”, location type portion metropolitan area (Marea) set zones. road, transit urban mixed use variables cover portion Marea, typically equivalent Census urbanized area.","code":""},{"path":"conceptprimer.html","id":"value-of-time","chapter":"3 Concept Primer","heading":"3.9.67 value of time (VOT)","text":"opportunity cost time person spends traveling rather engaged activities. theory represents traveler willing pay order reduce time traveling. surrogate value travel times savings, attempts place monetary value benefits efficient travel. often important parameter along equally influential value reliability pricing studies (Kockelman et al. 2013, Parsons Brinckerhoff et al. 2013) VOT average value VisionEval. used TimeCost calculations CalculateVehicleOperatingCost module.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"vehicle-age","chapter":"3 Concept Primer","heading":"3.9.68 vehicle age","text":"age household vehicle estimated function vehicle type (auto light truck), household income, assumed average vehicle age coded vehicle type Azone. vehicle age assigned AssignVehicleAge module VEHouseholdVehicles package.\nAdditional detailsvehicle group {#vehicle-group}\nDifferent types vehicles used VisionEval different types users. Automobiles light trucks used households, car service, commercial service, assigned VEHouseholdVehicles package. Heavy trucks treated separately, three types vehicles – vans, buses, rail – used transit.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"vehicle-hours-of-delay","chapter":"3 Concept Primer","heading":"3.9.69 vehicle hours of delay (VHD)","text":"aggregate performance measure usually calculated subtracting vehicle hours travel uncontested conditions total vehicle hours travel (VHT). measures approximated metropolitan area VisionEval CalculateRoadPerformance module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"vehicle-operating-costs","chapter":"3 Concept Primer","heading":"3.9.70 vehicle operating costs","text":"combination --pocket travel time costs used estimate cost per mile owning operating automobile. costs include fuel (energy), maintenance, tires, repairs households. addition, pollution carbon taxes, parking charges, pay---drive (PAYD) insurance costs included coded household’s enclosed Bzone. costs calculated CalculateHhVehicleOperatingCosts module VETravelPerformance package.\nAdditional details","code":""},{"path":"conceptprimer.html","id":"vehicle-ownership-costs","chapter":"3 Concept Primer","heading":"3.9.71 vehicle ownership costs","text":"average cost auto ownership calculated based upon vehicle type (automobile, light truck) age using typical cost figures AAA data. cost per mile estimated dividing average cost household daily VMT estimates produced model. depreciation model used adjust cost based upon vehicle type, age, annual miles driven (daily VMT converted annual miles). ownership costs represent full costs ownership, include maintenance, tires, depreciation, fuel, insurance, etc.Auto ownership adjusted per-mile cost owning car higher car service (mobility services) latter high availability. adjustment made AdjustVehicleOwnership module.\nAdditional details auto ownership auto ownership adjustments","code":""},{"path":"conceptprimer.html","id":"vehicle-table","chapter":"3 Concept Primer","heading":"3.9.72 vehicle table","text":"vehicle table list every vehicle owned household VisionEval. includes vehicle characteristics, household ID, Azone Marea household allocated . created CreateVehicleTable module VEHouseholdVehicles package.\nAdditional detailsvehicle type {#vehicle-type}\nVisionEval vehicle type refers distinction automobiles light trucks used light duty vehicle groups: households, car service, commercial service vehicles.","code":""},{"path":"tutorial.html","id":"tutorial","chapter":"4 VisionEval Tutorial","heading":"4 VisionEval Tutorial","text":"VisionEval Tutorial provides introductory walkthrough set VisionEval model\nspecific area interest. chapter cover install run VisionEval,\ninstructions covered Getting Started chapter. users\ncompletely new VisionEval, reviewing Concept Primer chapter overview\nVisionEval modeling system highly recommended starting tutorial materials.VisionEval tutorial breaks process setting model several steps. step\ndescribed ’s chapter, referenced , can also accessed main\nnavigation menu.Picking Model chapter start overview three VisionEval models, VERSPM, VE-State, VERPAT, information make selection based model differences user needs.Model Geography Years chapter first step applying selected VisionEval model making key decision spatial scale years.Developing Inputs chapter detailed information specific inputs VisionEval model well generalized best practices data sources methods.Validating Troubleshooting chapter relevant users complete set inputs need debug validate base model.Developing Scenarios chapter contains details use VisionEval set multi-scenario runs exploratory scenario planning.Estimation VisionEval chapter reviews advanced customization techniques users, including model estimation integrated VisionEval modeling system replace model’s default estimation local data.","code":""},{"path":"picking-a-model.html","id":"picking-a-model","chapter":"5 Picking a Model","heading":"5 Picking a Model","text":"VisionEval system comprised three models:VERSPM (VisionEval Regional Strategic Planning Model) developed Oregon Department Transportation (ODOT) offshoot GreenSTEP model support preparation metropolitan area scenario plans. name reflects broadening policies, beyond state statutory requirements. model operates largely zonal level (.e. inputs outputs zone-based).VE-State state level version VERSPM. Like VERSPM, model operates zonal level, zones larger VERSPM counterparts.VERPAT (VisionEval Rapid Policy Analysis Tool) developed federal Strategic Highway Research Program (SHRP2). model developed help planners evaluate potential effect growth policies regional travel. Portions GreenSTEP model used VERPAT, substantial revisions made code, including use land use place type categories. model operates largely region place type level entire region.","code":""},{"path":"picking-a-model.html","id":"spatial-detail","chapter":"5 Picking a Model","heading":"5.1 Spatial Detail","text":"One key distinction VisionEval models level spatial detail. general,\nVisionEval models greater level spatial detail also require effort developing\nmodel inputs. picking model, users consider needs context \ntrade-spatial detail development effort.VERSPM developed regional model regional planning areas MPOs. VERSPM models region zones (manner similar traditional travel model zones), results improved spatial resolution outputs, also increases data development burden. selection right tool therefore depends number factors – available data, project resources, desired spatial output detail, etc. Take look VERSPM inputs, many inputs Bzones.VE-State developed extension VERSPM model enables users apply model statewide applications. main difference VERSPM VE-State models number VERSPM inputs specified Bzone level. Examples include numbers dwelling units type numbers jobs sector. VE-State models run higher level abstraction VERSPM models don’t Bzone level inputs. Instead, VE-State uses process synthesize Bzones.VERPAT, like VERSPM, operates primarily region level. However, VERPAT less spatial detail VERSPM requires inputs place type level. shown , place types defined combination area type development type. Area type (regional role) describes interdependencies neighborhood compared rest region, e.g. centered jobs region. Development type (neighborhood character) used describe physical characteristics neighborhood isolation. Operating place type level simplifies input data requirements spatial precision outputs still capturing effects different place types region. Take look model inputs, one input Bzone (.e., population employment) represents population employment place type.","code":""},{"path":"model-geography-and-years.html","id":"model-geography-and-years","chapter":"6 Model Geography and Years","heading":"6 Model Geography and Years","text":"VisionEval model selected, next step deciding model geography \nyears. model geography years inform input data needed.","code":""},{"path":"model-geography-and-years.html","id":"years","chapter":"6 Model Geography and Years","heading":"6.1 Years","text":"Inputs VisionEval developed every model year. applications consist base year\nfuture year. model area travel demand model available, good practice \nalign VisionEval model years travel demand model, allowing user use \ntravel demand model develop VisionEval inputs validate VisionEval Model. VisionEval may\nused model interim years, however year modeled requires additional input data.","code":""},{"path":"model-geography-and-years.html","id":"geography","chapter":"6 Model Geography and Years","heading":"6.2 Geography","text":"VisionEval models share standard geography framework. Although models applied different\nscales, sharing common geographic definitions enables modules readily shared \nmodels. standard geogrpahy framework specifies levels geographical units, names, \nrelative sizes, hierarchical relationships . flexible allows\ngeographical boundaries determined user allows units geographical\nlevels simulated rather tied actual physical locations. Allowing simulation \none geographic levels enables modules shared models operate different\nscales. example statewide model metropolitan area model use module \nassigning households land development types even though statewide model lacks fine scale\ngeography metropolitan model.Following definition geographic structure VisionEval model system:Region level entire model area. Large-scale characteristics vary across region specified region level. example, carbon intensities vehicle fuels defined region level since tend vary widely across large geographic area. Typically, VERSPM model region level metropolitan planning region modeled, VE-State ’s entire state.Azones large subdivisions region level. Azones used represent demographic economic characteristics vary across region population forecasts persons age group average per capita income. County boundaries commonly used represent Azones VE-State. VERSPM, county municipal boundaries commonly used. Azone level geography must represent actual geographic areas may simulated.Bzones subdivisions Azones. Bzones nested within Azones provide granularity intensity nature development. Bzones may correspond actual geographic areas may simulated. Bzone simulation greatly reduces model input data requirements still enabling modeling land-use-related policies effects land use various aspects travel behavior. VERSPM, Bzones must represented actual geographic areas; examples VERSPM Bzone inputs include housing population density. Common Bzone boundaries VERSPM TAZs, Census Tracts, Census Block Groups. VE-State VERPAT, Bzones simulated represent physical geographic boundaries. Bzones VE-State synthesized represent characteristics likely found actual set Bzones within Azone, neighborhood density. VERPAT, Bzones simulated place types characterize intensity nature development.Mareas represent metropolitan urbanized areas. Mareas represented VisionEval collections Azones associated urbanized area either portion urbanized area located Azone substantial proportion workers residing Azone work jobs located urbanized area. Metropolitan models (VERSPM VERPAT) typically one assigned Marea whereas state models may several. model system requires Azone may associated one Marea. also required Azones associated Marea. special Marea named ‘None’ used apply Azones associated urbanized area. Mareas used specify model urbanized area transportation characteristics overall transportation supply (transit, highways) congestion. also used specify large scale land-use-related characteristics policies models use Bzone synthesis.Location Type geography level categorical level identifies whether households urban/town/rural.Place Type geography level defines level urbanization (area type) mixing jobs housing (development type).","code":""},{"path":"model-geography-and-years.html","id":"setting-up-the-model-geography","chapter":"6 Model Geography and Years","heading":"6.2.1 Setting Up the Model Geography","text":"Users note selected model geography determine geography levels input\ndata development. Geographical relationships model described “geo.csv” file\ncontained “defs” directory. file tabulates names geographic unit (except \nregion) relationships . row shows unique relationship. unit \ngeography explicitly defined (.e. simulated), “NA” values placed \ntable.examples show versions “geo.csv” file Azones specified \nAzones Bzones specified. noted naming conventions \nindividual zones. user free choose conventions use.Example geo.csv file specifies AzonesExample geo.csv file specifies Azones Bzones","code":""},{"path":"model-geography-and-years.html","id":"model-geography-example","chapter":"6 Model Geography and Years","heading":"6.2.1.1 Model Geography Example","text":"section details model geography ODOT’s VE-State model example. geography levels defined follows:Azones must physical boundaries represented counties.Mareas represented boundaries Metropolitan Planning Organizations (MPOs), can multi-county. Azones, counties, without MPO Marea None.Location Type (Urbanized, Town, Rural) defined MPOs urbanized (defined model Metro), urban growth boundaries (UGBs) smaller MPOs Town, rest Rural.Marea Area Types (Center, Inner, Outer, Fringe) (VE-State ) based VE-State EPA-SLD-based definition. ODOT builds TAZ-level place type maps MPOs generate.ODOT VE-State geo.csvUsers can also Mareas equivalent Census urbanized area definition. Mareas include Town location types within Marea counties. , “towns” Marea counties typically fall outside continuous urbanized area (.e. Census urbanized area). county Town Rural location types Marea None. exceptions may made outside areas contiguous enough official urbanized area horizon modeled scenarios, use common (high frequency) transit systems, share road/congestion. examples Eugene VERSPM model including city Coburg “urbanized” rather “town” Portland including Ridgefield urbanized area. recommendation can summarized designating Marea city outside census “Urbanized area” definition “towns” unless: (1) contiguous larger urbanized area, planning horizon, (2) significant transit service, road congestion “town” formulas account .","code":""},{"path":"model-inputs.html","id":"model-inputs","chapter":"7 Model Inputs","heading":"7 Model Inputs","text":"VisionEval model installed, directory sample data available within model directory (e.g., ../models/VERSPM/ .. refers parent directory unzipped installer file). See VisionEval walkthrough files instructions installng sample models.model directory serves dual purposes providing sample data template local modification locations.default VERSPM VERPAT directories contain sample input files Rogue Valley region Oregon, default VE-State directory contains sample input files State Oregon. inputs modified replaced investigate impacts policy changes model different region.","code":""},{"path":"model-inputs.html","id":"model-structure","chapter":"7 Model Inputs","heading":"7.1 Standard Model Structure","text":"VisionEval models standard structure, can customized. typical structure described .visioneval.cnf model directory defines model’s structure. introducted Model Configuration.defs directory contains three model definition files introduced Set-Inputs section.inputs directory contains number CSV JSON files provide inputs modules. module specifies input files needs. majority input files CSV formatted text files. names file identify geography level input data. example, azone_hh_pop_by_age.csv input household population age, data Azone level. input file :Field names identifying dataset namesYear field inputs vary model yearGeo field inputs vary geographyField names can also modifiers, year money values denominated (e.g. 2010) magnitude multiplier large numbers (e.g. 1e3). Input specifications, can located source code module well module documentation, can referenced users unsure input data type, units, prohibited values. formatting input files, users pay attention following:Need values every combination year geographyField names must exactly match specificationsValues must match specification data type contain prohibited valuesNo data years model run yearsNo data areas defined geo.csv fileThe rest section contain generalized best practices input development applicable VisionEval models go details inputs model.","code":""},{"path":"model-inputs.html","id":"visioneval-cnf","chapter":"7 Model Inputs","heading":"7.2 Model Configuration (visioneval.cnf)","text":"file contains parameters define key attributes model computational stages scenarios. file can YAML format (typical) JSON (backward compatibility - replaces run_parameters.json older versions VisionEval). Certain elements visioneval.cnf need modified user specify model base year run years. detailed description file currently available (appear soon). typical contents visioneval.cnf follows:See separate scenarios section (construction) learn set scenarios efficiently within models.standard setup, model results generated folder called results, model stages generate outputs sub-folder results named stage.model directory structure look like following, though results directory won’t exist run model:","code":"# Model-wide description\nModel          : VE-State 3.0\nRegion         : Oregon                     # Change to your local area\nState          : OR                         # Change to your local area\nBaseYear       : 2010                       # Change to your model's base year\nScript         : run_model.R\n\n# Model Stages and Scenarios\nModelStages:\n  base-year-2010:                           # Change base year stage name\n    Years : [2010]                          # Change 2010 to your model's base year\n    Description : Oregon Base Year 2010     # Change to correct description\n  future-year-2040:\n    StartFrom : base-year-2010              # Change to be consistent with base year stage name\n    Years : [2040]                          # Change 2040 to your model's future year\n    Description : Oregon Future Year 2040   # Change to correct descriptionVE-State-years # or whatever your model is called in the `models` folder\n-- defs\n   -- deflators.csv\n   -- geo.csv\n   -- units.csv\n-- inputs\n   ... all the `.csv` files plus `model_parameters.json` used in the model\n-- results\n   -- base-year-2010\n      -- Datastore\n         -- ... (Subfolders and files with the model outputs)\n      -- Log_<run_date>....txt (model run notices, including warnings and errors)\n      -- ModelState.Rda\n   -- future-year-2040\n      -- Datastore (folder)\n      -- Log_<run_date>....txt\n      -- ModelState.Rda\n-- scripts\n   -- run_model.R\n-- visioneval.cnf"},{"path":"model-inputs.html","id":"run_model_script","chapter":"7 Model Inputs","heading":"7.3 Model Script","text":"scripts folder contains one model scripts describing sequence VisionEval modules model run genereate outputs. Typically, one script called run_model.R name can changed visioneval.cnf.standard run_model.R script VERSPM model. Generally, script won’t changed except debugging purposes. One reason change script might use locally customized package different name (e.g. VEMyPowertrainsAndFuels versus VEPowertrainsAndFuels).","code":"for(Year in getYears()) {\n  runModule(\"CreateHouseholds\",                \"VESimHouseholds\",       RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"PredictWorkers\",                  \"VESimHouseholds\",       RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignLifeCycle\",                 \"VESimHouseholds\",       RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"PredictIncome\",                   \"VESimHouseholds\",       RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"PredictHousing\",                  \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"LocateEmployment\",                \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignLocTypes\",                  \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"Calculate4DMeasures\",             \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateUrbanMixMeasure\",        \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignParkingRestrictions\",       \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignDemandManagement\",          \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignCarSvcAvailability\",        \"VELandUse\",             RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignTransitService\",            \"VETransportSupply\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignRoadMiles\",                 \"VETransportSupply\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignDrivers\",                   \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignVehicleOwnership\",          \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignVehicleType\",               \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CreateVehicleTable\",              \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignVehicleAge\",                \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateVehicleOwnCost\",         \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AdjustVehicleOwnership\",          \"VEHouseholdVehicles\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateHouseholdDvmt\",          \"VEHouseholdTravel\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateAltModeTrips\",           \"VEHouseholdTravel\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateVehicleTrips\",           \"VEHouseholdTravel\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"DivertSovTravel\",                 \"VEHouseholdTravel\",     RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculateCarbonIntensity\",        \"VEPowertrainsAndFuels\", RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"AssignHhVehiclePowertrain\",       \"VEPowertrainsAndFuels\", RunFor = \"AllYears\",    RunYear = Year)\n  for (i in 1:2) {\n    runModule(\"CalculateRoadDvmt\",             \"VETravelPerformance\",   RunFor = \"AllYear\",    RunYear = Year)\n    runModule(\"CalculateRoadPerformance\",      \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n    runModule(\"CalculateMpgMpkwhAdjustments\",  \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n    runModule(\"AdjustHhVehicleMpgMpkwh\",       \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n    runModule(\"CalculateVehicleOperatingCost\", \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n    runModule(\"BudgetHouseholdDvmt\",           \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n    runModule(\"BalanceRoadCostsAndRevenues\",   \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n  }\n  runModule(\"CalculateComEnergyAndEmissions\",   \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n  runModule(\"CalculatePtranEnergyAndEmissions\", \"VETravelPerformance\",   RunFor = \"AllYears\",    RunYear = Year)\n}"},{"path":"model-inputs.html","id":"defs","chapter":"7 Model Inputs","heading":"7.4 Set-up Inputs","text":"set-inputs defs directory. geo.csv file need set represent model geography. deflators.csv may need adjusted ensure years prior model base year present. units.csv typically need adjusted.deflators.csvgeo.csvunits.csv","code":""},{"path":"model-inputs.html","id":"deflators.csv","chapter":"7 Model Inputs","heading":"7.4.1 deflators.csv","text":"file defines annual deflator values, consumer price index, used convert currency values different years currency denomination. file need modified unless years dollar values used input dataset contained file. format file follows:","code":""},{"path":"model-inputs.html","id":"geo.csv","chapter":"7 Model Inputs","heading":"7.4.2 geo.csv","text":"file describes geographic relationships model names geographic entities CSV formatted text file. Azone, Bzone, Marea names remain consistent input data. information developing file VisionEval model geographic relationships can found . format file follows:","code":""},{"path":"model-inputs.html","id":"units.csv","chapter":"7 Model Inputs","heading":"7.4.3 units.csv","text":"file describes default units used storing complex data types model. file modified user. VisionEval model system keeps track types units measure data processed. details file structure can found . format file follows:","code":""},{"path":"model-inputs.html","id":"inputs-by-concept","chapter":"7 Model Inputs","heading":"7.5 Inputs by Concept","text":"section covers generalized inputs concepts shared VisionEval models. Best practices inputs concepts also discussed. learn specific inputs used model skip ahead following sections:VERSPM inputsVE-State inputsVERPAT inputs","code":""},{"path":"model-inputs.html","id":"household-synthesis-inputs","chapter":"7 Model Inputs","heading":"7.5.1 Household Synthesis Inputs","text":"demographic land use inputs related population, employment, income result household synthesis. VisionEval takes user input statewide population age group, assembles households demographic attributes (lifecycle category, per capita income).Pool available households. Modelwide, Census PUMS data represents actual households representative mix household composition demographics area built code. Note users must rebuild VESimHousehold package use local PUMS data Oregon data default, see chapter Estimation VisionEval instructions rebuild packages.Pool available households. Modelwide, Census PUMS data represents actual households representative mix household composition demographics area built code. Note users must rebuild VESimHousehold package use local PUMS data Oregon data default, see chapter Estimation VisionEval instructions rebuild packages.Population age control totals. population inputs, VisionEval models distinguish regular household population group quarter population due distinct differences travel behaviors. Zone-level inputs (1) regular households (2) group quarters households (can 0) include population age group average per capita income. Base year totals household population can obtained Census. Future year forecasts consistent may need extrapolated beyond adopted regional plans (e.g., RTP, County City TSPs). local governments may detailed age information generated part Housing Needs Analysis completed Periodic Review local Comprehensive Plan. , future population age can apply ratios base year model set-. Group quarters population data best obtained university administration, age possible. Group quarters can approximated enrollment data class year. group quarters data (e.g., income) difficult obtain paramount importance model, simplifying assumptions often required. Per capita income can obtained either Census Bureau Economic Analysis. Since model accounts inflation, future income can remain future years, adjusted based local plans.Population age control totals. population inputs, VisionEval models distinguish regular household population group quarter population due distinct differences travel behaviors. Zone-level inputs (1) regular households (2) group quarters households (can 0) include population age group average per capita income. Base year totals household population can obtained Census. Future year forecasts consistent may need extrapolated beyond adopted regional plans (e.g., RTP, County City TSPs). local governments may detailed age information generated part Housing Needs Analysis completed Periodic Review local Comprehensive Plan. , future population age can apply ratios base year model set-. Group quarters population data best obtained university administration, age possible. Group quarters can approximated enrollment data class year. group quarters data (e.g., income) difficult obtain paramount importance model, simplifying assumptions often required. Per capita income can obtained either Census Bureau Economic Analysis. Since model accounts inflation, future income can remain future years, adjusted based local plans.Optional household adjustments. (Optional) constraints regular households include average household size proportion single-person households, adjustments licensure rate driving age persons. Household size values can obtained Census licensure data can obtained state DMV.Optional household adjustments. (Optional) constraints regular households include average household size proportion single-person households, adjustments licensure rate driving age persons. Household size values can obtained Census licensure data can obtained state DMV.Employment. VERSPM employment inputs require employment type model year Bzone. VE-State requires workers location type (Optional) constraints aggregated employment rate working age persons Azone.Employment. VERSPM employment inputs require employment type model year Bzone. VE-State requires workers location type (Optional) constraints aggregated employment rate working age persons Azone.","code":""},{"path":"model-inputs.html","id":"land-use-inputs","chapter":"7 Model Inputs","heading":"7.5.2 Land Use Inputs","text":"households synthesised, VisionEval allocates Bzone-level dwelling units inputs. Separately Bzones attributed employment land use attributes (location type, built form ‘D’ values, mixed use, employment type). Household members identified workers /drivers number household vehicles estimated. home work location tied specific Bzone associated attributes. Additionally, local policies land use based.Dwelling units. Numbers dwelling units type model year proportions development type. Income quartiles tied households dwelling units help VisionEval assign households compatible Bzone location. base year dwelling unit data can sourced either Census available travel demand model. Future year dwelling units can obtained local Comprehensive Plans. Adjustments may needed count occupied units, occupancy rates can obtained Census block group data, starting point. Base future year dwelling unit counts consistent household assumptions region’s travel demand model.Dwelling units. Numbers dwelling units type model year proportions development type. Income quartiles tied households dwelling units help VisionEval assign households compatible Bzone location. base year dwelling unit data can sourced either Census available travel demand model. Future year dwelling units can obtained local Comprehensive Plans. Adjustments may needed count occupied units, occupancy rates can obtained Census block group data, starting point. Base future year dwelling unit counts consistent household assumptions region’s travel demand model.Land use. Inputs set total developable land area, development type. VERSPM also requires location (centroid latitude-longitude) spatially linking source data, input assumptions built form measures. inputs can change model run year. land use data use EPA Smart Location Database (SLD) data. Geospatial SLD data can downloaded block group level extrapolated geographies needed using just used EPA block group data.Land use. Inputs set total developable land area, development type. VERSPM also requires location (centroid latitude-longitude) spatially linking source data, input assumptions built form measures. inputs can change model run year. land use data use EPA Smart Location Database (SLD) data. Geospatial SLD data can downloaded block group level extrapolated geographies needed using just used EPA block group data.Land use-household linkages. VisionEval assigns Bzone household’s home household worker’s work location, associated Bzone attributes. VisionEval-calculated urban mixed use designation Bzone can optionally modified input targets proportion households assigned designation Bzone process.\nNote: Input files must consistent. includes: (1) land area must specified azone location type households employment assigned ; (2) dwelling units must reasonable match population (divided household size); (3) shares jobs within Azone must sum 1 Azones Marea.\nLand use-household linkages. VisionEval assigns Bzone household’s home household worker’s work location, associated Bzone attributes. VisionEval-calculated urban mixed use designation Bzone can optionally modified input targets proportion households assigned designation Bzone process.Note: Input files must consistent. includes: (1) land area must specified azone location type households employment assigned ; (2) dwelling units must reasonable match population (divided household size); (3) shares jobs within Azone must sum 1 Azones Marea.","code":""},{"path":"model-inputs.html","id":"defining-location-type-metro-town-rural","chapter":"7 Model Inputs","heading":"7.5.2.1 Defining “Location Type” (metro, town, rural)","text":"One method define land MPO boundaries metro, urban areas smaller MPOs, land inside UGB town. Everything else rural. Note want refine within MPO, place types can identify low density areas might consider “rural” areas less accessible/isolated (don’t access broader transit service) “town”. states official population forecasts done urban area helps population inputs. Users can also use LEHD used boundaries identified designate location types, used LEHD calculate worker flows county home location--work LocType (county).alternative method use Census Urban Rural Classification. Census Urban Rural Classification distinguishes two types urban areas:Urbanized Areas (UAs) 50,000 people defined metroUrban Clusters (UCs) least 2,500 less 50,000 people defined townEverything else rural**NOTE: 2020 Census removed Urban Cluster specification.","code":""},{"path":"model-inputs.html","id":"defining-area-type-center-inner-outer-fringe","chapter":"7 Model Inputs","heading":"7.5.2.2 Defining “Area Type” (center, inner, outer, fringe)","text":"“Area Type” based mix activity density levels destination accessibility levels, discussed documentation discussing VE-State EAP-SLD-based Bzone synthesis.ODOT develops place types using data local travel demand models, specifically TAZs within MPOs (Mareas). Area type VisionEval inputs generated using population employment data TAZ using calculations. using local travel model TAZ data base future population employment, users can create future version variables thus VE-State area type inputs calculate cover different areas time:Activity Density = TAZ-level (population [households qroup quarter units] + employment / 2.5) / unprotected acres [parks water removed). SLD variable D1B roughly .Destination Accessibility = TAZ-level shown . ’s equivalent SLD attribute, D5 attributes similar.\n(D5) Harmonic mean employment within 2 miles population within 5 miles (2 * TotEmp_InDist2mi * Pop_InDist5mi) / (TotEmp_InDist2mi + Pop_InDist5mi).\nLevels: VL = 0 - 2e3, L = 2e3 - 1e4, M = 1e4 - 5e4, H = 5e4+.\n(D5) Harmonic mean employment within 2 miles population within 5 miles (2 * TotEmp_InDist2mi * Pop_InDist5mi) / (TotEmp_InDist2mi + Pop_InDist5mi).Levels: VL = 0 - 2e3, L = 2e3 - 1e4, M = 1e4 - 5e4, H = 5e4+.Design = SLD variable D3bpo4","code":""},{"path":"model-inputs.html","id":"travel-behavior-inputs","chapter":"7 Model Inputs","heading":"7.5.3 Household Travel Behavior Inputs","text":"Many inputs relating household multi-modal travel also can serve policy levers tested multi-run scenario exercises. Users work stakeholders refine values finalize reference scenario inputs reflect financially constrained adopted plans area. discussions local staff also start define /less ambitious scenarios include multi-run scenario modeling.Transport supply (Mareas ) Unlike traditional travel demand models, VisionEval roadway network. inputs transportation supply define roadway capacity terms lane miles arterials freeways transit service miles (annual revenue service miles) transit service mode) urbanized area portion Marea model run year. separate Bzone-level input sets neighborhood transit accessibility Transit D. lane-miles model area, HPMS standard source. Users can use use lane-length values lane-mile inputs, aggregating follows:\nFwys = “Interstate”& “Freeways & Expressways”\nArterials = “Principal Arterial” & “Minor Arterial”\nMajor/Minor collectors local streets included\nTransport supply (Mareas ) Unlike traditional travel demand models, VisionEval roadway network. inputs transportation supply define roadway capacity terms lane miles arterials freeways transit service miles (annual revenue service miles) transit service mode) urbanized area portion Marea model run year. separate Bzone-level input sets neighborhood transit accessibility Transit D. lane-miles model area, HPMS standard source. Users can use use lane-length values lane-mile inputs, aggregating follows:Fwys = “Interstate”& “Freeways & Expressways”Arterials = “Principal Arterial” & “Minor Arterial”Major/Minor collectors local streets includedPersonal short trips/alternative modes. VisionEval inputs define policies transit, bike walk modes. include transit service levels transit accessibility (Transit D) per transit supply . Biking trips defined proportion short-trip SOV diversion (20 miles less round-trip). Walk walk trips dependent upon mixed-use development built form design measures.Personal short trips/alternative modes. VisionEval inputs define policies transit, bike walk modes. include transit service levels transit accessibility (Transit D) per transit supply . Biking trips defined proportion short-trip SOV diversion (20 miles less round-trip). Walk walk trips dependent upon mixed-use development built form design measures.Travel demand management (TDM). household assigned participant number travel demand management programs (e.g. employee commute options program, individualized marketing) based policy assumptions degree deployment programs household characteristics. Individual households also identified candidate participants car sharing programs based household characteristics input assumptions market penetration car sharing vehicles.\nWorkplace TDM Programs. Level deployment assumptions TDM (work home locations) lead reduced VMT, diverting travel modes. Car Sharing reduces VMT changes auto ownership per mile costs. Employee commute options (ECO) programs work-based travel demand management programs. may include transportation coordinators, employer-subsidized transit passes, bicycle parking, showers bicycle commuters, education promotion, carpool vanpool programs, etc. default assumption ECO programs reduce average commute DVMT participating households 5.4%. Users can modify value requires rebuilding VELandUse package VERSPM VESimLandUse VE-State. assumed work travel household reduced percentage working age persons identified ECO participants. proportion employees participating ECO programs policy input Bzone-level VERSPM either Azone Marea level VE-State. input assumes workers participate strong employee commute options programs (e.g., free transit pass, emergency ride home, bike rider facilities, etc.).\nIndividualized Marketing TDM Programs. Individualized marketing (IM) programs travel demand management programs focused individual households select neighborhoods. IM programs involve individualized outreach households identify residents’ travel needs ways meet needs less vehicle travel. Customized neighborhood, IM programs work best locations number travel options available. VisionEval assumes households participating IM program reduce DVMT 9% based studies done Portland area. Users can modify value requires rebuilding VELandUse package VESimLandUse VE-State. IM programs target work well non-work travel produce larger reductions ECO work-based programs. IM reduction used households identified participating ECO IM programs. VisionEval input IM programs include overall assumption percentage households participating IM program. minimum population density 4,000 persons per square mile necessary implement successful IM program requirement household reside urban mixed use Bzone. number households identified participating minimum number needed meet program goal number qualifying households.\nTravel demand management (TDM). household assigned participant number travel demand management programs (e.g. employee commute options program, individualized marketing) based policy assumptions degree deployment programs household characteristics. Individual households also identified candidate participants car sharing programs based household characteristics input assumptions market penetration car sharing vehicles.Workplace TDM Programs. Level deployment assumptions TDM (work home locations) lead reduced VMT, diverting travel modes. Car Sharing reduces VMT changes auto ownership per mile costs. Employee commute options (ECO) programs work-based travel demand management programs. may include transportation coordinators, employer-subsidized transit passes, bicycle parking, showers bicycle commuters, education promotion, carpool vanpool programs, etc. default assumption ECO programs reduce average commute DVMT participating households 5.4%. Users can modify value requires rebuilding VELandUse package VERSPM VESimLandUse VE-State. assumed work travel household reduced percentage working age persons identified ECO participants. proportion employees participating ECO programs policy input Bzone-level VERSPM either Azone Marea level VE-State. input assumes workers participate strong employee commute options programs (e.g., free transit pass, emergency ride home, bike rider facilities, etc.).Individualized Marketing TDM Programs. Individualized marketing (IM) programs travel demand management programs focused individual households select neighborhoods. IM programs involve individualized outreach households identify residents’ travel needs ways meet needs less vehicle travel. Customized neighborhood, IM programs work best locations number travel options available. VisionEval assumes households participating IM program reduce DVMT 9% based studies done Portland area. Users can modify value requires rebuilding VELandUse package VESimLandUse VE-State. IM programs target work well non-work travel produce larger reductions ECO work-based programs. IM reduction used households identified participating ECO IM programs. VisionEval input IM programs include overall assumption percentage households participating IM program. minimum population density 4,000 persons per square mile necessary implement successful IM program requirement household reside urban mixed use Bzone. number households identified participating minimum number needed meet program goal number qualifying households.Parking. Parking VisionEval defined parking supply parking restrictions, including parking costs.Parking. Parking VisionEval defined parking supply parking restrictions, including parking costs.","code":""},{"path":"model-inputs.html","id":"model_parameters.json","chapter":"7 Model Inputs","heading":"7.5.4 model_parameters.json","text":"input file contains global parameters particular model configuration may used multiple modules. detailed description file structure can found . source default \\(16/hr 2010\\) derived Nov 2014 Oregon DOT Report: “Value Travel-Time: Estimates Hourly Value Time Vehicles Oregon”. Note input looks dollars year base model.format file follows:","code":"[\n  {\"NAME\": \"ValueOfTime\", \n   \"VALUE\": \"16\", \n   \"TYPE\": \"double\", \n   \"UNITS\": \"base cost year dollars per hour\"\n  }\n]"},{"path":"model-inputs.html","id":"vehicle-inputs","chapter":"7 Model Inputs","heading":"7.5.5 Vehicle, Fuels and Emissions Inputs","text":"Vehicle fuel technology expected change significantly next several decades vehicles turn-newer fleets purchased. characteristics fleet new cars trucks influenced federal CAFÉ standards well state energy policies promotions. Local areas can contribute decisions light-duty fleet used local transit agencies assisting deployment electric vehicle charging stations costs work home locations, otherwise less influence characteristics future vehicle fleet, including auto, light truck, heavy truck vehicles. consequence, VisionEval inputs vehicle fuel technology largely specified modelwide region level. inputs can used assess impacts changing vehicle powertrains fuels energy use GHG emissions model area. key local contribution inputs bus powertrain fuels inputs, defined metropolitan area (Marea) although defaults can used additional local data available. variables briefly summarized .Powertrains. Several input files specify vehicle attributes fuel economy autos, light trucks, heavy truck, transit vehicles. User inputs modify vehicle powetrains commercial service vehicles, car service vehicles, transit vehicles, heavy trucks. Changing powertrain mix household vehicles involves rebuilding VEPowertrainsAndFuels package. Four vehicle powertrain types modeled:\nICE - Internal Combustion Engines electrical assist;\nHEV - Hybrid-Electric Vehicles motive power generated -board;\nPHEV - Plug-Hybrid Electric Vehicles motive power comes charging -board battery external power supplies;\nEV - Electric Vehicles motive power comes charging -board battery external power supplies.\nPowertrains. Several input files specify vehicle attributes fuel economy autos, light trucks, heavy truck, transit vehicles. User inputs modify vehicle powetrains commercial service vehicles, car service vehicles, transit vehicles, heavy trucks. Changing powertrain mix household vehicles involves rebuilding VEPowertrainsAndFuels package. Four vehicle powertrain types modeled:ICE - Internal Combustion Engines electrical assist;HEV - Hybrid-Electric Vehicles motive power generated -board;PHEV - Plug-Hybrid Electric Vehicles motive power comes charging -board battery external power supplies;EV - Electric Vehicles motive power comes charging -board battery external power supplies.Household owned vehicles. Household vehicle characteristics defined Azone model run year account regional trends. Characteristics include passanger fleet share vehicle type (light truck auto) average vehicle age. purpose inputs allow scenarios developed test faster slower turn-vehicle fleet test fleets mixes terms passenger autos light trucks SUVs, impact fuel economy. Users also define availability residential electric vehicle charging stations Azone level dwelling unit type model run year. Vehicle type age characteristics combine powertrain sales year defined VEPowertrainsAndFuels package. powertrain year associated fuel efficiency power efficiency assumptions PHEVs (MPG PHEVs charge-sustaining mode). EVs PHEVs, battery range specified. Note actual EV-HEV split depends whether enough households 95Th percentile daily travel within EV battery rangeHousehold owned vehicles. Household vehicle characteristics defined Azone model run year account regional trends. Characteristics include passanger fleet share vehicle type (light truck auto) average vehicle age. purpose inputs allow scenarios developed test faster slower turn-vehicle fleet test fleets mixes terms passenger autos light trucks SUVs, impact fuel economy. Users also define availability residential electric vehicle charging stations Azone level dwelling unit type model run year. Vehicle type age characteristics combine powertrain sales year defined VEPowertrainsAndFuels package. powertrain year associated fuel efficiency power efficiency assumptions PHEVs (MPG PHEVs charge-sustaining mode). EVs PHEVs, battery range specified. Note actual EV-HEV split depends whether enough households 95Th percentile daily travel within EV battery rangeCar service vehicles. Car services specific mode used VisionEval models treated vehicles available household. Car services can considered synonym popular ride-sharing services provided mobility---service (MaaS) companies. VisionEval distinguishes two levels car service, categorized “high” “low” level service. high car service level one vehicle access times (time walk car origin final destination) competitive private car use. High level car service considered increase household car availability similar owning car. Users can define car service substitution probability vehicle type. Low level car service, approximates current taxi service competitive access time considered increasing household car availability. Users can define different attributes level car service. Users can define several characteristcs car service level, including cost per mile car service level, average age car service vehicles, limits household car service substitution probability owned vehicles. Region-level inputs powertrain mix model (sales) year (optional) region-wide composite fuel carbon intensity.Car service vehicles. Car services specific mode used VisionEval models treated vehicles available household. Car services can considered synonym popular ride-sharing services provided mobility---service (MaaS) companies. VisionEval distinguishes two levels car service, categorized “high” “low” level service. high car service level one vehicle access times (time walk car origin final destination) competitive private car use. High level car service considered increase household car availability similar owning car. Users can define car service substitution probability vehicle type. Low level car service, approximates current taxi service competitive access time considered increasing household car availability. Users can define different attributes level car service. Users can define several characteristcs car service level, including cost per mile car service level, average age car service vehicles, limits household car service substitution probability owned vehicles. Region-level inputs powertrain mix model (sales) year (optional) region-wide composite fuel carbon intensity.See section Pricing, Household Costs & Budgets inputs information car service levels, geographic coverage, fees. See Vehicles, Fuels & Emissions inputs section information defining car service fleet powertrain characteristics.Transit. Transit vehicles characteristics defined Marea model run year transit vehicle type(van, bus, rail), including powertrain mix model (sales) year optional detail fuel-biofuel shares. Users can also optionally define region-wide composite fuel carbon intensity transit vehicle types.Transit. Transit vehicles characteristics defined Marea model run year transit vehicle type(van, bus, rail), including powertrain mix model (sales) year optional detail fuel-biofuel shares. Users can also optionally define region-wide composite fuel carbon intensity transit vehicle types.Freight vehicles (heavy trucks commercial service). Commercial service vehicle vehicle characteristics defined Azone model run year, including vehicle type shares average vehicle age. (optional) Region-wide composite fuel carbon intensity vehicle type. Heavy truck vehicle characteristics region-level, including powertrain mix composite fuel carbon intensity model (sales) year.Freight vehicles (heavy trucks commercial service). Commercial service vehicle vehicle characteristics defined Azone model run year, including vehicle type shares average vehicle age. (optional) Region-wide composite fuel carbon intensity vehicle type. Heavy truck vehicle characteristics region-level, including powertrain mix composite fuel carbon intensity model (sales) year.Electric carbon intensity. Since electricity generation varies locality, users can define electricity carbon intensity Azone-level. impacts GHG emission rates (average pounds CO2 equivalents generated per kilowatt hour electricity consumed end user) local area.Electric carbon intensity. Since electricity generation varies locality, users can define electricity carbon intensity Azone-level. impacts GHG emission rates (average pounds CO2 equivalents generated per kilowatt hour electricity consumed end user) local area.Fuel input options. Three options available fuel assumptions. choices outlined table options described . User choice option can vary vehicle group applicable, vehicle type:Fuel input options. Three options available fuel assumptions. choices outlined table options described . User choice option can vary vehicle group applicable, vehicle type:Default package datasets. may represent federal statewide fuel policies apply metropolitan areas vehicle groups model (e.g., state ethanol regulations, low carbon fuel policies). NAs placed user input files.Detailed fuel biofuel inputs. Values proportions fuels types (gasoline, diesel, compressed natural gas), well fuel blend proportions (gasoline blended ethanol, biodiesel blended diesel, renewable natural gas blended natural gas). third assumption specifies carbon_intenaity fuels (input default). example, heavy trucks can set 95% diesel, 5% natural gas, diesel 5% biodiesel blend.Composite carbon intensity. option simplifies process modeling emissions policies, particularly low carbon fuels policies bypasses need specify fuel types biofuel blends. Average carbon intensity vehicle group applicable, vehicle type specified directly. inputs, present ‘NA’, supercede transit inputs.Note: Given transit agencies different metropolitan areas may substantially different approaches using biofuels, transit vehicles option region metropolitan area specifications Options (1) (2).Note: proportions option (2) represent volumetric proportions (e.g. gallons), represent energy proportions (e.g. gasoline gallon equivalents) DVMT proportions.Note: Individual vehicles modeled households. groups vehicle fuel attributes apply VMT. result, PHEVs household vehicles split miles driven HEVs miles EVs.","code":""},{"path":"model-inputs.html","id":"pricing-inputs","chapter":"7 Model Inputs","heading":"7.5.6 Pricing, Household Costs & Budget Inputs","text":"state-led actions thus reflect state policies modeled area.Per mile vehicle --pocket costs. Several inputs define per mile costs used calculating household vehicle operating costs may limited household’s income-based maximum annual travel budget. inputs include defining energy costs, car service fees, fees recover road social costs, noted .Per mile vehicle --pocket costs. Several inputs define per mile costs used calculating household vehicle operating costs may limited household’s income-based maximum annual travel budget. inputs include defining energy costs, car service fees, fees recover road social costs, noted .Energy costs. Unit cost energy power household vehicles, fuel (cost per gallon) electricity (cost per kilowatt-hour).Energy costs. Unit cost energy power household vehicles, fuel (cost per gallon) electricity (cost per kilowatt-hour).Car service fees. car service used household, per mile fees paid service, outside energy costs. Car service characteristics cost per mile [car service level Azone model run year.Car service fees. car service used household, per mile fees paid service, outside energy costs. Car service characteristics cost per mile [car service level Azone model run year.Road cost recovery VMT fee. Inputs include fuel tax levying fuel-equivalent tax travel /electric vehicles (PevSurchgTaxProp), use roads lieu gas purchases. User can also directly specify VMT (mileage) fee, recover road costs, optionally flag VisionEval iteratively estimate VMT fee fully recover user-defined road costs incurred household VMT.Road cost recovery VMT fee. Inputs include fuel tax levying fuel-equivalent tax travel /electric vehicles (PevSurchgTaxProp), use roads lieu gas purchases. User can also directly specify VMT (mileage) fee, recover road costs, optionally flag VisionEval iteratively estimate VMT fee fully recover user-defined road costs incurred household VMT.Social cost recovery/carbon fees. (Optional) Inputs allow per mile fee cover social costs externalities, recovered way today, instead incur costs elsewhere economy (e.g., safety, health). cost imposed society future generations, cost vehicle user. requires assumptions cost incurred externalities (per mile, per gallon) proportion paid drivers per mile fee (varies vehicle powertrain). proportion carbon costs (e.g., impact fuel price cap & trade policy) imposed drivers specified separately social costs, can assessed desired; including (optionally) specifying cost carbon -ride default value carbon. two specific inputs: Carbon costs dollars per metric ton CO2e social externalities. Carbon Costs default data can overridden using optional input file region_co2e_costs.csv. Note: Carbon Costs specified 2005\\(. Social Externality costs specified VETravelPerformance package External Data files. values 2010\\). Click additional detailed explanation way costs used model. See PDF externality research.Social cost recovery/carbon fees. (Optional) Inputs allow per mile fee cover social costs externalities, recovered way today, instead incur costs elsewhere economy (e.g., safety, health). cost imposed society future generations, cost vehicle user. requires assumptions cost incurred externalities (per mile, per gallon) proportion paid drivers per mile fee (varies vehicle powertrain). proportion carbon costs (e.g., impact fuel price cap & trade policy) imposed drivers specified separately social costs, can assessed desired; including (optionally) specifying cost carbon -ride default value carbon. two specific inputs: Carbon costs dollars per metric ton CO2e social externalities. Carbon Costs default data can overridden using optional input file region_co2e_costs.csv. Note: Carbon Costs specified 2005\\(. Social Externality costs specified VETravelPerformance package External Data files. values 2010\\). Click additional detailed explanation way costs used model. See PDF externality research.Per mile time-equivalent costs. Users can define value time, included vehicle operating costs calculations. model calculates travel time (model-calculated), includes time access vehicle ends trip (vehicle parking location origin end destination), multiplied value time.Per mile time-equivalent costs. Users can define value time, included vehicle operating costs calculations. model calculates travel time (model-calculated), includes time access vehicle ends trip (vehicle parking location origin end destination), multiplied value time.Annual vehicle ownership costs. Vehicle ownership cost inputs defined Azone-level year. inputs include annual vehicle fees (flat fee /tax vehicle value), pay---drive (PAYD) insurance participation rates, residential parking limitations fees, combined model-estimated ownership costs (financing, depreciation, insurance).Annual vehicle ownership costs. Vehicle ownership cost inputs defined Azone-level year. inputs include annual vehicle fees (flat fee /tax vehicle value), pay---drive (PAYD) insurance participation rates, residential parking limitations fees, combined model-estimated ownership costs (financing, depreciation, insurance).Congestion Fees. Congestion fees defined Marea. input average amount paid per mile congestion pricing fee. congestion fees specified congestion bands model Arterial Congestion Fees Freeway Congestion Fees.Congestion Fees. Congestion fees defined Marea. input average amount paid per mile congestion pricing fee. congestion fees specified congestion bands model Arterial Congestion Fees Freeway Congestion Fees.","code":""},{"path":"model-inputs.html","id":"congestion-inputs","chapter":"7 Model Inputs","heading":"7.5.7 Congestion Inputs","text":"Base year VMT. Users provide can provide base year VMT (light-duty vehicles heavy trucks) use model default using state/UzaLookup. Users also select growth basis heavy trucks either population income commercial service VMT (population, income, household VMT). Users also provide DVMT split light-duty vehicles, heavy trucks, buses urban roads road class. Values UzaNameLookup must present list provided module documentation, otherwise user inputs must specify data directly.Base year VMT. Users provide can provide base year VMT (light-duty vehicles heavy trucks) use model default using state/UzaLookup. Users also select growth basis heavy trucks either population income commercial service VMT (population, income, household VMT). Users also provide DVMT split light-duty vehicles, heavy trucks, buses urban roads road class. Values UzaNameLookup must present list provided module documentation, otherwise user inputs must specify data directly.-Operational Policies. Users define proportion VMT road class affected standard -Operation policies freeways arterials. Another optional input can define additional operations effects, providing flexibility future user-defined freeway arterial operations program coverage effectiveness. programs reduce delay. specific programs available model following:\nFreeway ramp metering - Metering freeways can reduce delay keeping mainline vehicle density unstable levels. creates delay vehicles entering freeway, typically offset higher speeds postponed congestion freeway facility. Urban Mobility Report cites delay reduction 0 12%, average 3%, 25 U.S. urban areas ramp metering. urban areas Heavy, Severe, Extreme freeway congestion can benefit ramp metering RSPM\nFreeway incident management - Incident Response programs designed quickly detect remove incidents impede traffic flow. UMR study reports incident-related freeway delay reductions 0 40%, average 8%, 79 U.S. urban areas incident response programs. reflects combined effects service patrols address incidents surveillance cameras detect incidents. Effects seen sizes urban area, though impacts greater larger cities.\nArterial access management – Access management arterials can increase speeds reducing number enter/exit points arterial reduce crashes reducing conflict points. Although improvements raised medians can reduce throughput causing turning queue spillback heavy congestion, types access management, reduced business ingress/egress points, show consistent benefits system-wide.\nArterial signal coordination – Traffic signal coordination, particularly adaptive traffic signals, can reduce arterial delay increasing throughput peak flow directions. UMR analysis estimates delay reductions 6-9% due signal coordination, potential savings sophisticated control systems. average arterial delay savings found 1%.\nops programs – separate input gives users ability accommodate future enhancements. research significant program investment needed justify benefits enhanced programs.\n-Operational Policies. Users define proportion VMT road class affected standard -Operation policies freeways arterials. Another optional input can define additional operations effects, providing flexibility future user-defined freeway arterial operations program coverage effectiveness. programs reduce delay. specific programs available model following:Freeway ramp metering - Metering freeways can reduce delay keeping mainline vehicle density unstable levels. creates delay vehicles entering freeway, typically offset higher speeds postponed congestion freeway facility. Urban Mobility Report cites delay reduction 0 12%, average 3%, 25 U.S. urban areas ramp metering. urban areas Heavy, Severe, Extreme freeway congestion can benefit ramp metering RSPMFreeway incident management - Incident Response programs designed quickly detect remove incidents impede traffic flow. UMR study reports incident-related freeway delay reductions 0 40%, average 8%, 79 U.S. urban areas incident response programs. reflects combined effects service patrols address incidents surveillance cameras detect incidents. Effects seen sizes urban area, though impacts greater larger cities.Arterial access management – Access management arterials can increase speeds reducing number enter/exit points arterial reduce crashes reducing conflict points. Although improvements raised medians can reduce throughput causing turning queue spillback heavy congestion, types access management, reduced business ingress/egress points, show consistent benefits system-wide.Arterial signal coordination – Traffic signal coordination, particularly adaptive traffic signals, can reduce arterial delay increasing throughput peak flow directions. UMR analysis estimates delay reductions 6-9% due signal coordination, potential savings sophisticated control systems. average arterial delay savings found 1%.ops programs – separate input gives users ability accommodate future enhancements. research significant program investment needed justify benefits enhanced programs.Speed smoothing programs. Proportion VMT road class covered speed smoothing, Eco-drive programs. programs reduce vehicle accelerations decelerations, affect delay.\nSpeed smoothing programs - Insufficient aggregate performance data available number current future /operations strategies. include: speed limit reductions, speed enforcement, variable speed limits reduce amount high-speed freeway travel; advanced signal optimization techniques reduce stops starts arterials; truck/bus-lanes can move high-emitting vehicles congested areas improved efficiency. Literature review fuel efficiency improvements found speed smoothing policies reasonably achieve portion theoretical maximum 50%, ratio applied user input full deployment (input 1=100%).\nEco-drive programs Eco-driving involves educating motorists drive order reduce fuel consumption cut emissions. Examples eco-driving practices include avoiding rapid starts stops, matching driving speeds synchronized traffic signals, avoiding idling. Practicing eco-driving also involves keeping vehicles maintained way reduces fuel consumption keeping tires properly inflated reducing aerodynamic drag. RSPM, fuel economy benefits improved vehicle maintenance included eco-driving benefit. default 19% improvement vehicle fuel economy assumed. Vehicle operations maintenance programs (e.g. eco-driving) based policy assumptions degree deployment programs household characteristics. Vehicle operating programs (eco-driving) reduces emissions per VMT max 33% freeways 21% arterials full deployment (input 1=100%).\nSpeed smoothing programs. Proportion VMT road class covered speed smoothing, Eco-drive programs. programs reduce vehicle accelerations decelerations, affect delay.Speed smoothing programs - Insufficient aggregate performance data available number current future /operations strategies. include: speed limit reductions, speed enforcement, variable speed limits reduce amount high-speed freeway travel; advanced signal optimization techniques reduce stops starts arterials; truck/bus-lanes can move high-emitting vehicles congested areas improved efficiency. Literature review fuel efficiency improvements found speed smoothing policies reasonably achieve portion theoretical maximum 50%, ratio applied user input full deployment (input 1=100%).Eco-drive programs Eco-driving involves educating motorists drive order reduce fuel consumption cut emissions. Examples eco-driving practices include avoiding rapid starts stops, matching driving speeds synchronized traffic signals, avoiding idling. Practicing eco-driving also involves keeping vehicles maintained way reduces fuel consumption keeping tires properly inflated reducing aerodynamic drag. RSPM, fuel economy benefits improved vehicle maintenance included eco-driving benefit. default 19% improvement vehicle fuel economy assumed. Vehicle operations maintenance programs (e.g. eco-driving) based policy assumptions degree deployment programs household characteristics. Vehicle operating programs (eco-driving) reduces emissions per VMT max 33% freeways 21% arterials full deployment (input 1=100%).","code":""},{"path":"model-inputs.html","id":"verspm-inputs","chapter":"7 Model Inputs","heading":"7.6 VERSPM Input Files","text":"section details specific VERSPM input files.azone_carsvc_characteristics.csv: file specifies different characteristics high low car service level used CreateVehicleTable AssignVehicleAge modules.azone_carsvc_characteristics.csv: file specifies different characteristics high low car service level used CreateVehicleTable AssignVehicleAge modules.azone_charging_availability.csv file data proportion different household types EV charging available used AssignHHVehiclePowertrain module.azone_charging_availability.csv file data proportion different household types EV charging available used AssignHHVehiclePowertrain module.azone_electricity_carbon_intensity.csv (optional) file used specify carbon intensity electricity needed user wants modify values). file used Initialize (VEPowertrainsAndFuels) CalculateCarbonIntensity modules.azone_electricity_carbon_intensity.csv (optional) file used specify carbon intensity electricity needed user wants modify values). file used Initialize (VEPowertrainsAndFuels) CalculateCarbonIntensity modules.azone_fuel_power_cost.csv file supplies data retail cost fuel electricity used CalculateVehicleOperatingCost module.azone_fuel_power_cost.csv file supplies data retail cost fuel electricity used CalculateVehicleOperatingCost module.azone_gq_pop_by_age.csv: file contains group quarters population estimates/forecasts age used CreateHouseholds module.azone_gq_pop_by_age.csv: file contains group quarters population estimates/forecasts age used CreateHouseholds module.azone_hh_pop_by_age.csv file contains population estimates/forecasts age used CreateHouseholds module.azone_hh_pop_by_age.csv file contains population estimates/forecasts age used CreateHouseholds module.azone_hh_veh_mean_age.csv file provides inputs mean auto age mean light truck age used AssignVehicleAge module.azone_hh_veh_mean_age.csv file provides inputs mean auto age mean light truck age used AssignVehicleAge module.azone_hh_veh_own_taxes.csv file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes). file used CalculateVehicleOwnCost module.azone_hh_veh_own_taxes.csv file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes). file used CalculateVehicleOwnCost module.azone_hhsize_targets.csv: file contains household specific targets used CreateHouseholds module.azone_hhsize_targets.csv: file contains household specific targets used CreateHouseholds module.azone_lttrk_prop.csv file specifies light truck proportion vehicle fleet used AssignVehicleType module.azone_lttrk_prop.csv file specifies light truck proportion vehicle fleet used AssignVehicleType module.azone_payd_insurance_prop.csv file provides inputs proportion households PAYD (pay---drive) insurance used CalculateVehicleOwnCost module.azone_payd_insurance_prop.csv file provides inputs proportion households PAYD (pay---drive) insurance used CalculateVehicleOwnCost module.azone_per_cap_inc.csv file contains information regional average per capita household group quarters income year 2010 dollars used PredictIncome module.azone_per_cap_inc.csv file contains information regional average per capita household group quarters income year 2010 dollars used PredictIncome module.azone_prop_sov_dvmt_diverted.csv file provides inputs goal diverting portion SOV travel within 20-mile tour distance used DivertSovTravel module.azone_prop_sov_dvmt_diverted.csv file provides inputs goal diverting portion SOV travel within 20-mile tour distance used DivertSovTravel module.azone_relative_employment.csv: file contains ratio workers persons age used PredictWorkers module.azone_relative_employment.csv: file contains ratio workers persons age used PredictWorkers module.azone_veh_use_taxes.csv file supplies data vehicle related taxes used CalculateVehicleOperatingCost module.azone_veh_use_taxes.csv file supplies data vehicle related taxes used CalculateVehicleOperatingCost module.azone_vehicle_access_times.csv file supplies data vehicle access egress time used CalculateVehicleOperatingCost module.azone_vehicle_access_times.csv file supplies data vehicle access egress time used CalculateVehicleOperatingCost module.bzone_transit_service.csv file supplies data relative public transit accessibility used AssignTransitService module.bzone_transit_service.csv file supplies data relative public transit accessibility used AssignTransitService module.bzone_carsvc_availability.csv file contains information level car service availability used AssignCarSvcAvailability module.bzone_carsvc_availability.csv file contains information level car service availability used AssignCarSvcAvailability module.bzone_dwelling_units.csv: file contains number single-family, multi-family group-quarter dwelling units used PredictHousing module.bzone_dwelling_units.csv: file contains number single-family, multi-family group-quarter dwelling units used PredictHousing module.bzone_employment.csv: file contains total, retail service employment zone used LocateEmployment module.bzone_employment.csv: file contains total, retail service employment zone used LocateEmployment module.bzone_hh_inc_qrtl_prop.csv file contains proportion households 1st, 2nd, 3rd, 4th quartile household income used PredictHousing module.bzone_hh_inc_qrtl_prop.csv file contains proportion households 1st, 2nd, 3rd, 4th quartile household income used PredictHousing module.bzone_lat_lon.csv file contains latitude longitude centroid zone used LocateEmployment module.bzone_lat_lon.csv file contains latitude longitude centroid zone used LocateEmployment module.bzone_network_design.csv file contains intersection density terms pedestrian-oriented intersections four legs per square mile used Calculate4DMeasures module.bzone_network_design.csv file contains intersection density terms pedestrian-oriented intersections four legs per square mile used Calculate4DMeasures module.bzone_parking.csv file contains parking information used AssignParkingRestrictions module.bzone_parking.csv file contains parking information used AssignParkingRestrictions module.bzone_travel_demand_mgt.csv file contains information workers households participating demand management programs used AssignDemandManagement module.bzone_travel_demand_mgt.csv file contains information workers households participating demand management programs used AssignDemandManagement module.bzone_unprotected_area.csv file contains information unprotected (.e., developable) area within zone used Calculate4DMeasures module.bzone_unprotected_area.csv file contains information unprotected (.e., developable) area within zone used Calculate4DMeasures module.bzone_urban-mixed-use_prop.csv file contains target proportion households located mixed-used neighborhoods zone used CalculateUrbanMixMeasure module.bzone_urban-mixed-use_prop.csv file contains target proportion households located mixed-used neighborhoods zone used CalculateUrbanMixMeasure module.bzone_urban-town_du_proportions.csv file contains proportion Single-Family, Multi-Family Group Quarter dwelling units within urban portion zone used AssignLocTypes module.bzone_urban-town_du_proportions.csv file contains proportion Single-Family, Multi-Family Group Quarter dwelling units within urban portion zone used AssignLocTypes module.marea_base_year_dvmt.csv (optional) file used specify adjust DVMT growth factors needed user wants modify values. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.marea_base_year_dvmt.csv (optional) file used specify adjust DVMT growth factors needed user wants modify values. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.marea_congestion_charges.csv (optional) file used specify charges vehicle travel different congestion levels. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_congestion_charges.csv (optional) file used specify charges vehicle travel different congestion levels. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_dvmt_split_by_road_class.csv (optional) file used specify DVMT split different road classes. file used Initialize (VETravelPerformance) CalculateBaseRoadDvmt modules.marea_dvmt_split_by_road_class.csv (optional) file used specify DVMT split different road classes. file used Initialize (VETravelPerformance) CalculateBaseRoadDvmt modules.marea_lane_miles.csv file contains inputs numbers freeway lane-miles arterial lane-miles used AssignRoadMiles module.marea_lane_miles.csv file contains inputs numbers freeway lane-miles arterial lane-miles used AssignRoadMiles module.marea_operations_deployment.csv (optional) file used specify proportion DVMT affected operations different road classes. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_operations_deployment.csv (optional) file used specify proportion DVMT affected operations different road classes. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_speed_smooth_ecodrive.csv input file supplies information deployment speed smoothing ecodriving road class vehicle type used CalculateMpgMpkwhAdjustments module.marea_speed_smooth_ecodrive.csv input file supplies information deployment speed smoothing ecodriving road class vehicle type used CalculateMpgMpkwhAdjustments module.marea_transit_ave_fuel_carbon_intensity.csv (optional) file used specify average carbon intensity fuel used transit. file used Initialize (VETravelPerformance) module.marea_transit_ave_fuel_carbon_intensity.csv (optional) file used specify average carbon intensity fuel used transit. file used Initialize (VETravelPerformance) module.marea_transit_biofuel_mix.csv (optional) file used specify biofuel used transit. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_biofuel_mix.csv (optional) file used specify biofuel used transit. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_fuel.csv (optional) file used specify transit fuel proportions. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_fuel.csv (optional) file used specify transit fuel proportions. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_powertrain_prop.csv (optional) file used specify mixes transit vehicle powertrains. file used Initialize (VETravelPerformance) CalculatePtranEnergyAndEmissions modules.marea_transit_powertrain_prop.csv (optional) file used specify mixes transit vehicle powertrains. file used Initialize (VETravelPerformance) CalculatePtranEnergyAndEmissions modules.marea_transit_service.csv file contains annual revenue-miles different transit modes metropolitan area used AssignTransitService module.marea_transit_service.csv file contains annual revenue-miles different transit modes metropolitan area used AssignTransitService module.other_ops_effectiveness.csv (optional) file used specify delay effects operations different road classes needed user wants modify values. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.other_ops_effectiveness.csv (optional) file used specify delay effects operations different road classes needed user wants modify values. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.region_ave_fuel_carbon_intensity.csv (optional) file used specify average carbon density different vehicle types optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.region_ave_fuel_carbon_intensity.csv (optional) file used specify average carbon density different vehicle types optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.region_base_year_hvytrk_dvmt.csv (optional) file used specify heavy truck dvmt base year. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.region_base_year_hvytrk_dvmt.csv (optional) file used specify heavy truck dvmt base year. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.region_carsvc_powertrain_prop.csv (optional) file used specify powertrain proportion car services. file used Initialize (VETravelPerformance), AssignHhVehiclePowertrain AdjustHhVehicleMpgMpkwh modules.region_carsvc_powertrain_prop.csv (optional) file used specify powertrain proportion car services. file used Initialize (VETravelPerformance), AssignHhVehiclePowertrain AdjustHhVehicleMpgMpkwh modules.region_comsvc_lttrk_prop.csv file supplies data light truck proportion commercial vehicles used CalculateComEnergyAndEmissions module.region_comsvc_lttrk_prop.csv file supplies data light truck proportion commercial vehicles used CalculateComEnergyAndEmissions module.region_comsvc_powertrain_prop.csv (optional) file used specify powertrain proportion commercial vehicles. file used Initialize (VEPowertrainsAndFuels)\n) CalculateComEnergyAndEmissions modules.region_comsvc_powertrain_prop.csv (optional) file used specify powertrain proportion commercial vehicles. file used Initialize (VEPowertrainsAndFuels)\n) CalculateComEnergyAndEmissions modules.region_hh_driver_adjust_prop.csv (optional) file specifies relative driver licensing rate relative model estimation data year used AssignDrivers module.region_hh_driver_adjust_prop.csv (optional) file specifies relative driver licensing rate relative model estimation data year used AssignDrivers module.region_hvytrk_powertrain_prop.csv (optional) file used specify powertrain proportion heavy duty trucks. file used Initialize (VEPowertrainsAndFuels)\n) CalculateComEnergyAndEmissions modules.region_hvytrk_powertrain_prop.csv (optional) file used specify powertrain proportion heavy duty trucks. file used Initialize (VEPowertrainsAndFuels)\n) CalculateComEnergyAndEmissions modules.region_prop_externalities_paid.csv file supplies data climate change social costs used CalculateVehicleOperatingCost module.region_prop_externalities_paid.csv file supplies data climate change social costs used CalculateVehicleOperatingCost module.","code":""},{"path":"model-inputs.html","id":"verspm-azone_carsvc_characteristics.csv","chapter":"7 Model Inputs","heading":"7.6.1 azone_carsvc_characteristics.csv","text":"file specifies different characteristics high low car service levels Azone. information car service can found (placeholder). Changing input optional using default input values standard practice.HighCarSvcCost: Average cost dollars per mile travel high service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)LowCarSvcCost: Average cost dollars per mile travel low service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)AveCarSvcVehicleAge: Average age car service vehicles yearsLtTrkCarSvcSubProp: proportion light-truck owners substitute less-costly car service option owning light truckAutoCarSvcSubProp: proportion automobile owners substitute less-costly car service option owning automobileHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_charging_availability.csv","chapter":"7 Model Inputs","heading":"7.6.2 azone_charging_availability.csv","text":"input file supplies data proportion different household types plug-electric vehicle (PEV) charging available Azone.PropSFChargingAvail: Proportion single-family dwellings Azone PEV charging facilities installed able installedPropMFChargingAvail: Proportion multifamily dwelling units Azone PEV charging facilities availablePropGQChargingAvail: Proportion group quarters dwelling units Azone PEV charging facilities availableHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_electricity_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.6.3 azone_electricity_carbon_intensity.csv","text":"input file specifies carbon intensity electricity Azone. input file OPTIONAL needed user wants modify carbon intensity electricity.ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_fuel_power_cost.csv","chapter":"7 Model Inputs","heading":"7.6.4 azone_fuel_power_cost.csv","text":"file supplies data retail cost fuel electricity Azone. input can developed using local history querying Energy Information Administration (EIA) historical gasoline diesel power prices.FuelCost:Retail cost fuel per gas gallon equivalent dollars (taxes added)PowerCost: Retail cost electric power per kilowatt-hour dollars (taxes added)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_gq_pop_by_age.csv","chapter":"7 Model Inputs","heading":"7.6.5 azone_gq_pop_by_age.csv","text":"file contains group quarters population estimates/forecasts age base future years. file format includes number persons within following six age categories:0-1415-1920-2930-5455-6465 PlusGroup quarters distinguished two types: institutional non-institutional. Institutional group quarter populations correctional facilities nursing homes. Non-institutional group quarters include college dormitories, military barracks, group homes, missions, shelters. non-institutional group quarters included modeled population, given assumption institutional group quarters populations account much, , travel. Base year data group quarter populations can sourced Census.","code":""},{"path":"model-inputs.html","id":"verspm-azone_hh_pop_by_age.csv","chapter":"7 Model Inputs","heading":"7.6.6 azone_hh_pop_by_age.csv","text":"file contains population estimates/forecasts age base future years. file format includes number persons within six age groups:0-1415-1920-2930-5455-6465 PlusBase year data population age category can sourced Census. Future year data must developed user; many regions population forecasts available regional state agencies population data centers, universities, metropolitan planning organizations, similar agencies.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_hh_veh_mean_age.csv","chapter":"7 Model Inputs","heading":"7.6.7 azone_hh_veh_mean_age.csv","text":"file provides inputs mean auto age mean light truck age Azone. user can develop file using State DMV data.AutoMeanAge: Mean age automobiles owned leased households.LtTrkMeanAge: Mean age light trucks owned leased households.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_hh_veh_own_taxes.csv","chapter":"7 Model Inputs","heading":"7.6.8 azone_hh_veh_own_taxes.csv","text":"file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes).VehOwnFlatRateFee: Annual flat rate tax per vehicle dollarsVehOwnAdValoremTax: Annual proportion vehicle value paid taxesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_hhsize_targets.csv","chapter":"7 Model Inputs","heading":"7.6.9 azone_hhsize_targets.csv","text":"file contains household-specific targets population synthesizer. file contains two attributes:AveHhSize: Average household size non-group quarters householdsProp1PerHh: Proportion non-group quarters households one personHousehold size data base year can sourced Census.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_lttrk_prop.csv","chapter":"7 Model Inputs","heading":"7.6.10 azone_lttrk_prop.csv","text":"file specifies light truck proportion vehicle fleet. user can developed local registration data. Alternatively, MOVES available model region, input can calculated MOVES vehicle population data (SourceTypeYear). vehicle types used MOVES (SourceType) correspond two categories passenger vehicles used EERPAT: MOVES SourceType 21, Passenger Car, equivalent autos EERPAT MOVES Source Type 31, Passenger Truck, equivalent light trucks.LtTrkProp: Proportion household vehicles light trucks (pickup, SUV, van).snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_payd_insurance_prop.csv","chapter":"7 Model Inputs","heading":"7.6.11 azone_payd_insurance_prop.csv","text":"file provides inputs proportion households PAYD insurance.PaydHhProp: Proportion households Azone pay---drive insurance vehiclesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_per_cap_inc.csv","chapter":"7 Model Inputs","heading":"7.6.12 azone_per_cap_inc.csv","text":"file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2010 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2010 column labels current year. example, data obtained year 2015 dollars column labels file shown become HHIncomePC.2015 GQIncomePC.2015.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_prop_sov_dvmt_diverted.csv","chapter":"7 Model Inputs","heading":"7.6.13 azone_prop_sov_dvmt_diverted.csv","text":"file provides inputs goal diverting portion SOV travel within 20-mile tour distance (round trip distance). user can use local household travel survey data (available) develop input.PropSovDvmtDiverted: Goals proportion household DVMT single occupant vehicle tours round-trip distances 20 miles less diverted bicycling slow speed modes travelHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_relative_employment.csv","chapter":"7 Model Inputs","heading":"7.6.14 azone_relative_employment.csv","text":"file contains ratio workers persons age cohort model year relative model estimation data year. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year versus estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year versus estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year versus estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year versus estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year versus estimation data yearSetting value 1 assumes ratio workers persons consistent estimation data specific age cohort.","code":""},{"path":"model-inputs.html","id":"verspm-azone_veh_use_taxes.csv","chapter":"7 Model Inputs","heading":"7.6.15 azone_veh_use_taxes.csv","text":"file supplies data vehicle taxes related auto operating costsFuelTax:Tax per gas gallon equivalent fuel dollarsVmtTax: Tax per mile vehicle travel dollarsPevSurchgTaxProp: Proportion equivalent gas tax per mile paid hydrocarbon fuel consuming vehicles charged plug-electric vehicles per mile travel powered electricityHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-azone_vehicle_access_times.csv","chapter":"7 Model Inputs","heading":"7.6.16 azone_vehicle_access_times.csv","text":"file supplies data vehicle access eagress time.OwnedVehAccessTime:Average amount time minutes required access egress household-owned vehicle tripHighCarSvcAccessTime: Average amount time minutes required access egress high service level car service tripLowCarSvcAccessTime: Average amount time minutes required access egress low service level car service tripHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_transit_service.csv","chapter":"7 Model Inputs","heading":"7.6.17 bzone_transit_service.csv","text":"file supplies data relative public transit accessibility Bzone level. data inform input can sourced EPA’s Smart Location Database.D4c: Aggregate frequency transit service within 0.25 miles block group boundary per hour evening peak period (Ref: EPA 2010 Smart Location Database)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_carsvc_availability.csv","chapter":"7 Model Inputs","heading":"7.6.18 bzone_carsvc_availability.csv","text":"file contains information level car service availability contains value either Low High Bzones. High means car service access competitive household owned car impact household vehicle ownership; Low competitive impact household vehicle ownership.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_dwelling_units.csv","chapter":"7 Model Inputs","heading":"7.6.19 bzone_dwelling_units.csv","text":"file contains number single-family dwelling units (SFDU), multifamily dwelling units (MFDU) group-quarter dwelling units (GQDU) Bzone base future years. Data base year single-family multifamily dwelling units can sourced Census housing data information units structure, multifamily dwelling units defined structures 2--units. group quarters, unless detailed local data available, Census data non-institutionalized group quarter population can serve proxy dwelling units assuming 1:1 ratio dwelling unit per GQ population.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_employment.csv","chapter":"7 Model Inputs","heading":"7.6.20 bzone_employment.csv","text":"file contains total, retail service employment zone base future years. Employment categorizations Environmental Protection Agency’s (EPA) Smart Location Database 5-tier employment classification.TotEmp: Total number jobs zoneRetEmp: Number jobs retail sector zone (Census LEHD: CNS07)SvcEmp: Number jobs service sector zone (Census LEHD: CNS12 + CNS14 + CNS15 + CNS16 + CNS19)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_hh_inc_qrtl_prop.csv","chapter":"7 Model Inputs","heading":"7.6.21 bzone_hh_inc_qrtl_prop.csv","text":"file contains proportion Bzone non-group quarters households quartile Azone household income category base future years. total Bzone sum 1.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_lat_lon.csv","chapter":"7 Model Inputs","heading":"7.6.22 bzone_lat_lon.csv","text":"file contains latitude longitude centroid Bzone.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_network_design.csv","chapter":"7 Model Inputs","heading":"7.6.23 bzone_network_design.csv","text":"file contains values D3bpo4, measure intersection density determined number pedestrian-oriented intersections four legs per square mile. data inform input can sourced EPA’s Smart Location Database.snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_parking.csv","chapter":"7 Model Inputs","heading":"7.6.24 bzone_parking.csv","text":"file contains parking information Bzone base future years. Users use available local data parking availability, costs, program participation develop input.PkgSpacesPerSFDU: Average number free parking spaces available residents single-family dwelling unitsPkgSpacesPerMFDU: Average number free parking spaces available residents multifamily dwelling unitsPkgSpacesPerGQ: Average number free parking spaces available group quarters residentsPropWkrPay: Proportion workers pay parkingPropCashOut: Proportions workers paying parking cash--buy-back programPkgCost: Average daily cost long-term parking (e.g. paid monthly basis)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_travel_demand_mgt.csv","chapter":"7 Model Inputs","heading":"7.6.25 bzone_travel_demand_mgt.csv","text":"file contains information workers households participating demand management programs. Users use available local data travel demand management programs develop input.EcoProp: Proportion workers working Bzone participate strong employee commute options program (can also used approximate impacts teleworking)ImpProp: Proportion households residing Bzone participate strong individualized marketing programHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_unprotected_area.csv","chapter":"7 Model Inputs","heading":"7.6.26 bzone_unprotected_area.csv","text":"file contains information unprotected (.e., developable) area within zone.UrbanArea: Area Urban unprotected (.e. developable) within zone (Acres)TownArea: Area Town unprotected within zone (Acres)RuralArea: Area Rural unprotected within zone (Acres)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-bzone_urban-town_du_proportions.csv","chapter":"7 Model Inputs","heading":"7.6.27 bzone_urban-town_du_proportions.csv","text":"file contains proportion SF, MF GQ dwelling units within urban portion zone.PropUrbanSFDU: Proportion single family dwelling units located within urban portion zonePropUrbanMFDU: Proportion multi-family dwelling units located within urban portion zonePropUrbanGQDU: Proportion group quarters accommodations located within urban portion zonePropTownSFDU: Proportion single family dwelling units located within town portion zonePropTownMFDU: Proportion multi-family dwelling units located within town portion zonePropTownGQDU: Proportion group quarters accommodations located within town portion zoneHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_base_year_dvmt.csv","chapter":"7 Model Inputs","heading":"7.6.28 marea_base_year_dvmt.csv","text":"input file OPTIONAL. needed user wants modify adjust dvmt growth factors base year MareaUrbanLdvDvmt: Average daily vehicle miles travel roadways urbanized portion Marea light-duty vehicles base yearUrbanHvyTrkDvmt: Average daily vehicle miles travel roadways urbanized portion Marea heavy trucks base yearHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_congestion_charges.csv","chapter":"7 Model Inputs","heading":"7.6.29 marea_congestion_charges.csv","text":"input file OPTIONAL. needed user wants add congestion charge policy vehicle travel using different congestion levels roadway classes.FwyNoneCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods congestionFwyModCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods moderate congestionFwyHvyCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods heavy congestionFwySevCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods severe congestionFwyExtCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods extreme congestionArtNoneCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods congestionArtModCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods moderate congestionArtHvyCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods heavy congestionArtSevCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods severe congestionArtExtCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods extreme congestionHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_dvmt_split_by_road_class.csv","chapter":"7 Model Inputs","heading":"7.6.30 marea_dvmt_split_by_road_class.csv","text":"DVMT Split Road Class input file OPTIONAL. needed user wants modify dvmt split different road classes. data can derived FHWA Highway Statistics data.LdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway aerial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial rdwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_lane_miles.csv","chapter":"7 Model Inputs","heading":"7.6.31 marea_lane_miles.csv","text":"file contains inputs numbers freeway lane-miles arterial lane-miles Marea year. data develop input can sourced FHWA Highway Performance Monitoring System (HPMS), using either HPMS geospatial data Highway Statistics, State DOT.FwyLaneMi: Lane-miles roadways functionally classified freeways expressways urbanized portion metropolitan areaArtLaneMi: Lane-miles roadways functionally classified arterials (freeways expressways) urbanized portion metropolitan areaHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_operations_deployment.csv","chapter":"7 Model Inputs","heading":"7.6.32 marea_operations_deployment.csv","text":"input file OPTIONAL. needed user wants modify proportion DVMT affected operations different road classes.RampMeterDeployProp: Proportion freeway DVMT affected ramp metering deploymentIncidentMgtDeployProp: Proportion freeway DVMT affected incident management deploymentSignalCoordDeployProp: Proportion arterial DVMT affected signal coordination deploymentAccessMgtDeployProp: Proportion arterial DVMT affected access management deploymentOtherFwyOpsDeployProp: Proportion freeway DVMT affected deployment user-defined freeway operations measuresOtherArtOpsDeployProp: Proportion arterial DVMT affected deployment user-defined arterial operations measuresHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_speed_smooth_ecodrive.csv","chapter":"7 Model Inputs","heading":"7.6.33 marea_speed_smooth_ecodrive.csv","text":"input file supplies information deployment speed smoothing ecodriving road class vehicle type.FwySmooth:Fractional deployment speed smoothing traffic management freeways, 0 deployment 1 full potential fuel savingsArtSmooth: Fractional deployment speed smoothing traffic management arterials, 0 deployment 1 full potential fuel savingsLdvEcoDrive: Eco-driving penetration light-duty vehicles; fraction vehicles 0 1HvyTrkEcoDrive: Eco-driving penetration heavy-duty vehicles; fraction vehicles 0 1Here snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_transit_ave_fuel_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.6.34 marea_transit_ave_fuel_carbon_intensity.csv","text":"input file OPTIONAL. needed user wants modify average carbon intensity fuel used transit.TransitVanFuelCI: Average carbon intensity fuel used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuel used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuel used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_transit_biofuel_mix.csv","chapter":"7 Model Inputs","heading":"7.6.35 marea_transit_biofuel_mix.csv","text":"input file OPTIONAL. needed user wants modify biofuel used transit services.TransitEthanolPropGasoline: Ethanol proportion gasoline used transit vehiclesTransitBiodieselPropDiesel: Biodiesel proportion diesel used transit vehiclesTransitRngPropCng: Renewable natural gas proportion compressed natural gas used transit vehiclesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_transit_fuel.csv","chapter":"7 Model Inputs","heading":"7.6.36 marea_transit_fuel.csv","text":"input file OPTIONAL. needed user wants modify transit fuels proportions.VanPropDiesel: Proportion non-electric transit van travel powered dieselVanPropGasoline: Proportion non-electric transit van travel powered gasolineVanPropCng: Proportion non-electric transit van travel powered compressed natural gasBusPropDiesel: Proportion non-electric transit bus travel powered dieselBusPropGasoline: Proportion non-electric transit bus travel powered gasolineBusPropCng: Proportion non-electric transit bus travel powered compressed natural gasRailPropDiesel: Proportion non-electric transit rail travel powered dieselRailPropGasoline: Proportion non-electric transit rail travel powered gasolineHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_transit_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.6.37 marea_transit_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify mixes transit vehicle powertrains.VanPropIcev: Proportion transit van travel using internal combustion engine powertrainsVanPropHev: Proportion transit van travel using hybrid electric powertrainsVanPropBev: Proportion transit van travel using battery electric powertrainsBusPropIcev: Proportion transit bus travel using internal combustion engine powertrainsBusPropHev: Proportion transit bus travel using hybrid electric powertrainsBusPropBev: Proportion transit bus travel using battery electric powertrainsRailPropIcev: Proportion transit rail travel using internal combustion engine powertrainsRailPropHev: Proportion transit rail travel using hybrid electric powertrainsRailPropEv: Proportion transit rail travel using electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-marea_transit_service.csv","chapter":"7 Model Inputs","heading":"7.6.38 marea_transit_service.csv","text":"file contains annual revenue-miles different transit modes metropolitan area. Data develop input can sourced Federal Transit Administration NTD.DRRevMi: Annual revenue-miles demand-responsive public transit serviceVPRevMi: Annual revenue-miles van-pool similar public transit serviceMBRevMi: Annual revenue-miles standard bus public transit serviceRBRevMi: Annual revenue-miles rapid-bus commuter bus public transit serviceMGRevMi: Annual revenue-miles monorail automated guideway public transit serviceSRRevMi: Annual revenue-miles streetcar trolleybus public transit serviceHRRevMi: Annual revenue-miles light rail heavy rail public transit serviceCRRevMi: Annual revenue-miles commuter rail, hybrid rail, cable car, aerial tramway public transit serviceHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-other_ops_effectiveness.csv","chapter":"7 Model Inputs","heading":"7.6.39 other_ops_effectiveness.csv","text":"input file OPTIONAL. needed user wants modify delay effects operations different road classesLevel: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extremeArt_Rcr: Percentage reduction recurring arterial delay occur full deployment user-defined arterial operations measuresArt_NonRcr: Percentage reduction non-recurring arterial delay occur full deployment user-defined arterial operations measuresFwy_Rcr: Percentage reduction recurring freeway delay occur full deployment user-defined freeway operations measuresFwy_NonRcr: Percentage reduction non-recurring freeway delay occur full deployment user-defined freeway operations measuresHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_ave_fuel_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.6.40 region_ave_fuel_carbon_intensity.csv","text":"input file OPTIONAL. needed user wants modify average carbon density different vehicle types model region.HhFuelCI: Average carbon intensity fuels used household vehicles (grams CO2e per megajoule)CarSvcFuelCI: Average carbon intensity fuels used car service vehicles (grams CO2e per megajoule)ComSvcFuelCI: Average carbon intensity fuels used commercial service vehicles (grams CO2e per megajoule)HvyTrkFuelCI: Average carbon intensity fuels used heavy trucks (grams CO2e per megajoule)TransitVanFuelCI: Average carbon intensity fuels used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuels used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuels used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_base_year_dvmt.csv","chapter":"7 Model Inputs","heading":"7.6.41 region_base_year_dvmt.csv","text":"input file OPTIONAL. needed user wants adjust heavy truck DVMT base yearHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueHvyTrkDvmt: Average daily vehicle miles travel roadways region heavy trucks base yearHvyTrkDvmtUrbanProp: Proportion Region heavy truck daily vehicle miles travel occurring urbanized area roadwaysHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_carsvc_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.6.42 region_carsvc_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion car services.CarSvcAutoPropIcev: Proportion car service automobile travel powered internal combustion engine powertrainsCarSvcAutoPropHev: Proportion car service automobile travel powered hybrid electric powertrainsCarSvcAutoPropBev: Proportion car service automobile travel powered battery electric powertrainsCarSvcLtTrkPropIcev: Proportion car service light truck travel powered internal combustion engine powertrainsCarSvcLtTrkPropHev: Proportion car service light truck travel powered hybrid electric powertrainsCarSvcLtTrkPropBev: Proportion car service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_comsvc_lttrk_prop.csv","chapter":"7 Model Inputs","heading":"7.6.43 region_comsvc_lttrk_prop.csv","text":"file supplies data light truck proportion commercial vehicles region.ComSvcLtTrkProp: Regional proportion commercial service vehicles light trucksHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_comsvc_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.6.44 region_comsvc_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion commercial vehicles.ComSvcAutoPropIcev: Proportion commercial service automobile travel powered internal combustion engine powertrainsComSvcAutoPropHev: Proportion commercial service automobile travel powered hybrid electric powertrainsComSvcAutoPropBev: Proportion commercial service automobile travel powered battery electric powertrainsComSvcLtTrkPropIcev: Proportion commercial service light truck travel powered internal combustion engine powertrainsComSvcLtTrkPropHev: Proportion commercial service light truck travel powered hybrid electric powertrainsComSvcLtTrkPropBev: Proportion commercial service light truck travel powered battery electric powertrainssHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_hh_driver_adjust_prop.csv","chapter":"7 Model Inputs","heading":"7.6.45 region_hh_driver_adjust_prop.csv","text":"file OPTIONAL can used adjust estimate household drivers age cohort. file specifies relative driver licensing rate relative model estimation data year order account observed projected changes licensing rates.Drv15to19AdjProp: Target proportion unadjusted model number drivers 15 19 years old (1 = adjustment)Drv20to29AdjProp: Target proportion unadjusted model number drivers 20 29 years old (1 = adjustment)Drv30to54AdjProp: Target proportion unadjusted model number drivers 30 54 years old (1 = adjustment)Drv55to64AdjProp: Target proportion unadjusted model number drivers 55 64 years old (1 = adjustment)Drv65PlusAdjProp: Target proportion unadjusted model number drivers 65 older (1 = adjustment)snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_hvytrk_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.6.46 region_hvytrk_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion heavy duty trucks.HvyTrkPropIcev: Proportion heavy truck travel powered internal combustion engine powertrainsHvyTrkPropHev: Proportion heavy truck travel powered hybrid electric powertrainsHvyTrkPropBev: Proportion heavy truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_co2e_costs.csv","chapter":"7 Model Inputs","heading":"7.6.47 region_co2e_costs.csv","text":"OPTIONAL file. input accounts environmental social cost CO2e emissions per metric ton. Unit can defined, default USD. year USD based model year. [details GitHub site]CO2eCost: Cost CO2e emissions per metric ton.","code":""},{"path":"model-inputs.html","id":"verspm-region_prop_externalities_paid.csv","chapter":"7 Model Inputs","heading":"7.6.48 region_prop_externalities_paid.csv","text":"Proportional external costs region (file supplies data climate change social costs.PropClimateCostPaid: Proportion climate change costs paid users (.e. ratio carbon taxes climate change costsPropOtherExtCostPaid: Proportion social costs paid usersHere snapshot file:","code":""},{"path":"model-inputs.html","id":"verspm-region_road_cost.csv","chapter":"7 Model Inputs","heading":"7.6.49 region_road_cost.csv (TO DO)","text":"","code":""},{"path":"model-inputs.html","id":"vestate-inputs","chapter":"7 Model Inputs","heading":"7.7 VE-State Input Files","text":"azone_carsvc_characteristics.csv file specifies different characteristics high low car service level used CreateVehicleTable AssignVehicleAge modules.azone_carsvc_characteristics.csv file specifies different characteristics high low car service level used CreateVehicleTable AssignVehicleAge modules.azone_charging_availability.csv file data proportion different household types EV charging available used AssignHHVehiclePowertrain module.azone_charging_availability.csv file data proportion different household types EV charging available used AssignHHVehiclePowertrain module.azone_electricity_carbon_intensity.csv file used specify carbon intensity electricity optional (needed user wants modify values). file used Initialize (VEPowertrainsAndFuels) CalculateCarbonIntensity modules.azone_electricity_carbon_intensity.csv file used specify carbon intensity electricity optional (needed user wants modify values). file used Initialize (VEPowertrainsAndFuels) CalculateCarbonIntensity modules.azone_fuel_power_cost.csv file supplies data retail cost fuel electricity used CalculateVehicleOperatingCost module.azone_fuel_power_cost.csv file supplies data retail cost fuel electricity used CalculateVehicleOperatingCost module.azone_gq_pop_by_age.csv file contains group quarters population estimates/forecasts age used CreateHouseholds module.azone_gq_pop_by_age.csv file contains group quarters population estimates/forecasts age used CreateHouseholds module.azone_gq_pop-prop_by_area-type.csv file provides proportions groupquarters different area types used Initialize module.azone_gq_pop-prop_by_area-type.csv file provides proportions groupquarters different area types used Initialize module.azone_hh_loc_type_prop.csv file provides proportions households residing metropolitan, towns rural part Azone used Initialize module.azone_hh_loc_type_prop.csv file provides proportions households residing metropolitan, towns rural part Azone used Initialize module.azone_hh_pop_by_age.csv file contains population estimates/forecasts age used CreateHouseholds module.azone_hh_pop_by_age.csv file contains population estimates/forecasts age used CreateHouseholds module.azone_hh_veh_mean_age.csv file provides inputs mean auto age mean light truck age used AssignVehicleAge module.azone_hh_veh_mean_age.csv file provides inputs mean auto age mean light truck age used AssignVehicleAge module.azone_hh_veh_own_taxes.csv file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes). file used \nCalculateVehicleOwnCost module.azone_hh_veh_own_taxes.csv file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes). file used \nCalculateVehicleOwnCost module.azone_hhsize_targets.csv file contains household specific targets used CreateHouseholds module.azone_hhsize_targets.csv file contains household specific targets used CreateHouseholds module.azone_loc_type_land_area.csv file provides land area data different area types used Initialize module.azone_loc_type_land_area.csv file provides land area data different area types used Initialize module.azone_lttrk_prop.csv file specifies light truck proportion vehicle fleet used AssignVehicleType module.azone_lttrk_prop.csv file specifies light truck proportion vehicle fleet used AssignVehicleType module.azone_payd_insurance_prop.csv file provides inputs proportion households PAYD (pay---drive) insurance used CalculateVehicleOwnCost module.azone_payd_insurance_prop.csv file provides inputs proportion households PAYD (pay---drive) insurance used CalculateVehicleOwnCost module.azone_per_cap_inc.csv file contains information regional average per capita household group quarters income year 2010 dollars used PredictIncome module.azone_per_cap_inc.csv file contains information regional average per capita household group quarters income year 2010 dollars used PredictIncome module.azone_prop_sov_dvmt_diverted.csv file provides inputs goal diverting portion SOV travel within 20-mile tour distance used DivertSovTravel module.azone_prop_sov_dvmt_diverted.csv file provides inputs goal diverting portion SOV travel within 20-mile tour distance used DivertSovTravel module.azone_relative_employment.csv file contains ratio workers persons age used PredictWorkers module.azone_relative_employment.csv file contains ratio workers persons age used PredictWorkers module.azone_veh_use_taxes.csv file supplies data vehicle related taxes used CalculateVehicleOperatingCost module.azone_veh_use_taxes.csv file supplies data vehicle related taxes used CalculateVehicleOperatingCost module.azone_vehicle_access_times.csv file supplies data vehicle access egress time used CalculateVehicleOperatingCost module.azone_vehicle_access_times.csv file supplies data vehicle access egress time used CalculateVehicleOperatingCost module.azone_wkr_loc_type_prop file provides proportions workers residing Azone works metropolitan, towns rural part Azone used Initialize module.azone_wkr_loc_type_prop file provides proportions workers residing Azone works metropolitan, towns rural part Azone used Initialize module.marea_base_year_dvmt.csv file used specify adjust DVMT growth factors optional (needed user wants modify values). file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.marea_base_year_dvmt.csv file used specify adjust DVMT growth factors optional (needed user wants modify values). file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.marea_carsvc_availability.csv file data activity proportions served car services used Initialize (AssignCarSvcAvailability)marea_carsvc_availability.csv file data activity proportions served car services used Initialize (AssignCarSvcAvailability)marea_congestion_charges.csv file used specify charges vehicle travel different congestion levels optional. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_congestion_charges.csv file used specify charges vehicle travel different congestion levels optional. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_dvmt_split_by_road_class.csv file used specify dvmt split different road classes optional. file used Initialize (VETravelPerformance) CalculateBaseRoadDvmt modules.marea_dvmt_split_by_road_class.csv file used specify dvmt split different road classes optional. file used Initialize (VETravelPerformance) CalculateBaseRoadDvmt modules.marea_d3bpo4_adj.csv file provides D3bpo4 value urban, town rural areas EPA 2010 Smart Location Database used Simulate4DMeasuresmarea_d3bpo4_adj.csv file provides D3bpo4 value urban, town rural areas EPA 2010 Smart Location Database used Simulate4DMeasuresmarea_lane_miles.csv file contains inputs numbers freeway lane-miles arterial lane-miles used AssignRoadMiles module.marea_lane_miles.csv file contains inputs numbers freeway lane-miles arterial lane-miles used AssignRoadMiles module.marea_mix_targets.csv file represents Marea target proportion households located mixed-use neighborhoods (NA target) used SimulateUrbanMixMeasure module.marea_mix_targets.csv file represents Marea target proportion households located mixed-use neighborhoods (NA target) used SimulateUrbanMixMeasure module.marea_operations_deployment.csv file used specify proportion dvmt affected operations different road classes optional. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_operations_deployment.csv file used specify proportion dvmt affected operations different road classes optional. file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.marea_parking-avail_by_area-type.csv file data average number parking spots available households used AssignParkingRestrictionsmarea_parking-avail_by_area-type.csv file data average number parking spots available households used AssignParkingRestrictionsmarea_parking-cost_by_area-type.csv file data related parking costs population proportions paying parking costs used AssignParkingRestrictionsmarea_parking-cost_by_area-type.csv file data related parking costs population proportions paying parking costs used AssignParkingRestrictionsmarea_speed_smooth_ecodrive.csv input file supplies information deployment speed smoothing ecodriving road class vehicle type used CalculateMpgMpkwhAdjustments module.marea_speed_smooth_ecodrive.csv input file supplies information deployment speed smoothing ecodriving road class vehicle type used CalculateMpgMpkwhAdjustments module.marea_transit_ave_fuel_carbon_intensity.csv file used specify average carbon intensity fuel used transit optional. file used Initialize (VETravelPerformance) module.marea_transit_ave_fuel_carbon_intensity.csv file used specify average carbon intensity fuel used transit optional. file used Initialize (VETravelPerformance) module.marea_transit_biofuel_mix.csv file used specify biofuel used transit optional. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_biofuel_mix.csv file used specify biofuel used transit optional. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_fuel.csv file used specify transit fuel proportions optional. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_fuel.csv file used specify transit fuel proportions optional. file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.marea_transit_powertrain_prop.csv file used specify mixes transit vehicle powertrains optional. file used Initialize (VETravelPerformance) CalculatePtranEnergyAndEmissions modules.marea_transit_powertrain_prop.csv file used specify mixes transit vehicle powertrains optional. file used Initialize (VETravelPerformance) CalculatePtranEnergyAndEmissions modules.marea_transit_service.csv file contains annual revenue-miles different transit modes metropolitan area used AssignTransitService module.marea_transit_service.csv file contains annual revenue-miles different transit modes metropolitan area used AssignTransitService module.marea_travel-demand-mgt_by_area-type.csv file data proportions participating demand management programs used AssignDemandManagement module.marea_travel-demand-mgt_by_area-type.csv file data proportions participating demand management programs used AssignDemandManagement module.marea_uza_profile_names.csv file provides name specific urbanized area urbanized area profile use SimBzone creation used Initialize module.marea_uza_profile_names.csv file provides name specific urbanized area urbanized area profile use SimBzone creation used Initialize module.other_ops_effectiveness.csv file used specify delay effects operations different road classes optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.other_ops_effectiveness.csv file used specify delay effects operations different road classes optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateRoadPerformance modules.region_ave_fuel_carbon_intensity.csv file used specify average carbon density different vehicle types optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.region_ave_fuel_carbon_intensity.csv file used specify average carbon density different vehicle types optional (needed user wants modify values). file used Initialize (VETravelPerformance) CalculateCarbonIntensity modules.region_base_year_hvytrk_dvmt.csv file used specify heavy truck dvmt base year optional. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.region_base_year_hvytrk_dvmt.csv file used specify heavy truck dvmt base year optional. file used Initialize (VETravelPerformance), CalculateBaseRoadDvmt CalculateFutureRoadDvmt modules.region_carsvc_powertrain_prop.csv file used specify powertrain proportion car services optional. file used Initialize (VETravelPerformance), AssignHhVehiclePowertrain AdjustHhVehicleMpgMpkwh modules.region_carsvc_powertrain_prop.csv file used specify powertrain proportion car services optional. file used Initialize (VETravelPerformance), AssignHhVehiclePowertrain AdjustHhVehicleMpgMpkwh modules.region_comsvc_lttrk_prop.csv file supplies data light truck proportion commercial vehicles used CalculateComEnergyAndEmissions module.region_comsvc_lttrk_prop.csv file supplies data light truck proportion commercial vehicles used CalculateComEnergyAndEmissions module.region_comsvc_powertrain_prop.csv file used specify powertrain proportion commercial vehicles optional. file used Initialize (VEPowertrainsAndFuels) CalculateComEnergyAndEmissions modules.region_comsvc_powertrain_prop.csv file used specify powertrain proportion commercial vehicles optional. file used Initialize (VEPowertrainsAndFuels) CalculateComEnergyAndEmissions modules.region_comsvc_veh_mean_age.csv input file contains average age commercial service vehicles used CalculateComEnergyAndEmissions module.region_comsvc_veh_mean_age.csv input file contains average age commercial service vehicles used CalculateComEnergyAndEmissions module.region_hh_driver_adjust_prop.csv file specifies relative driver licensing rate relative model estimation data year used AssignDrivers module.region_hh_driver_adjust_prop.csv file specifies relative driver licensing rate relative model estimation data year used AssignDrivers module.region_hvytrk_powertrain_prop.csv file used specify powertrain proportion heavy duty trucks optional. file used Initialize (VEPowertrainsAndFuels) CalculateComEnergyAndEmissions modules.region_hvytrk_powertrain_prop.csv file used specify powertrain proportion heavy duty trucks optional. file used Initialize (VEPowertrainsAndFuels) CalculateComEnergyAndEmissions modules.region_prop_externalities_paid.csv file supplies data climate change social costs used CalculateVehicleOperatingCost module.region_prop_externalities_paid.csv file supplies data climate change social costs used CalculateVehicleOperatingCost module.region_road_cost.csv file supplies data different types road costs used BalanceRoadCostsAndRevenues module.region_road_cost.csv file supplies data different types road costs used BalanceRoadCostsAndRevenues module.","code":""},{"path":"model-inputs.html","id":"vestate-azone_carsvc_characteristics.csv","chapter":"7 Model Inputs","heading":"7.7.1 azone_carsvc_characteristics.csv","text":"file specifies different characteristics high low car service levelsHighCarSvcCost: Average cost dollars per mile travel high service level car serviceLowCarSvcCost: Average cost dollars per mile travel low service level car serviceAveCarSvcVehicleAge: Average age car service vehicles yearsLtTrkCarSvcSubProp: proportion light-truck owners substitute less-costly car service option owning light truckAutoCarSvcSubProp: proportion automobile owners substitute less-costly car service option owning automobileHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_charging_availability.csv","chapter":"7 Model Inputs","heading":"7.7.2 azone_charging_availability.csv","text":"input file supplies data proportion different household types available chargingPropSFChargingAvail: Proportion single-family dwellings Azone PEV charging facilties installed able installedPropMFChargingAvail: Proportion multi-family dwelling units Azone PEV charging facilities availablePropGQChargingAvail: Proportion group quarters dwelling units Azone PEV charging facilities availableHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_electricity_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.7.3 azone_electricity_carbon_intensity.csv","text":"input file OPTIONAL. needed user wants modify carbon intensity electricity.ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_fuel_power_cost.csv","chapter":"7 Model Inputs","heading":"7.7.4 azone_fuel_power_cost.csv","text":"file supplies data retail cost fuel electricityFuelCost:Retail cost fuel per gas gallon equivalent dollarsPowerCost: Retail cost electric power per kilowatt-hour dollarsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_gq_pop_by_age.csv","chapter":"7 Model Inputs","heading":"7.7.5 azone_gq_pop_by_age.csv","text":"file contains group quarters population estimates/forecasts age base future years. file format includes number persons within following six age categories:0-1415-1920-2930-5455-6465 PlusHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_gq_pop-prop_by_area-type.csv","chapter":"7 Model Inputs","heading":"7.7.6 azone_gq_pop-prop_by_area-type.csv","text":"file provides proportions groupquarters different area types. proportions add 1 Azone zone non-zero groupquarters population.\nfile contains NA values, ignored groupquarters population distributed equally among simulated Bzones.PropGQPopCenter: Proportion groupquarters population center area typePropGQPopInner: Proportion groupquarters population inner area typePropGQPopOuter: Proportion groupquarters population outer area typePropGQPopFringe: Proportion groupquarters population fringe area type","code":""},{"path":"model-inputs.html","id":"vestate-azone_hh_loc_type_prop.csv","chapter":"7 Model Inputs","heading":"7.7.7 azone_hh_loc_type_prop.csv","text":"file provides proportions households residing metropolitan, towns rural part AzonePropMetroHh: Proportion households residing metropolitan (.e. urbanized) part AzonePropTownHh: Proportion households residing towns (.e. urban-like urbanized) AzonePropRuralHh: Proportion households residing rural (.e. urbanized town) parts AzoneHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_hh_pop_by_age.csv","chapter":"7 Model Inputs","heading":"7.7.8 azone_hh_pop_by_age.csv","text":"file contains population estimates/forecasts age base future years. file format includes number persons within six age groups:0-1415-1920-2930-5455-6465 PlusHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_hh_veh_mean_age.csv","chapter":"7 Model Inputs","heading":"7.7.9 azone_hh_veh_mean_age.csv","text":"file provides inputs mean auto age mean light truck age Azone.AutoMeanAge: Mean age automobiles owned leased households.LtTrkMeanAge: Mean age light trucks owned leased households.snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_hh_veh_own_taxes.csv","chapter":"7 Model Inputs","heading":"7.7.10 azone_hh_veh_own_taxes.csv","text":"file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes).VehOwnFlatRateFee: Annual flat rate tax per vehicle dollarsVehOwnAdValoremTax: Annual proportion vehicle value paid taxesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_hhsize_targets.csv","chapter":"7 Model Inputs","heading":"7.7.11 azone_hhsize_targets.csv","text":"Rhis file contains household-specific targets population synthesizer. file contains two attributes:AveHhSize: Average household size non-group quarters householdsProp1PerHh: Proportion non-group quarters households one personHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_loc_type_land_area.csv","chapter":"7 Model Inputs","heading":"7.7.12 azone_loc_type_land_area.csv","text":"file provides land area data different area typesMetroLandArea: Land area (excluding large water bodies large tracts undevelopable land) metropolitan (.e. urbanized) portion AzoneTownLandArea: Land area (excluding large water bodies large tracts undevelopable land) towns (.e. urban-like urbanized) AzoneRuralAveDensity: Average activity density (households jobs per acre) rural (.e. metropolitan town) portions Azone including large waterbodies large tracts agricultural lands, forest lands, otherwise protected landsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_lttrk_prop.csv","chapter":"7 Model Inputs","heading":"7.7.13 azone_lttrk_prop.csv","text":"file specifies light truck proportion vehicle fleet.LtTrkProp: Proportion household vehicles light trucks (pickup, SUV, van).snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-","chapter":"7 Model Inputs","heading":"7.7.14 azone_payd_insurance_prop.csv","text":"file provides inputs proportion households PAYD insurance.PaydHhProp: Proportion households Azone pay---drive insurance vehiclesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_per_cap_inc.csv","chapter":"7 Model Inputs","heading":"7.7.15 azone_per_cap_inc.csv","text":"file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2010 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2010 column labels current year. example, data obtained year 2015 dollars column labels file shown become HHIncomePC.2015 GQIncomePC.2015.snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_prop_sov_dvmt_diverted.csv","chapter":"7 Model Inputs","heading":"7.7.16 azone_prop_sov_dvmt_diverted.csv","text":"file provides inputs goal diverting portion SOV travel within 20-mile tour distance (round trip distance).PropSovDvmtDiverted: Goals proportion household DVMT single occupant vehicle tours round-trip distances 20 miles less diverted bicycling slow speed modes travelHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_relative_employment.csv","chapter":"7 Model Inputs","heading":"7.7.17 azone_relative_employment.csv","text":"file contains ratio workers persons age cohort model year relative model estimation data year. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year versus estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year versus estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year versus estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year versus estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year versus estimation data yearHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_veh_use_taxes.csv","chapter":"7 Model Inputs","heading":"7.7.18 azone_veh_use_taxes.csv","text":"file supplies data vehicle related taxesFuelTax:Tax per gas gallon equivalent fuel dollarsVmtTax: Tax per mile vehicle travel dollarsPevSurchgTaxProp: Proportion equivalent gas tax per mile paid hydrocarbon fuel consuming vehicles charged plug-electric vehicles per mile travel powered electricityHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_vehicle_access_times.csv","chapter":"7 Model Inputs","heading":"7.7.19 azone_vehicle_access_times.csv","text":"file supplies data vehicle access eagress time.OwnedVehAccessTime:Average amount time minutes required access egress household-owned vehicle tripHighCarSvcAccessTime: Average amount time minutes required access egress high service level car service tripLowCarSvcAccessTime: Average amount time minutes required access egress low service level car service tripHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-azone_wkr_loc_type_prop","chapter":"7 Model Inputs","heading":"7.7.20 azone_wkr_loc_type_prop.csv","text":"file provides proportions workers residing Azone works metropolitan, towns rural part AzonePropWkrInMetroJobs: Proportion workers residing Azone work jobs metropolitan (.e. urbanized) area associated AzonePropWkrInTownJobs: Proportion workers residing Azone work jobs towns (.e. urban-like urbanized) AzonePropWkrInRuralJobs: Proportion workers residing Azone work jobs rural (.e. urbanized town) parts AzonePropMetroJobs: Proportion jobs metropolitan area Azone associated located metropolitan portion AzoneHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_base_year_dvmt.csv","chapter":"7 Model Inputs","heading":"7.7.21 marea_base_year_dvmt.csv","text":"input file OPTIONAL. needed user wants modify adjust dvmt growth factors base year MareaComSvcDvmtGrowthBasis: Factor used grow commercial service vehicle DVMT Marea base year valueHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueUrbanLdvDvmt: Average daily vehicle miles travel roadways urbanized portion Marea light-duty vehicles base yearUrbanHvyTrkDvmt: Average daily vehicle miles travel roadways urbanized portion Marea heavy trucks base yearHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_carsvc_availability.csv","chapter":"7 Model Inputs","heading":"7.7.22 marea_carsvc_availability.csv","text":"file data acitivity proportions served car servicesCenterPropHighCarSvc: Proportion activity center area type served high level car service (.e. service competitive household owned car)InnerPropHighCarSvc: Proportion activity inner area type served high level car service (.e. service competitive household owned car)OuterPropHighCarSvc: Proportion activity outer area type served high level car service (.e. service competitive household owned car)FringePropHighCarSvc: Proportion activity fringe area type served high level car service (.e. service competitive household owned car)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_congestion_charges.csv","chapter":"7 Model Inputs","heading":"7.7.23 marea_congestion_charges.csv","text":"input file OPTIONAL. needed user wants modify charges vehicle travel different congestion levelsFwyNoneCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods congestionFwyModCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods moderate congestionFwyHvyCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods heavy congestionFwySevCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods severe congestionFwyExtCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods extreme congestionArtNoneCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods congestionArtModCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods moderate congestionArtHvyCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods heavy congestionArtSevCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods severe congestionArtExtCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods extreme congestionHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_dvmt_split_by_road_class.csv","chapter":"7 Model Inputs","heading":"7.7.24 marea_dvmt_split_by_road_class.csv","text":"input file OPTIONAL. needed user wants modify dvmt split different road classes.LdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_d3bpo4_adj.csv","chapter":"7 Model Inputs","heading":"7.7.25 marea_d3bpo4_adj.csv","text":"file provides D3bpo4 value urban, town rural areas EPA 2010 Smart Location DatabaseUrbanD3bpo4Adj: Proportion base urban D3bpo4 value tabulated EPA 2010 Smart Location Database urbanized portion mareaTownD3bpo4Adj: Proportion base town D3bpo4 value tabulated EPA 2010 Smart Location Database townsRuralD3bpo4Adj: Proportion base town D3bpo4 value tabulated EPA 2010 Smart Location Database rural areasHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_lane_miles.csv","chapter":"7 Model Inputs","heading":"7.7.26 marea_lane_miles.csv","text":"file contains inputs numbers freeway lane-miles arterial lane-miles Marea year.FwyLaneMi: Lane-miles roadways functionally classified freeways expressways urbanized portion metropolitan areaArtLaneMi: Lane-miles roadways functionally classified arterials (freeways expressways) urbanized portion metropolitan areaHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_mix_targets.csv","chapter":"7 Model Inputs","heading":"7.7.27 marea_mix_targets.csv","text":"file represents Marea target proportion households located mixed-use neighborhoods (NA target)UrbanMixProp: Marea target proportion households located mixed-use neighborhoods (NA target)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_operations_deployment.csv","chapter":"7 Model Inputs","heading":"7.7.28 marea_operations_deployment.csv","text":"input file OPTIONAL. needed user wants modify proportion dvmt affected operations different road classes.RampMeterDeployProp: Proportion freeway DVMT affected ramp metering deploymentIncidentMgtDeployProp: Proportion freeway DVMT affected incident management deploymentSignalCoordDeployProp: Proportion arterial DVMT affected signal coordination deploymentAccessMgtDeployProp: Proportion arterial DVMT affected access management deploymentOtherFwyOpsDeployProp: Proportion freeway DVMT affected deployment user-defined freeway operations measuresOtherArtOpsDeployProp: Proportion arterial DVMT affected deployment user-defined arterial operations measuresHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_parking-avail_by_area-type.csv","chapter":"7 Model Inputs","heading":"7.7.29 marea_parking-avail_by_area-type.csv","text":"file data avereage number parkings available householdsCenterPkgSpacesPerSFDU: Average number free parking spaces available residents single-family dwelling units center area typeInnerPkgSpacesPerSFDU: Average number free parking spaces available residents single-family dwelling units inner area typeOuterPkgSpacesPerSFDU: Average number free parking spaces available residents single-family dwelling units outer area typeCenterPkgSpacesPerMFDU: Average number free parking spaces available residents multifamily dwelling units center area typeInnerPkgSpacesPerMFDU: Average number free parking spaces available residents multifamily dwelling units inner area typeOuterPkgSpacesPerMFDU: Average number free parking spaces available residents multifamily dwelling units outer area typeCenterPkgSpacesPerGQ: Average number free parking spaces available group quarters residents center area typeInnerPkgSpacesPerGQ: Average number free parking spaces available group quarters residents inner area typeOuterPkgSpacesPerGQ: Average number free parking spaces available group quarters residents outer area typeHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_parking-cost_by_area-type.csv","chapter":"7 Model Inputs","heading":"7.7.30 marea_parking-cost_by_area-type.csv","text":"file data related parking costs population proportions paying parking costsCenterPropWkrPay: Proportion workers pay parking center area typeInnerPropWkrPay: Proportion workers pay parking inner area typeOuterPropWkrPay: Proportion workers pay parking outer area typeCenterPropCashOut: Proportions workers paying parking cash--buy-back program center area typeInnerPropCashOut: Proportions workers paying parking cash--buy-back program inner area typeOuterPropCashOut: Proportions workers paying parking cash--buy-back program outer area typeCenterPkgCost: Average daily cost long-term parking (e.g. paid monthly basis) center area typeInnerPkgCost: Average daily cost long-term parking (e.g. paid monthly basis) inner area typeOuterPkgCost: Average daily cost long-term parking (e.g. paid monthly basis) outer area typeHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_speed_smooth_ecodrive.csv","chapter":"7 Model Inputs","heading":"7.7.31 marea_speed_smooth_ecodrive.csv","text":"input file supplies information deployment speed smoothing ecodriving road class vehicle typeFwySmooth:Fractional deployment speed smoothing traffic management freeways, 0 deployment 1 full potential fuel savingsArtSmooth: Fractional deployment speed smoothing traffic management arterials, 0 deployment 1 full potential fuel savingsLdvEcoDrive: Eco-driving penetration light-duty vehicles; fraction vehicles 0 1HvyTrkEcoDrive: Eco-driving penetration heavy-duty vehicles; fraction vehicles 0 1Here snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_transit_ave_fuel_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.7.32 marea_transit_ave_fuel_carbon_intensity.csv","text":"input file OPTIONAL. needed user wants modify average carbon intensity fuel used transit.TransitVanFuelCI: Average carbon intensity fuel used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuel used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuel used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_transit_biofuel_mix.csv","chapter":"7 Model Inputs","heading":"7.7.33 marea_transit_biofuel_mix.csv","text":"input file OPTIONAL. needed user wants modify biofuel used transit services.TransitEthanolPropGasoline: Ethanol proportion gasoline used transit vehiclesTransitBiodieselPropDiesel: Biodiesel proportion diesel used transit vehiclesTransitRngPropCng: Renewable natural gas proportion compressed natural gas used transit vehiclesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_transit_fuel.csv","chapter":"7 Model Inputs","heading":"7.7.34 marea_transit_fuel.csv","text":"input file OPTIONAL. needed user wants modify transit fuels proportions.VanPropDiesel: Proportion non-electric transit van travel powered dieselVanPropGasoline: Proportion non-electric transit van travel powered gasolineVanPropCng: Proportion non-electric transit van travel powered compressed natural gasBusPropDiesel: Proportion non-electric transit bus travel powered dieselBusPropGasoline: Proportion non-electric transit bus travel powered gasolineBusPropCng: Proportion non-electric transit bus travel powered compressed natural gasRailPropDiesel: Proportion non-electric transit rail travel powered dieselRailPropGasoline: Proportion non-electric transit rail travel powered gasolineHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_transit_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.7.35 marea_transit_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify mixes transit vehicle powertrains.VanPropIcev: Proportion transit van travel using internal combustion engine powertrainsVanPropHev: Proportion transit van travel using hybrid electric powertrainsVanPropBev: Proportion transit van travel using battery electric powertrainsBusPropIcev: Proportion transit bus travel using internal combustion engine powertrainsBusPropHev: Proportion transit bus travel using hybrid electric powertrainsBusPropBev: Proportion transit bus travel using battery electric powertrainsRailPropIcev: Proportion transit rail travel using internal combustion engine powertrainsRailPropHev: Proportion transit rail travel using hybrid electric powertrainsRailPropEv: Proportion transit rail travel using electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_transit_service.csv","chapter":"7 Model Inputs","heading":"7.7.36 marea_transit_service.csv","text":"file contains annual revenue-miles different transit modes metropolitan area.DRRevMi: Annual revenue-miles demand-responsive public transit service\nVPRevMi: Annual revenue-miles van-pool similar public transit service\nMBRevMi: Annual revenue-miles standard bus public transit service\nRBRevMi: Annual revenue-miles rapid-bus commuter bus public transit service\nMGRevMi: Annual revenue-miles monorail automated guideway public transit service\nSRRevMi: Annual revenue-miles streetcar trolleybus public transit service\nHRRevMi: Annual revenue-miles light rail heavy rail public transit service\nCRRevMi: Annual revenue-miles commuter rail, hybrid rail, cable car, aerial tramway public transit serviceHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_travel-demand-mgt_by_area-type.csv","chapter":"7 Model Inputs","heading":"7.7.37 marea_travel-demand-mgt_by_area-type.csv","text":"file data proportions participating demand management programsCenterEcoProp: Proportion workers working center area type Marea participate strong employee commute options programInnerEcoProp: Proportion workers working inner area type Marea participate strong employee commute options programOuterEcoProp: Proportion workers working outer area type Marea participate strong employee commute options programFringeEcoProp: Proportion workers working fringe area type Marea participate strong employee commute options programCenterImpProp: Proportion households residing center area type Marea participate strong individualized marketing programInnerImpProp: Proportion households residing inner area type Marea participate strong individualized marketing programOuterImpProp: Proportion households residing outer area type Marea participate strong individualized marketing programFringeImpProp: Proportion households residing fringe area type Marea participate strong individualized marketing programHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-marea_uza_profile_names.csv","chapter":"7 Model Inputs","heading":"7.7.38 marea_uza_profile_names.csv","text":"file provides name specific urbanized area urbanized area profile use SimBzone creation.UzaProfileName: Name specific urbanized area urbanized area profile use SimBzone creation one following: small, medium-small, medium, medium-large, large, -largeHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-other_ops_effectiveness.csv","chapter":"7 Model Inputs","heading":"7.7.39 other_ops_effectiveness.csv","text":"input file OPTIONAL. needed user wants modify delay effects operations different road classesLevel: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extremeArt_Rcr: Percentage reduction recurring arterial delay occur full deployment user-defined arterial operations measuresArt_NonRcr: Percentage reduction non-recurring arterial delay occur full deployment user-defined arterial operations measuresFwy_Rcr: Percentage reduction recurring freeway delay occur full deployment user-defined freeway operations measuresFwy_NonRcr: Percentage reduction non-recurring freeway delay occur full deployment user-defined freeway operations measuresHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_ave_fuel_carbon_intensity.csv","chapter":"7 Model Inputs","heading":"7.7.40 region_ave_fuel_carbon_intensity.csv","text":"input file OPTIONAL. needed user wants modify average carbon density different vehicle types.HhFuelCI: Average carbon intensity fuels used household vehicles (grams CO2e per megajoule)CarSvcFuelCI: Average carbon intensity fuels used car service vehicles (grams CO2e per megajoule)ComSvcFuelCI: Average carbon intensity fuels used commercial service vehicles (grams CO2e per megajoule)HvyTrkFuelCI: Average carbon intensity fuels used heavy trucks (grams CO2e per megajoule)TransitVanFuelCI: Average carbon intensity fuels used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuels used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuels used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_base_year_hvytrk_dvmt.csv","chapter":"7 Model Inputs","heading":"7.7.41 region_base_year_hvytrk_dvmt.csv","text":"input file OPTIONAL. needed user wants adjust heavy truck dvmt base yearHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueHvyTrkDvmt: Average daily vehicle miles travel roadways region heavy trucks base yearHvyTrkDvmtUrbanProp: Proportion Region heavy truck daily vehicle miles travel occurring urbanized area roadwaysHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_carsvc_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.7.42 region_carsvc_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion car services.CarSvcAutoPropIcev: Proportion car service automobile travel powered internal combustion engine powertrainsCarSvcAutoPropHev: Proportion car service automobile travel powered hybrid electric powertrainsCarSvcAutoPropBev: Proportion car service automobile travel powered battery electric powertrainsCarSvcLtTrkPropIcev: Proportion car service light truck travel powered internal combustion engine powertrainsCarSvcLtTrkPropHev: Proportion car service light truck travel powered hybrid electric powertrainsCarSvcLtTrkPropBev: Proportion car service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_comsvc_lttrk_prop.csv","chapter":"7 Model Inputs","heading":"7.7.43 region_comsvc_lttrk_prop.csv","text":"input file defines proportion commerical vehicles light trucks.ComSvcLtTrkProp: Regional proportion commercial service vehicles light trucksHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_comsvc_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.7.44 region_comsvc_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion commercial vehicles.ComSvcAutoPropIcev: Proportion commercial service automobile travel powered internal combustion engine powertrainsComSvcAutoPropHev: Proportion commercial service automobile travel powered hybrid electric powertrainsComSvcAutoPropBev: Proportion commercial service automobile travel powered battery electric powertrainsComSvcLtTrkPropIcev: Proportion commercial service light truck travel powered internal combustion engine powertrainsComSvcLtTrkPropHev: Proportion commercial service light truck travel powered hybrid electric powertrainsComSvcLtTrkPropBev: Proportion commercial service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_comsvc_veh_mean_age.csv","chapter":"7 Model Inputs","heading":"7.7.45 region_comsvc_veh_mean_age.csv","text":"input file contains average age commercial service vehiclesAveComSvcVehicleAge: average age commercial service vehiclesHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_hh_driver_adjust_prop.csv","chapter":"7 Model Inputs","heading":"7.7.46 region_hh_driver_adjust_prop.csv","text":"file specifies relative driver licensing rate relative model estimation data year order account observed projected changes licensing rates.Drv15to19AdjProp: Target proportion unadjusted model number drivers 15 19 years old (1 = adjustment)Drv20to29AdjProp: Target proportion unadjusted model number drivers 20 29 years old (1 = adjustment)Drv30to54AdjProp: Target proportion unadjusted model number drivers 30 54 years old (1 = adjustment)Drv55to64AdjProp: Target proportion unadjusted model number drivers 55 64 years old (1 = adjustment)Drv65PlusAdjProp: Target proportion unadjusted model number drivers 65 older (1 = adjustment)snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_hvytrk_powertrain_prop.csv","chapter":"7 Model Inputs","heading":"7.7.47 region_hvytrk_powertrain_prop.csv","text":"input file OPTIONAL. needed user wants modify powertrain proportion heavy duty trucks.HvyTrkPropIcev: Proportion heavy truck travel powered internal combustion engine powertrainsHvyTrkPropHev: Proportion heavy truck travel powered hybrid electric powertrainsHvyTrkPropBev: Proportion heavy truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_prop_externalities_paid.csv","chapter":"7 Model Inputs","heading":"7.7.48 region_prop_externalities_paid.csv","text":"file supplies data climate change social costs.PropClimateCostPaid: Proportion climate change costs paid users (.e. ratio carbon taxes climate change costsPropOtherExtCostPaid: Proportion social costs paid usersHere snapshot file:","code":""},{"path":"model-inputs.html","id":"vestate-region_road_cost.csv","chapter":"7 Model Inputs","heading":"7.7.49 region_road_cost.csv","text":"file supplies data different types road costsRoadBaseModCost: Average base modernization cost per light-duty vehicle mile traveled (dollars per vehicle mile). Base modernization includes roadway improvements exclusive addition lanes.RoadPresOpMaintCost: Average road preservation, operations, maintenance cost per light-duty vehicle mile traveled (dollars per vehicle mile).RoadOtherCost: Average road cost (e.g. administration, planning, project development, safety) per light-duty vehicle mile traveled (dollars per vehicle mile).FwyLnMiCost: Average cost build one freeway lane-mile (dollars per lane-mile)ArtLnMiCost: Average cost build one arterial lane-mile (dollars per lane-mile)HvyTrkPCE: Passenger car equivalent (PCE) heavy trucks. PCE indicates number light-duty vehicles heavy truck equivalent calculating road capacity.snapshot file:","code":""},{"path":"model-inputs.html","id":"verpat-inputs","chapter":"7 Model Inputs","heading":"7.8 VERPAT Input Files","text":"scenario inputs split four (4) categories: Built Environment, Demand, Policy, Supply. two ways specify inputs. CSV Inputs specified *.csv file JSON Inputs specified model_parameters.json file. users encouraged change inputs build different scenarios. RPAT VERPAT connection RPAT inputs VERPAT inputs.Built Environment\n- CSV Inputs\n- bzone_pop_emp_prop.csvDemand\n- CSV Inputs\n- region_trips_per_cap.csv\n- azone_employment_by_naics.csv\n- azone_hh_pop_by_age.csv\n- azone_gq_pop_by_age.csv\n- azone_hhsize_targets.csv\n- azone_per_cap_inc.csv\n- azone_relative_employment.csv\n- region_truck_bus_vmt.csv\n- JSON Inputs\n- BaseLtVehDvmt\n- BaseFwyArtProp\n- EmploymentGrowthTransport SupplyCSV Inputs\nmarea_lane_miles.csv\nmarea_rev_miles_pc.csv\nmarea_lane_miles.csvmarea_rev_miles_pc.csvPolicy\n- CSV Inputs\n- region_commute_options.csv\n- azone_its_prop.csv\n- region_light_vehicles.csv\n- marea_parking_growth.csv\n- JSON Inputs\n- AutoCostGrowth\n- FwyLaneMiGrowth\n- ArtLaneMiGrowth\n- BusRevMiPCGrowth\n- RailRevMiPCGrowth\n- VmtCharge","code":""},{"path":"model-inputs.html","id":"model-parameters","chapter":"7 Model Inputs","heading":"7.8.0.1 Model Parameters","text":"two ways specify model parameters. CSV Parameters specified *.csv file JSON Parameters model_parameters.json file. provided access model parameters, encouraged use default parameter values unless directed use alternatives. Editing modeling parameters based research pertaining local data sources may result unpredictable results.Model ParametersCSV Parameters\nmodel_accident_rates.csv\nmodel_fuel_prop_by_veh.csv\nmodel_fuel_composition_prop.csv\nmodel_fuel_co2.csv\nmodel_place_type_elasticities.csv\nmodel_place_type_relative_values.csv\nmodel_tdm_ridesharing.csv\nmodel_tdm_transit.csv\nmodel_tdm_transitlevels.csv\nmodel_tdm_vanpooling.csv\nmodel_tdm_workschedule.csv\nmodel_tdm_workschedulelevels.csv\nmodel_transportation_costs.csv\nmodel_veh_mpg_by_year.csv\nmodel_phev_range_prop_mpg_mpkwh.csv\nmodel_hev_prop_mpg.csv\nmodel_ev_range_prop_mpkwh.csv\nmodel_accident_rates.csvmodel_fuel_prop_by_veh.csvmodel_fuel_composition_prop.csvmodel_fuel_co2.csvmodel_place_type_elasticities.csvmodel_place_type_relative_values.csvmodel_tdm_ridesharing.csvmodel_tdm_transit.csvmodel_tdm_transitlevels.csvmodel_tdm_vanpooling.csvmodel_tdm_workschedule.csvmodel_tdm_workschedulelevels.csvmodel_transportation_costs.csvmodel_veh_mpg_by_year.csvmodel_phev_range_prop_mpg_mpkwh.csvmodel_hev_prop_mpg.csvmodel_ev_range_prop_mpkwh.csvJSON Parameters\nAnnVmtInflator\nBaseCostPerMile\nDvmtBudgetProp\nFuelCost\nKwhCost\nGasTax\nLtTruckProp\nTranRevMiAdjFactor\nTruckVmtGrowthMultiplier\nWorkVmtProp\nAnnVmtInflatorBaseCostPerMileDvmtBudgetPropFuelCostKwhCostGasTaxLtTruckPropTranRevMiAdjFactorTruckVmtGrowthMultiplierWorkVmtProp","code":""},{"path":"model-inputs.html","id":"input-files-to-change","chapter":"7 Model Inputs","heading":"7.8.1 Input Files to Change","text":"user change input files described .","code":""},{"path":"model-inputs.html","id":"built-environment","chapter":"7 Model Inputs","heading":"7.8.2 Built Environment","text":"","code":""},{"path":"model-inputs.html","id":"csv-inputs","chapter":"7 Model Inputs","heading":"7.8.2.1 CSV Inputs","text":"","code":""},{"path":"model-inputs.html","id":"bzone_pop_emp_prop.csv","chapter":"7 Model Inputs","heading":"7.8.2.2 bzone_pop_emp_prop.csv","text":"Population Jobs Place Type: file contains distribution population employment among 13 place types base future year. See explanation infomation regarding place types. column, year, must sum one (1). acceptable land use (.e. value 0) certain categories.yearly TAZ employment population totals summed 13 place type scaled total one employment population. allocation growth base future years population employment 13 place types captured rows containing future years. discussion population jobs place type input describes allocate existing land use 13 place types. similar approach can used allocate expected growth spatial planning resources TAZ Census Block Group level forecasts place types.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"demand","chapter":"7 Model Inputs","heading":"7.8.3 Demand","text":"","code":""},{"path":"model-inputs.html","id":"csv-inputs-1","chapter":"7 Model Inputs","heading":"7.8.3.1 CSV Inputs","text":"","code":""},{"path":"model-inputs.html","id":"region_trips_per_cap.csv","chapter":"7 Model Inputs","heading":"7.8.3.2 region_trips_per_cap.csv","text":"Auto transit trips per capita: file contains regional averages auto transit trips per capita per day base year.Auto regional average auto trips per capita, including drive alone shared ride travel. data can derived National Household Travel Survey region local household travel survey regional travel demand forecasting model.Transit regional average transit trips per capita, including walk drive access transit. data can derived National Transit Database annual database contains “service” table annual transit trip data transit operator local household travel survey regional travel demand forecasting model.snapshot files:","code":""},{"path":"model-inputs.html","id":"azone_employment_by_naics.csv","chapter":"7 Model Inputs","heading":"7.8.3.3 azone_employment_by_naics.csv","text":"Employment: file contains employment data counties make region. file derived County Business Pattern (CBP) data county. Industries categorized North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories :n1_4: 1- 4 employeesn5_9: 5-9 employeesn10_19: 10-19 employeesn20_99: 20-99 employeesn100_249: 100-249 employeesn250_499: 250-499 employeesn500_999: 500-999 employeesn1000: 1,000 Employee Size Classn1000_1: 1,000-1,499 employeesn1000_2: 1,500-2,499 employeesn1000_3: 2,500 4, 999 Employeesn1000_4: 5,000 employeesWhile county field required present, business synthesis process require meaningful value therefore users may simply enter ‘region’. consistency naming “region” maintained across files contains label “county” “Geo”. also necessary use detailed NAICS categories available; current business synthesis model subsequent models use level detail (although future versions model may) – minimum, number establishments employment types can provided size category. Regions significant employment industries government public administration covered CBP may need add records file cover type employment accurately match employment totals region. two additional fields contained file :emp: Total number employeesest: Total number establishmentsHere snapshot file:","code":""},{"path":"model-inputs.html","id":"azone_hh_pop_by_age.csv","chapter":"7 Model Inputs","heading":"7.8.3.4 azone_hh_pop_by_age.csv","text":"Household population: file contains population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusFuture year data must developed user; many regions population forecasts available regional state agencies /local academic sources. employment data inputs future data need county specific. Rather, regional totals age group can entered file value “region” entered county field.snapshot file:","code":""},{"path":"model-inputs.html","id":"azone_gq_pop_by_age.csv-construction","chapter":"7 Model Inputs","heading":"7.8.3.5 azone_gq_pop_by_age.csv :construction:","text":"Group quarter population: file contains group quarters population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusHere snapshot file:","code":""},{"path":"model-inputs.html","id":"azone_hhsize_targets.csv-construction","chapter":"7 Model Inputs","heading":"7.8.3.6 azone_hhsize_targets.csv :construction:","text":"Household size (azone_hhsize_targets.csv): file contains household specific targets. contain two household specific attributes:AveHhSize: Average household size households (non-group quarters)Prop1PerHh: Proportion households (non-group quarters) one personHere snapshot file:","code":""},{"path":"model-inputs.html","id":"azone_per_cap_inc.csv","chapter":"7 Model Inputs","heading":"7.8.3.7 azone_per_cap_inc.csv","text":"Regional income: file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2000 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2000 column labels current year. example, data obtained year 2005 dollars column labels file shown become HHIncomePC.2005 GQIncomePC.2005.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"azone_relative_employment.csv","chapter":"7 Model Inputs","heading":"7.8.3.8 azone_relative_employment.csv","text":"Relative employment: file contains ratio workers persons age cohort model year vs. estimation data year. relative employment value age group, employment rate age group relative employment rate model estimation year data used adjust relative employment reflect changes relative employment years. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year vs. estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year vs. estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year vs. estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year vs. estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year vs. estimation data yearHere snapshot file:","code":""},{"path":"model-inputs.html","id":"region_truck_bus_vmt.csv","chapter":"7 Model Inputs","heading":"7.8.3.9 region_truck_bus_vmt.csv","text":"Truck bus vmt: file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv #EDIT (marea_rev_miles_pc.csv?) user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"json-inputs","chapter":"7 Model Inputs","heading":"7.8.3.10 JSON Inputs","text":"","code":""},{"path":"model-inputs.html","id":"baseltvehdvmt","chapter":"7 Model Inputs","heading":"7.8.3.11 BaseLtVehDvmt","text":"Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"basefwyartprop","chapter":"7 Model Inputs","heading":"7.8.3.12 BaseFwyArtProp","text":"Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"employmentgrowth","chapter":"7 Model Inputs","heading":"7.8.3.13 EmploymentGrowth","text":"Employment Growth (EmploymentGrowth): variable represents growth rate employment region base year future year. rate 1 indicates changes overall employment, value 1 indicates growth (e.g., 1.5 = 50% growth) value less 1 indicates decline employment. defined model_parameters.json follows:","code":"{\n    \"NAME\": \"EmploymentGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\": \"double\",\n    \"UNITS\": \"multiplier\",\n    \"PROHIBIT\": \"\",\n    \"ISELEMENTOF\": \"\"\n}"},{"path":"model-inputs.html","id":"transport-supply-1","chapter":"7 Model Inputs","heading":"7.8.4 Transport Supply","text":"","code":""},{"path":"model-inputs.html","id":"csv-inputs-2","chapter":"7 Model Inputs","heading":"7.8.4.1 CSV Inputs","text":"","code":""},{"path":"model-inputs.html","id":"marea_lane_miles.csv","chapter":"7 Model Inputs","heading":"7.8.4.2 marea_lane_miles.csv","text":"Road lane miles: file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"marea_rev_miles_pc.csv","chapter":"7 Model Inputs","heading":"7.8.4.3 marea_rev_miles_pc.csv","text":"Transit revenue miles: file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"policy","chapter":"7 Model Inputs","heading":"7.8.5 Policy","text":"","code":""},{"path":"model-inputs.html","id":"csv-inputs-3","chapter":"7 Model Inputs","heading":"7.8.5.1 CSV Inputs","text":"","code":""},{"path":"model-inputs.html","id":"region_commute_options.csv","chapter":"7 Model Inputs","heading":"7.8.5.2 region_commute_options.csv","text":"Percentage employees offered commute options: file contains assumptions availability participation work based travel demand management programs. policies ridesharing programs, transit pass programs, telecommuting alternative work schedule programs, vanpool programs. , user enters proportion workers participate (data items “Participation” suffix). one program, transit subsidy, user must also enter subsidy level dollars TransitSubsidyLevel data item.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"azone_its_prop.csv","chapter":"7 Model Inputs","heading":"7.8.5.3 azone_its_prop.csv","text":"Percent road miles treatment: file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"region_light_vehicles.csv","chapter":"7 Model Inputs","heading":"7.8.5.4 region_light_vehicles.csv","text":"Bicycling/light vehicles targets: file contains input data non-motorized vehicle model. VERPAT, non-motorized vehicles bicycles, also electric bicycles, segways, similar vehicles small, light-weight can travel bicycle speeds slightly higher. parameters follows:TargetProp: non-motorized vehicle ownership rate (average ratio non-motorized vehicles driver age population)Threshold: single-occupant vehicle (SOV) tour mileage threshold used SOV travel proportion model. upper limit tour lengths suitable reallocation non-motorized modes.PropSuitable: proportion SOV travel suitable non-motorized vehicle travel. variable describes proportion SOV tours within mileage threshold non-motorized vehicles might substituted. variable takes account factors weather trip purpose.non-motorized vehicle model predicts ownership use non-motorized vehicles (non-motorized vehicles bicycles, also electric bicycles, segways similar vehicles small, light-weight can travel bicycle speeds slightly higher bicycle speeds). core concept model non-motorized vehicle usage primarily substitute short-distance SOV travel. Therefore, model estimates proportion household vehicle travel occurs short-distance SOV tours. model determines maximum potential household VMT diverted non-motorized vehicles, also dependent availability non-motorized vehicles.\nNote bike share programs (BSP) serve increase availability non-motorized vehicles can taken account increasing TargetProp variable. Use national estimates non-motorized ownership regional estimates non-motorized ownership available (unless region notably atypical levels bicycle usage). See Bicycle Ownership United States analysis regional differences.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"marea_parking_growth.csv","chapter":"7 Model Inputs","heading":"7.8.5.5 marea_parking_growth.csv","text":"Increase parking cost supply: file contains information allows effects policies workplace parking charges “cash-buy-back” programs tested. input parameters follows entered base future year:PropWorkParking: proportion employees park workPropWorkCharged: proportion employers charge parkingPropCashOut: proportion employment parking converted free pay “cash-buy-back” type programPropOtherCharged: proportion parking freeParkingCost.2000: average daily parking cost 2000 year USD. order use base year dollars just replace 2000 column labels base year. variable average daily parking cost incur fee park. paid parking varies across region, “PkgCost” value reflect average parking fees, weighted supply – parking Center City, average heavily weighted toward price Center City.snapshot file:","code":""},{"path":"model-inputs.html","id":"json-inputs-1","chapter":"7 Model Inputs","heading":"7.8.5.6 JSON Inputs","text":"","code":""},{"path":"model-inputs.html","id":"autocostgrowth","chapter":"7 Model Inputs","heading":"7.8.5.7 AutoCostGrowth","text":"% Increase Auto Operating Cost (AutoCostGrowth): parameter reflects proportional increase auto operating cost. can used test different assumptions future gas prices effects increased gas taxes. value 1.5 multiplies base year operating costs 1.5 thus reflects 50% increase. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"AutoCostGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"fwylanemigrowth","chapter":"7 Model Inputs","heading":"7.8.5.8 FwyLaneMiGrowth","text":"FwyLaneMiGrowth: variable indicates percent increase supply freeways lane miles future year compared base year. default, transportation supply assumed grow line population increase; therefore value 1 indicates growth proportion population growth. value less 1 indicates less freeway lane mile supply, per person, future. value 1 indicates faster freeway expansion population growth. defined model_parameters.json follows:","code":"{\n    \"NAME\": \"FwyLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"artlanemigrowth","chapter":"7 Model Inputs","heading":"7.8.5.9 ArtLaneMiGrowth","text":"ArtLaneMiGrowth: variable indicates percent increase supply arterial lane miles future year compared base year. similar value freeway except measures arterial lane mile growth. also proportional population growth. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"ArtLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"busrevmipcgrowth","chapter":"7 Model Inputs","heading":"7.8.5.10 BusRevMiPCGrowth","text":"BusRevMiPCGrowth: percent increase transit revenue miles per capita bus. behaves similar way freeway rail values value 1 indicates per capita revenue miles stays constant. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BusRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"railrevmipcgrowth","chapter":"7 Model Inputs","heading":"7.8.5.11 RailRevMiPCGrowth","text":"RailRevMiPCGrowth: percent increase transit revenue miles per capita rail. encompasses rail modes, light rail commuter rail. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"RailRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"vmtcharge","chapter":"7 Model Inputs","heading":"7.8.5.12 VmtCharge","text":"Auto Operating Surcharge Per VMT (VmtCharge): cost cents per mile levied auto users form VMT charge. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"VmtCharge\",\n    \"VALUE\": \"0.05\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"model-parameters-1","chapter":"7 Model Inputs","heading":"7.8.6 Model Parameters","text":"Users can modify parameters test alternative scenarios. e.g. users can use model_veh_mpg_by_year.csv test alternative vehicle development scenarios, improved technology /fuel economy standards lead higher fuel economies.","code":""},{"path":"model-inputs.html","id":"csv-inputs-4","chapter":"7 Model Inputs","heading":"7.8.6.1 CSV Inputs","text":"","code":""},{"path":"model-inputs.html","id":"model_accident_rates.csv","chapter":"7 Model Inputs","heading":"7.8.6.2 model_accident_rates.csv","text":"Accident Rates: Road safety impacts calculated factoring amount VMT. following national average rates, Fatality Analysis Reporting System General Estimates System (2009) US Department Transportation, applied calculate number fatal injury accidents value property damage:Fatal: 1.14 per 100 Million Miles TraveledInjury: 51.35 per 100 Million Miles TraveledProperty damage: 133.95 per 100 Million Miles TraveledHere snapshot file:","code":""},{"path":"model-inputs.html","id":"model_fuel_prop_by_veh.csv","chapter":"7 Model Inputs","heading":"7.8.6.3 model_fuel_prop_by_veh.csv","text":"Vehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.PropDiesel: proportion fleet uses dieselPropCng: proportion fleet uses CNGPropGas: proportion fleet uses gasolineHere snapshot file:","code":""},{"path":"model-inputs.html","id":"model_fuel_composition_prop.csv","chapter":"7 Model Inputs","heading":"7.8.6.4 model_fuel_composition_prop.csv","text":"Fuel composition: file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :GasPropEth: average ethanol proportion gasoline soldDieselPropBio: average biodiesel proportion diesel soldHere snapshot file:","code":""},{"path":"model-inputs.html","id":"model_fuel_co2.csv","chapter":"7 Model Inputs","heading":"7.8.6.5 model_fuel_co2.csv","text":"Emission Rate: emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. file used convert fuel use CO2 equivalent emissions.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_place_type_elasticities.csv","chapter":"7 Model Inputs","heading":"7.8.6.6 model_place_type_elasticities.csv","text":"file contains elasticities four performance metrics:VMT – Following estimate travel demand incorporates induced demand, adjustment made travel demand accounts changes growth place types used model describe urban form. changes interpreted changes design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix). effect travel demand determined changes VMT urban form categories, shown table . elasticities shown table multiplied D values place type. D values proportion values place type relative regional average, set 1.0.VehicleTrips – change number vehicle trips calculated using set elasticities Index 4D Values (2001) pivots current number vehicle trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.TransitTrips – change number transit trips calculated using set elasticities Index 4D Values (2001) pivots current number transit trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.Walking – elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. product elasticity D value applied place type growth quantities scenario calculated percentage increase decrease walking new residents region relative current place type distribution.snapshot file:","code":""},{"path":"model-inputs.html","id":"model_place_type_relative_values.csv","chapter":"7 Model Inputs","heading":"7.8.6.7 model_place_type_relative_values.csv","text":"file contains D values, proportional values 13 place types (Bzones) relative regional average, five Ds used VERPAT - design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix).\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_ridesharing.csv","chapter":"7 Model Inputs","heading":"7.8.6.8 model_tdm_ridesharing.csv","text":"Travel Demand Management: Ridesharing: ridesharing Travel Demand Management file contains parameters describing effectiveness ridesharing programs place type. proportion employees participating ridesharing program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. ridesharing sub-model computes anticipated level VMT reduction resulting implementation ridesharing, based place type household lives , using effectiveness values shown parameter file. Previous studies determined level ridesharing participation less rural suburban areas, compared -urban areas. Typically, people carpool urbanized areas due presence parking charges, potential difficulties finding parking, disincentives typically present urbanized areas.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_transit.csv","chapter":"7 Model Inputs","heading":"7.8.6.9 model_tdm_transit.csv","text":"Travel Demand Management: Transit Fares: transit fare Travel Demand Management files parameters effectiveness (level VMT reduction) fare subsidy values employer. subsidized/discounted transit model begins evaluating level participation within region. Monte Carlo processes used identify households participate transit pass programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model allows selection one four potential subsidy levels (also policy inputs), influence level VMT reduction based level subsidy applied place type. anticipated level VMT reduction reduced account proportion work travel overall daily travel.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_transitlevels.csv","chapter":"7 Model Inputs","heading":"7.8.6.10 model_tdm_transitlevels.csv","text":"Travel Demand Management: Transit Subsidy Levels: file contains dollar value match subsidy levels used model_tdm_transit.csv file.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_vanpooling.csv","chapter":"7 Model Inputs","heading":"7.8.6.11 model_tdm_vanpooling.csv","text":"Travel Demand Management: Vanpooling: file contains parameters describing effectiveness terms VMT reductions vanpooling programs across three levels employee involvement.\nvanpool program sub-model operates evaluating likely level participation. Monte Carlo processes used identify households participate vanpool programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. employers participate program categorized three levels involvement low medium high. level involvement reflects extent employer actively facilitate promote vanpooling. example, low level involvement might represent employer organizes minimal number vanpools. high level involvement represent employer extensive vanpooling program cover large number employees. Based level involvement, reduction VMT estimated basis values file.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_workschedule.csv","chapter":"7 Model Inputs","heading":"7.8.6.12 model_tdm_workschedule.csv","text":"Travel Demand Management: Work Schedule: file contains parameters describe effectiveness different participation levels three different telecommuting alternative work schedules.\ntelecommuting alternative work schedule model first evaluates likely level participation throughout region terms telecommuting alternatively-works schedules. Monte Carlo processes used identify households participate telecommuting programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model determines type programs might implemented. Three potential alternatives offered including:4/40 Schedule: 4 days per week 40 hours per week9/80 Schedule: working 4 days every week average 80 hours 2 weeksTelecommuting: Workers may work 1 2 days week remotelyOnce option identified level participation, estimated VMT determined basis parameters file.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_tdm_workschedulelevels.csv","chapter":"7 Model Inputs","heading":"7.8.6.13 model_tdm_workschedulelevels.csv","text":"Travel Demand Management: Work Schedule Participation Levels: file describes proportion employees participating program corresponding participation levels used model_tdm_workschedule.csv file.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_transportation_costs.csv","chapter":"7 Model Inputs","heading":"7.8.6.14 model_transportation_costs.csv","text":"Transportation Costs: file contains unit cost rates transportation infrastructure investments operating costs transit fare revenue. parameters used calculations transportation costs performance metrics.\nsource transit capital, operating costs, fare revenue NTD, particular National Transit Profile available NTDB website. Costs available variety index formats, e.g. cost per revenue mile hour; cost per passenger trip used VERPAT.\nsource highway infrastructure costs FHWA’s Highway Economic Requirements System model, . Information obtained Chapter 6 2005 Technical Report US states (FHWA, 2005). Table 8-1 provides unit costs (per lane mile) Rural Urban highway systems, distinguishes among three functional classes: interstates, freeways expressways; principal arterials; minor arterials collectors. Costs estimates provided following improvements:Reconstruction wideningReconstruct pavementResurface widen lanesResurface pavementImprove shouldersAdditional choices offered distinguish adding lane “normal” vs. “high cost”, also pavement realignment, also normal vs. high cost conditions. practical reasons, decided use “new construction” (also includes adding lanes) costs basis cost estimates, ignore categories reconstruction, resurfacing, realignment. construction costs include right way, construction, “small” allowance bridges support facilities.\ninfrastructure costs focus “urban” system, rural, also makes possible differentiate three size classes: Small Urban, Small Urbanized, Large Urbanized. numbers 2002 dollars; FHWA advises escalation current dollars using NHCCI, available online http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); report VERPAT escalates uses Index escalate 2010 values.\nparameter values file average values per lane mile, simplifying calculations highway costs just differentiate investments freeway vs. arterial functional class roads.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_veh_mpg_by_year.csv","chapter":"7 Model Inputs","heading":"7.8.6.15 model_veh_mpg_by_year.csv","text":"Vehicle fuel economy (model_veh_mpg_by_year.csv): file contains estimates forecasts average fuel economy power economy miles per gallon autos, light trucks, heavy trucks (trucks) miles per kilowatt trains vehicle model year. Note fleet average year. average new vehicles sold year. fuel economy fuel types measured gasoline equivalent gallons (.e. energy content gallon gasoline). file used calculations fuel consumption.\nsnapshot file:","code":""},{"path":"model-inputs.html","id":"model_phev_range_prop_mpg_mpkwh.csv","chapter":"7 Model Inputs","heading":"7.8.6.16 model_phev_range_prop_mpg_mpkwh.csv","text":"Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:","code":""},{"path":"model-inputs.html","id":"model_hev_prop_mpg.csv","chapter":"7 Model Inputs","heading":"7.8.6.17 model_hev_prop_mpg.csv","text":"Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:","code":""},{"path":"model-inputs.html","id":"model_ev_range_prop_mpkwh.csv","chapter":"7 Model Inputs","heading":"7.8.6.18 model_ev_range_prop_mpkwh.csv","text":"Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:","code":""},{"path":"model-inputs.html","id":"json-inputs-2","chapter":"7 Model Inputs","heading":"7.8.6.19 JSON Inputs","text":"","code":""},{"path":"model-inputs.html","id":"annvmtinflator","chapter":"7 Model Inputs","heading":"7.8.6.20 AnnVmtInflator","text":"Annual VMT inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"basecostpermile","chapter":"7 Model Inputs","heading":"7.8.6.21 BaseCostPerMile","text":"Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"dvmtbudgetprop","chapter":"7 Model Inputs","heading":"7.8.6.22 DvmtBudgetProp","text":"Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"fuelcost","chapter":"7 Model Inputs","heading":"7.8.6.23 FuelCost","text":"Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"kwhcost","chapter":"7 Model Inputs","heading":"7.8.6.24 KwhCost","text":"Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"gastax","chapter":"7 Model Inputs","heading":"7.8.6.25 GasTax","text":"Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"lttruckprop","chapter":"7 Model Inputs","heading":"7.8.6.26 LtTruckProp","text":"Light Truck Proportions (LtTruckProp): proportion household vehicles light trucks (SUVs, pickup trucks) opposed autos. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"LtTruckProp\",\n    \"VALUE\": \"0.45\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"tranrevmiadjfactor","chapter":"7 Model Inputs","heading":"7.8.6.27 TranRevMiAdjFactor","text":"Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"truckvmtgrowthmultiplier","chapter":"7 Model Inputs","heading":"7.8.6.28 TruckVmtGrowthMultiplier","text":"Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"model-inputs.html","id":"workvmtprop","chapter":"7 Model Inputs","heading":"7.8.6.29 WorkVmtProp","text":"Work VMT Proportion (WorkVmtProp): proportion household VMT takes place commute work purposes; used differentiate travel purposes use estimating overall VMT reductions targeted commute work. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"WorkVmtProp\",\n    \"VALUE\": \"0.25\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"validation-and-troubleshooting.html","id":"validation-and-troubleshooting","chapter":"8 Validation and Troubleshooting","heading":"8 Validation and Troubleshooting","text":"model run produce time stamped Log.txt file. log file first thing user reference troubleshooting errors. log file point input files errors help define error. model producing log file, indicates deep-rooted issue related model set-, installation, one packages.common errors users watch include:Files data years model run years generate error, files can data model run yearsConsistent geography names across input filesInput files different modules need consistent\nZero land area azone location type non-zero values households azone location type\nZero land area azone location type non-zero values employment azone location type\nZero land area azone location type non-zero values households azone location typeZero land area azone location type non-zero values employment azone location type","code":""},{"path":"validation-and-troubleshooting.html","id":"validation-1","chapter":"8 Validation and Troubleshooting","heading":"8.1 Validation","text":"section summarizes additional detail validation VisionEval models key considerations concept. concept highlight respective model inputs assumptions can changed better match observed local patterns trends. outputs covered handful can used validate VE model.","code":""},{"path":"validation-and-troubleshooting.html","id":"household-synthesis-and-land-use-validation","chapter":"8 Validation and Troubleshooting","heading":"8.1.1 Household Synthesis and Land Use Validation","text":"Two key metrics validate population income due influential nature metrics model results. additional considerations follows:choice geographies used VisionEval can influence validation results. example, economic conditions driver licensing rates vary significantly across modeled area might good idea define Azones reflect differences.VESimHouseholds package processes PUMS data derive parameters several sub-modules. default PUMS files inst/extdata folder Oregon replaced data area modeling. done simply replacing PUMS data inst/extdata folder local data, processed several modules part normal model run. requires rebuilding VESimHousehold package, information can found Module Build Process chapter.average household size (AveHhSize) proportion one-person households (Prop1PerHh) can set azone_hhsize_targets.csv file.Care taken match real dollar amount azone_per_cap_inc.csv files dollar values year specified file account inflation.relative employment rate age group Azone can specified match observed differences across metropolitan area levels various points economic cycles. Lower employment rates, especially certain age groups, reflected azone_relative_employment.csv. relative employment rate relative average employment rate worker group PUMS data (e.g., value 0.5 entered employment rate 20-29 age group one Azone half employment rate persons age group metropolitan area).VELandUse package also uses PUMS data, can adjusted two ways:\nmix single family versus multi-family households reflect local patterns PUMS data modeled region used instead default data Oregon. See [ insert link build process PUMS case study]\nproportion households residing mixed-use neighborhoods within Bzone can optionally set bzone_urban-mixed-use_prop.csv file. adjustments subjective, definition “urban mixed-use” neighborhoods derived Claritas data NHTS imprecise.\nmix single family versus multi-family households reflect local patterns PUMS data modeled region used instead default data Oregon. See [ insert link build process PUMS case study]proportion households residing mixed-use neighborhoods within Bzone can optionally set bzone_urban-mixed-use_prop.csv file. adjustments subjective, definition “urban mixed-use” neighborhoods derived Claritas data NHTS imprecise.","code":""},{"path":"validation-and-troubleshooting.html","id":"household-travel-behavior-validation","chapter":"8 Validation and Troubleshooting","heading":"8.1.2 Household Travel Behavior Validation","text":"One key metric validate household travel behavior household DVMT. VisionEval models network, users prioritize validating household DVMT using NHTS local household travel survey data. Users can also use Highway Statistics reports imputed annual HPMS estimates validate higher levels geography, state metropolitan area level.Care taken choosing validation targets match model predictions. VE household travel modules predict household travel regardless travel occurs within modeled region. Therefore results compared household survey data possible provide similarly defined estimates.Care similarly taken comparing model results daily roadway VMT data, reported Highway Statistics reports imputed annual HPMS estimates. comparisons made model estimates roadway DVMT calculated CalculateRoadDvmt module used comparison (rather HPMS data defined vehicles miles roadways within specific geography).modeled road DVMT estimates match base year prior years modeled household DVMT trends checked road DVMT trends. particular, check whether reduction DVMT (reduction DVMT growth rate) observed Great Recession increase DVMT (increase DVMT growth rate) afterwards reflected modeled household DVMT. , values following files checked adjusted warranted:opportunities adjust parameters VEHouseholdTravel package, derived NHTS PUMS input data. Note optionally specified driver licensing rates described can substantially affect daily household VMT. possible specify percentage household SOV travel diverted bicycles azone_prop_sov_dvmt_diverted.csv file better match observed local values.","code":""},{"path":"validation-and-troubleshooting.html","id":"vehicles-and-fuels-validation","chapter":"8 Validation and Troubleshooting","heading":"8.1.3 Vehicles and Fuels Validation","text":"Another important metric validate vehicle ownership, strong correlation household DVMT.modeled DVMT matches validation data fuel consumption (e.g. light-duty vehicle fuel consumption reported Highway Statistics), values ldv_powertrain_characteristics.csv current past years can adjusted achieve match. Fuel consumption may match several reasons :\ndefinition crossover vehicles light trucks vs. autos used vehicle type model match average fuel consumption characteristics ldv_powertrain_characteristics.csv file.\naverage fuel consumption characteristics ldv_powertrain_characteristics.csv represent real world fuel economy.\ndefinition crossover vehicles light trucks vs. autos used vehicle type model match average fuel consumption characteristics ldv_powertrain_characteristics.csv file.average fuel consumption characteristics ldv_powertrain_characteristics.csv represent real world fuel economy.parameters VEHouseholdVehicles package self-calibrating. However, relative driver licensing rate age group can coded region_hh_driver_adjust_prop.csv file used account reduction driver licensing rates among young elderly drivers.Users can also use azone_hh_ave_veh_per_driver.csv reduce increase vehicle ownership Azone level. noted file inherently reduces sensitivity AdjustVehicleOwnership module.validation data available commercial service vehicles, heavy trucks, public transit vehicles changes can made respective powertrain characteristics files vehicle types match observed values.Rebuilding VEPowertrainsAndFuels package good practice. default data inputs VEPowertrainsAndFuels package substantially affect modeled fuel consumption vehicle emissions rates. default inputs contained inst/extdata folder source package. Note package needs built (installed) source package adjustments made order changes effect. information can found Module Build Process chapter.","code":""},{"path":"validation-and-troubleshooting.html","id":"congestion-and-roadway-travel-validation","chapter":"8 Validation and Troubleshooting","heading":"8.1.4 Congestion and Roadway Travel Validation","text":"VETravelPerformance package self-calibrating. However, user must provide several estimates used constraints process:\nEstimates urbanized area light-duty vehicle heavy truck VMT (UrbanLdvDvmt UrbanHvyTrkDvmt, respectively) must coded marea_base_year_dvmt.csv input file.\nEstimates urbanized area light-duty vehicle heavy truck VMT (UrbanLdvDvmt UrbanHvyTrkDvmt, respectively) must coded marea_base_year_dvmt.csv input file.user must also provide regional estimate heavy truck VMT (HvyTrkDvmt) region_base_year_dvmt.csv consistent urbanized area heavy truck VMT estimates.user check basis used estimating commercial service VMT (ComSvcDvmtGrowthBasis) heavy truck VMT (HvyTrkDvmtGrowthBasis).","code":""},{"path":"validation-and-troubleshooting.html","id":"additional-customizations","chapter":"8 Validation and Troubleshooting","heading":"8.2 Additional Customizations","text":"VESimHouseholds PowertrainsAndFuels packages two prioritized re-estimating local data. Users option customize re-estimate model packages based local data. additional packages built-estimation scripts described .Note: deeper dive customize packages various data available local estimation, users reference Estimation VisionEval Module Build Process chapters.VETravelPerformance: LoadDefaultRoadDvmtValues script pulls datasets 2010 Highway Statistics reports used calculate state urbanized area travel statistics described . data Transportation Energy Databook (Edition 31) used calculate ratio commercial service vehicle DVMT household DVMT. datasets “inst/extdata” folder package. Documentation datasets included. Advanced users may update datasets desired.VETravelPerformance: LoadDefaultRoadDvmtValues script pulls datasets 2010 Highway Statistics reports used calculate state urbanized area travel statistics described . data Transportation Energy Databook (Edition 31) used calculate ratio commercial service vehicle DVMT household DVMT. datasets “inst/extdata” folder package. Documentation datasets included. Advanced users may update datasets desired.BudgetHouseholdDvmt: CES data used estimate BudgetHouseholdDvmt model included inst/extdata folder source package ces_vehicle_op-cost.csv documentation ces_vehicle_op-cost.txt. ces.R R script file contains code used download raw CES dataset BLS website process produce dataset ces_vehicle_op-cost.csv file. CES data years 2003 2015 used model estimation. 2003 first year BLS included income subcategories incomes greater $70,000. 2015 last year complete data model estimated.BudgetHouseholdDvmt: CES data used estimate BudgetHouseholdDvmt model included inst/extdata folder source package ces_vehicle_op-cost.csv documentation ces_vehicle_op-cost.txt. ces.R R script file contains code used download raw CES dataset BLS website process produce dataset ces_vehicle_op-cost.csv file. CES data years 2003 2015 used model estimation. 2003 first year BLS included income subcategories incomes greater $70,000. 2015 last year complete data model estimated.VETravelPerformance & CalculateVehicleOperatingCost: Vehicle maintenance, repair, tire costs function vehicle age calculated based data American Automobile Association (AAA) Bureau Labor Statistics (BLS). AAA publishes reports yearly cost vehicle use vehicle type first 5 years vehicle’s life. 2017 report, copy included ‘17-0013_Your-Driving-Costs-Brochure-2017-FNL-CX-1.pdf’ file inst/extdata/sources directory package, used calculate baseline MRT cost vehicle type. Data BLS report, “Beyond Numbers, Prices Spending, Americans’ Aging Autos, BLS, May 2014, Vol.3/.9”, used establish relationship MRT cost vehicle age. copy report included ‘americans-aging-autos.pdf’ file inst/extdata/sources directory package. report includes estimates average MRT cost vehicle age category household vehicles. MRT costs vehicle type age calculated outer product AAA costs vehicle type BLS ratio MRT cost vehicle age. Since BLS data don’t distinguish vehicle types, assumed effect age MRT expenses vehicle types.VETravelPerformance & CalculateVehicleOperatingCost: Vehicle maintenance, repair, tire costs function vehicle age calculated based data American Automobile Association (AAA) Bureau Labor Statistics (BLS). AAA publishes reports yearly cost vehicle use vehicle type first 5 years vehicle’s life. 2017 report, copy included ‘17-0013_Your-Driving-Costs-Brochure-2017-FNL-CX-1.pdf’ file inst/extdata/sources directory package, used calculate baseline MRT cost vehicle type. Data BLS report, “Beyond Numbers, Prices Spending, Americans’ Aging Autos, BLS, May 2014, Vol.3/.9”, used establish relationship MRT cost vehicle age. copy report included ‘americans-aging-autos.pdf’ file inst/extdata/sources directory package. report includes estimates average MRT cost vehicle age category household vehicles. MRT costs vehicle type age calculated outer product AAA costs vehicle type BLS ratio MRT cost vehicle age. Since BLS data don’t distinguish vehicle types, assumed effect age MRT expenses vehicle types.VETravelPerformance & CalculateVehicleOperatingCost: Default carbon cost values “Technical Support Document: Technical Update Social Cost Carbon Regulatory Impact Analysis Executive Order 12866, Interagency Working Group Social Cost Greenhouse Gases, United States Government, August 2016”. copy report included ‘sc_co2_tsd_august_2016.pdf’ file inst/extdata directory package. Carbon costs estimated year assumed discount rate scenarios: 5%, 3%, 2.5%. addition, calculated lower probability higher impact scenario. default carbon costs used model values listed 3% discount rate. Non-carbon social costs social costs derived white paper prepared ODOT support development ODOT’s statewide transportation strategy reducing greenhouse gas emissions transportation sector. paper included ‘STS_White_Paper_on_External_Costs_9-21-2011.pdf’ file inst/extdata directory package. included social cost categories air pollution, resource pollution, energy security, safety, noise.VETravelPerformance & CalculateVehicleOperatingCost: Default carbon cost values “Technical Support Document: Technical Update Social Cost Carbon Regulatory Impact Analysis Executive Order 12866, Interagency Working Group Social Cost Greenhouse Gases, United States Government, August 2016”. copy report included ‘sc_co2_tsd_august_2016.pdf’ file inst/extdata directory package. Carbon costs estimated year assumed discount rate scenarios: 5%, 3%, 2.5%. addition, calculated lower probability higher impact scenario. default carbon costs used model values listed 3% discount rate. Non-carbon social costs social costs derived white paper prepared ODOT support development ODOT’s statewide transportation strategy reducing greenhouse gas emissions transportation sector. paper included ‘STS_White_Paper_on_External_Costs_9-21-2011.pdf’ file inst/extdata directory package. included social cost categories air pollution, resource pollution, energy security, safety, noise.","code":""},{"path":"developing-scenarios.html","id":"developing-scenarios","chapter":"9 Developing Scenarios","heading":"9 Developing Scenarios","text":"Strategic planning often requires assessment large numbers future scenarios, assessing different combination prioritizations, policy decisions, constraints.VEScenarios module provides capability quickly set , run, visualize large numbers VERSPM scenarios using baseline scenario combined multiple changes model inputs.\ngoing ../models/VERSPM_Scenarios folder, see multiple subfolders scripts.","code":""},{"path":"developing-scenarios.html","id":"verspm-base-model","chapter":"9 Developing Scenarios","heading":"9.1 VERSPM Base Model","text":"directory contains inputs R script necessary run base scenario, described .","code":""},{"path":"developing-scenarios.html","id":"defs-1","chapter":"9 Developing Scenarios","heading":"9.1.1 defs","text":"VE-RSPM_Scenarios/defs directory contains files VERSPM_base_model/defs directory, model_parameters.json file differs VERSPM_base_model/defs andVE-RSPM_Scenarios/defs differs latter\nversion contains just four parameters specifying locations inputs outputs, well number processors (NWorkers) use. default 4, sure set number appropriate machine.","code":"[\n  {\n    \"NAME\": \"ModelFolder\",\n    \"VALUE\": \"VERSPM_base_model\",\n    \"TYPE\": \"character\",\n    \"UNITS\": \"NA\",\n    \"PROHIBIT\": \"NA\",\n    \"SIZE\": 20,\n    \"ISELEMENTOF\": \"\"\n  },\n  {\n    \"NAME\": \"ScenarioInputFolder\",\n    \"VALUE\": \"scenario_inputs\",\n    \"TYPE\": \"character\",\n    \"UNITS\": \"NA\",\n    \"PROHIBIT\": \"NA\",\n    \"SIZE\": 20,\n    \"ISELEMENTOF\": \"\"\n  },\n  {\n    \"NAME\" : \"ScenarioOutputFolder\",\n    \"VALUE\": \"scenarios\",\n   \"TYPE\": \"character\",\n   \"UNITS\": \"NA\",\n   \"PROHIBIT\": \"NA\",\n   \"SIZE\": 20,\n   \"ISELEMENTOF\": \"\"\n  },\n  {\n    \"NAME\" : \"NWorkers\",\n    \"VALUE\": \"6\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"NA\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n  }\n]"},{"path":"developing-scenarios.html","id":"inputs","chapter":"9 Developing Scenarios","heading":"9.1.2 Inputs","text":"inputs folder VERRSPM_Scenarios also differs VERSPM_base_model. case, single file specifying output data tables exported CSV files outputs directory.","code":""},{"path":"developing-scenarios.html","id":"scenario_inputs","chapter":"9 Developing Scenarios","heading":"9.1.2.0.1 scenario_inputs","text":"Model scenarios defined terms combinations individual model input parameters policy choices. various inputs defined scenario_inputs folder.Scenario inputs consist eleven folders, one particular category input, described . eleven folders required.Within folder, subfolders containing input files, one per specific input. folders must contain least one subfolder named “1”, defining input base scenario. Subsequent numbered folders contain input files modifying parameters interest, shown screenshots :Model inputs otherwise specified scenario_inputs directory drawn files VERSPM_base_model/defs VERSPM_base_model/inputsThe subfolder names scenario inputs defined follows (input file modify given parentheses):B - Bicycles (azone_prop_sov_dvmt_diverted.csv) : Network improvements, incentives, technologies encourage bicycling light-weight vehicle travel\n1 - Base bicycling percentage SOV tours less 20 miles (9.75%)\n2 - Increase diversion SOV tours 20%\n1 - Base bicycling percentage SOV tours less 20 miles (9.75%)2 - Increase diversion SOV tours 20%C - Vehicle Travel Cost (azone_hh_veh_own_taxes.csv) (region_prop_externalities_paid.csv) : Combination fuel prices charges pay roadway costs possibly externalities\n1 - change fuel prices increase roadway externality charges\n2 - Keep vehicle ownership cost \n3 - Higher climate cost pay drive insurance\n1 - change fuel prices increase roadway externality charges2 - Keep vehicle ownership cost same3 - Higher climate cost pay drive insuranceD - DemandManagement (bzone_travel_demand_mgt.csv) : Programs encourage less private vehicle travel\n1 - Baseline implementation \n2 - Increase effectiveness implementation \n1 - Baseline implementation ITS2 - Increase effectiveness implementation ITSE - Driving Efficiency (marea_operations_deployment.csv) (marea_speed_smooth_ecodrive.csv) (other_ops_effectiveness.csv) : Driving efficiency increasing implementation \n1 - Base\n2 - Increased proportion 10%\n1 - Base2 - Increased proportion 10%F - Technology Mix CI (marea_transit_powertrain_prop.csv) (region_carsvc_powertrain_prop.csv) (region_comsvc_powertrain_prop.csv`) : Vehicle technology mix carbon intensity fuels.\n1 - Baseline vehicle technology mix\n2 - Increased percentage electric vehicles household commercial setting 20%\n1 - Baseline vehicle technology mix2 - Increased percentage electric vehicles household commercial setting 20%G - Fuel Price (azone_fuel_power_cost.csv) : Real fuel price 2010 USD\n1 - Baseline fuel price\n2 - Double fuel price\n3 - Quadruple fuel price\n1 - Baseline fuel price2 - Double fuel price3 - Quadruple fuel priceI - Income (azone_fuel_power_cost.csv) : Real average household income 2010 USD\n1 - Baseline household income\n2 - Income growth 7% w.r.t reference\n3 - Income growth 14% w.r.t reference\n1 - Baseline household income2 - Income growth 7% w.r.t reference3 - Income growth 14% w.r.t referenceL - LandUse (azone_hhsize_targets.csv) (bzone_urban_du_proportions.csv) : Distribution population employment place type\n1 - Base, Maintain current distribution\n2 - LU overlaps HHsize + Population\n1 - Base, Maintain current distribution2 - LU overlaps HHsize + PopulationP - Parking (bzone_parking.csv) : extent paid parking price\n1 - Current extent daily fee\n2 - Increase parking cost 100% proportion charted 10%.\n1 - Current extent daily fee2 - Increase parking cost 100% proportion charted 10%.T - Transit (marea_transit_service.csv) : extent frequency transit service\n1 - Current public transit service level\n2 - Double public transit service level\n3 - Quadruple public transit service level\n1 - Current public transit service level2 - Double public transit service level3 - Quadruple public transit service levelV - Vehicle Characteristics (azone_hh_veh_mean_age.csv) (azone_lttrk_prop): combination fuel prices vehicle travel charges pay roadways pay externalities carbon pricing\n1 - Base\n2 - Light truck proportion 35% fleet average vehicle age 8 years\n1 - Base2 - Light truck proportion 35% fleet average vehicle age 8 yearsRunning input values result 10368 total scenarios, take days run. User usually need possible combinations scenarios.\nVE-RSPM Scenarios grouped 5 different categories can modify category_config.json :Community Design : Policies seek enable shorter trips alternate modes promotion mixed use land use, transit service, bicycling, parking management. ( group L, B, P , T )Marketing/Incentive : Policies improve driving efficiency ecodriving,Intelligent Transportation System efforts, well programs reduce auto demand carsharing, home work-based transportation demand management.( group D, E )Pricing : Policies move towards true cost pricing road user fees pay cost operating, maintaining improving roads, pay---drive (PAYD) insurance, environmental impact fees carbon tax. ( C )Vehicles/Fuels : Factors representing changes future vehicles fuels ( group V, F )Income : Context factor assumed growth statewide average per capita income ( )Depending many scenarios exist five groups, total number scenarios determined.test multi-scenario capability less time, reduce number scenario inputs deleting numbered folders, making sure retain “1” folder six options.\nNote change directory structure scenario_inputs, change category_config.json scenario_config.json match new directory structure.modify scenario inputs, numbered subdirectories can created deleted. directory contains single input file containing modified model parameter.","code":""},{"path":"developing-scenarios.html","id":"running-the-model-for-multiple-scenarios","chapter":"9 Developing Scenarios","heading":"9.1.2.0.2 Running the model for multiple scenarios","text":"Similar base case model can run command line. run model using R, run following commands:starting run,model automatically builds scenarios creating possible combinations settings found scenario_inputs. scenarios run found newly created scenarios directory.directory essentially copy VERSPM_base_model, inputs modified specified scenario_inputs directory. scenario directory contains results model run inputs, datastore, log file.finished, VE-RSPM Scenario Viewer automatically open display results.detail, model specified run_model.R script. case, script runs four modules create scenarios inputs, runs combines results.","code":"scenario_rspm <- openModel('VERSPM_Scenarios')\nscenario_rspm$run()"},{"path":"developing-scenarios.html","id":"case-studies","chapter":"9 Developing Scenarios","heading":"9.2 Case Studies","text":"","code":""},{"path":"developing-scenarios.html","id":"using-visioneval-to-assess-bike-network-changes","chapter":"9 Developing Scenarios","heading":"9.2.1 Using VisionEval to Assess Bike Network Changes","text":"2020 OregonDOT-Metro-NITC research project led Joe Broach Portland State University, update VisionEval code (VE-RSPM) enable VisionEval respond bike networks perceived differnt users. includes following elements.current VE-RSPM light vehicle (e.g. bicycle, electric bicycle, scooter) diversion module users specify proportion single-occupant vehicle (SOV) mileage diverted light-vehicle travel base future years. Historical value can derived household travel surveys bike usage; future year inputs specified aspirational goals exploratory processes. Methods generating realistic bicycle diversion input established, inputs hard tie specific investment actions. exploratory aspirational approaches can useful strategic planning purposes, providing decision makers information levels SOV diversion bicycle travel necessary meet identified goals, offer information level infrastructure transportation system investments needed achieve given levels bicycle diversion.objective proposed research develop new bicycle diversion module GreenSTEP-derived family scenario planning models internalizes bicycle diversion within model allowing users specify changes cycling infrastructure (allow model estimate diversion), rather assuming outcome cycling investments.research develop new VE-RSPM modules estimate SOV short-trip diversion, using input variables related :\n1. Socio-demographic household characteristics (drawing existing variables model),\n2. Land use characteristics (drawing existing variables model), \n3. Bicycle network characteristics.VisionEval use explicit network, bicycle network indicators used represent attractiveness bicycle facilities near home location. anticipated work includes pre-processors extract bicycle network indicators detailed bike network data, potentially terrain data (digital elevation model) capture effects hills cycling propensity. Bicycle network indicators may included VisionEval include coverage, connectivity, quality bicycle facilities, measures shown past research significant relationship cycling volumes, cycling mode share, cycling attractiveness.Several pre-processors consideration develop connectivity quality bike networks, including: Bike Level Traffic Stress (LTS)(see ODOT APMv2_Ch14), Highway Capacity Manual Multi-Modal LOS methods (see TRB), Scalable-Risk Analysis Method (SCRAM).following figures highlight selected changes model makes VE-RSPM packages modules.Bike Network ResearchNote: project also intends synchronize disaggregate Bike Network assumptions Bike Module Portland Metro’s new Activity Based Model, full network, just aggregated metrics VisionEval, utilized directly.","code":""},{"path":"developing-scenarios.html","id":"user-impact","chapter":"9 Developing Scenarios","heading":"9.2.2 User Impact","text":"VisionEval Bike upgrades change methods, inputs outputs. Methods reflect new functional form travel mode, new data (updated NHTS2009 EPA SLD land use data), leading different outcomes household travel bike.Users likely need provide detailed bike network data (historic forecast years) pre-processor develop Bzone inputs use VisionEval.","code":""},{"path":"developing-scenarios.html","id":"status","chapter":"9 Developing Scenarios","heading":"9.2.3 Status","text":"multi-agency research agreement signed early 2020. Research team anticipates project last roughly 12-18 months. VE research, additional efforts may needed implement work within VE codebase.","code":""},{"path":"verspm.html","id":"verspm","chapter":"10 VERSPM Model Details","heading":"10 VERSPM Model Details","text":"","code":""},{"path":"verspm.html","id":"overview-1","chapter":"10 VERSPM Model Details","heading":"10.0.1 Overview","text":"VERSPM strategic planning model assists state metropolitan area planners evaluation transportation land use policy scenarios. considers large number factors affect performance transportation systems effects people environment. Regional Strategic Planning Model (RSPM), developed Oregon Department Transportation (ODOT) purpose estimating forecasting effects various policies influences amount vehicle travel, types vehicles fuels used, resulting greenhouse gas (GHG) emissions among outcomes.VERSPM model initially developed address following factors:Changes population demographics (age structure);Changes personal income;Relative amounts development occurring metropolitan, urban rural areas;Metropolitan, urban, rural area densities;Urban form metropolitan areas (proportion population living mixed use areas well interconnected street walkway system);Amounts metropolitan area transit service;Metropolitan freeway arterial supplies;Auto light truck proportions year;Average vehicle fuel economy vehicle type year;Vehicle age distribution vehicle type;Electric vehicles (EVs), plug-hybrid electric vehicles (PHEVs)Light-weight vehicles bicycles, electric bicycles, electric scooters, etc.;Pricing – fuel, vehicle miles traveled (VMT), parking;Demand management – employer-based individual marketing;Car-sharing;Effects congestion fuel economy;Effects incident management fuel economy;Vehicle operation maintenance – eco-driving, low rolling resistance tires, speed limits;Carbon intensity fuels, including well wheels emissions; andCarbon production electric power generated run electric vehicles.","code":""},{"path":"verspm.html","id":"structure","chapter":"10 VERSPM Model Details","heading":"10.0.2 Structure","text":"VERSPM disaggregate policy model predicts travel demand impacts individual household level. model estimates vehicle ownership, vehicle travel, fuel consumption, GHG emissions individual household level. structure accounts synergistic antagonistic effects multiple policies factors (e.g. gas prices) vehicle travel emissions. example, battery range electric vehicles (EVs) plug‐hybrid electric vehicles (PHEVs) less issue households residing compact mixed‐use neighborhoods households tend drive fewer miles day. Modeling household level makes possible evaluate relationships travel, emissions characteristics households, land use, transportation systems, vehicles, factors. addition, household level analysis makes possible evaluate equitability costs benefits different strategies.model comprises sequential steps feedback. calculation step composed number calculations operate results previous calculation step input data reflect inputs.VERSPM steps grouped follows:iterative process balance VMT travel costs allows congestion costs introduced step influence amount travel. step balances amount household travel cost travel recalculates household VMT, Fuel & GHG process. primary outputs RSPM household travel, fuel power consumption, GHG emissions calculations, information produced households commercial vehicles well. amount commercial (light‐duty) freight (heavy duty) travel calculated well associated fuel, power consumption GHG emissions vehicles.","code":""},{"path":"verspm.html","id":"modules","chapter":"10 VERSPM Model Details","heading":"10.0.3 Modules","text":"Household Modules - VESimHouseholds packageThe following four modules create set households forecast year represents resident model area likely household mix household person characteristics:Create HouseholdsPredict WorkersAssign Life CyclePredict IncomeLand Use Modules - VELandUse packageThe following five modules assigns housing type households (e.g. single-family, multi-family, etc.) development type (metropolitan, town, rural) based available input dwelling units. Households assigned location metropolitan area based projected supply housing neighborhood affordability. Neighborhood population density mixed-use character calculated.Predict HousingLocate EmploymentAssign Location TypesCalculate ‘4D’ MeasuresCalculate Urban Mix MeasuresThe following three modules identifies parking restrictions prices affecting households, identifies households participating TDM programs assigns car service availability zones (including car sharing taxis):Assign Parking RestrictionsAssign Demand ManagementAssign Car Service AvailabilityTransport Supply Modules - VETransportSupply packageThe following two modules gather details relevant roadway public transport systems considered simulation travel:Assign Transit ServiceAssign Road MilesHousehold Vehicle Modules - VEHouseholdVehicles packageThe following seven modules simulate details drivers vehicles simulation types vehicles drive:Assign DriversAssign Vehicle OwnershipAssign Vehicle TypeCreate Vehicle TableAssign Vehicle AgeCalculate Vehicle Ownership CostAdjust Vehicle OwnershipHousehold Travel Modules - VEHouseholdTravel packageThe following four module provides initial estimate average daily vehicle miles traveled (DVMT) household based household characteristics (e.g., demographics, income, transportation options, land use). also calculate households non-motorized trips.Calculate Household Daily Vehicle Miles TraveledCalculate Non-Automobile ‘Alternative’ Mode TripsCalculate Vehicle TripsDivert Single-occupant Vehicle Travel.Powertrain Fuel Modules - VEPowertrainsAndFuels packageThe following two modules identifies vehicles powertrain internal combustion engine (ICE), hybrid-electric vehicle (HEV), plug-hybrid electric vehicle (PHEV), electric vehicle (EV) calculates household vehicle’s emission.Calculate Carbon IntensityAssign Household Vehicle Powertrains","code":""},{"path":"verspm.html","id":"feedback","chapter":"10 VERSPM Model Details","heading":"10.0.4 Feedback","text":"next step balance amount household travel cost travel recalculate household VMT, Fuel GHG emissions . necessary : 1) congestion calculations affect fuel economy thus amount cost fuel consumed; 2) congestion pricing affects amount travel household travel costs; 3) fuel, vehicle travel, taxes fees affect amount cost travel; 4) eco-driving improves fuel economy reduces fuel cost. effect adjustments household travel costs need included total household travel costs adjustment household DVMT.Travel Performance - VETravelPerformance packageThe following modules run iteratively balance DVMT travel costs. Total light duty vehicle (household commercial service vehicle), truck bus DVMT calculated metropolitan area assigned portions road system (freeway, arterial, ). Congestion levels associated speed reductions calculated considering traffic loads inputs regarding deployment traffic operations programs (e.g. ramp metering, traffic signal coordination) congestion pricing. Speed-adjusted fuel economy calculated considering variations powertrain. Travel cost per mile due congestion pricing also calculated. Household travel costs calculated amounts miles driven, fuel consumed, electricity consumed, GHG emitted. inputs establish rates fuel costs, power costs, fuel taxes, VMT taxes, PAYD insurance, several external costs. Finally household budget model used adjust household DVMT reflect effect household travel costs amount household travel. adjusted household DVMT allocated vehicles proportion previous allocation. process can run multiple times DVMT changes little iterations.Calculate Road VMTCalculate Road Performance;Calculate Fuel Electric Energy EconomyAdjust Fuel Electric Energy EconomyCalculate Vehicle Operating CostAdjust DVMT Based BudgetHeavy Vehicles Emissions - VETravelPerformanceThe following two modules calculate heavy vehicle fuel power consumption GHG emissions:Calculate Commercial Vehicles EmissionsCalculate Transit Vehicles Emissions","code":""},{"path":"verspm.html","id":"inputs-and-parameters-verspm-inputs-and-parameters","chapter":"10 VERSPM Model Details","heading":"10.1 Inputs and Parameters {verspm-inputs-and-parameters}","text":"VERSPM model directory organized following subdirectories:defsinputsresults (created completed model run)scriptsGenerally speaking, VERPSM inputs classified five following categories:User input model parameters: input parameters (model scenario specific), model definition files, users review modify needed.Fixed input model parameters: input parameters, model definition files, specific model users typically modify.User input files: input files (model scenario specific) users review modify needed.Fixed input files: input files specific model users typically modify.Internal module inputs: inputs created VERSPM modules.","code":""},{"path":"verspm.html","id":"modules-and-outputs","chapter":"10 VERSPM Model Details","heading":"10.2 Modules and Outputs","text":"VERSPM model compilation several modules, listed :following section describes module, required inputs, generated outputs.\"VisionEval User Guide\" written VisionEval Pooled Fund Team. last built 2025-01-21.book built bookdown R package.","code":""},{"path":"verspm.html","id":"verspm-createhouseholds","chapter":"10 VERSPM Model Details","heading":"10.2.1 CreateHouseholds","text":"module creates simulated households using inputs population age group simulation year.","code":""},{"path":"verspm.html","id":"user-input-files","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"household-population-azone_hh_pop_by_age.csv","chapter":"10 VERSPM Model Details","heading":"Household Population (azone_hh_pop_by_age.csv)","text":"file contains population estimates/forecasts age base future years. file format includes number persons within six age groups:0-1415-1920-2930-5455-6465 PlusBase year data population age category can sourced Census. Future year data must developed user; many regions population forecasts available regional state agencies population data centers, universities, metropolitan planning organizations, similar agencies.snapshot file:","code":""},{"path":"verspm.html","id":"household-size-azone_hhsize_targets.csv","chapter":"10 VERSPM Model Details","heading":"Household Size (azone_hhsize_targets.csv)","text":"file contains household-specific targets population synthesizer. file contains two attributes:AveHhSize: Average household size non-group quarters householdsProp1PerHh: Proportion non-group quarters households one personHousehold size data base year can sourced Census.snapshot file:","code":""},{"path":"verspm.html","id":"group-quarter-population-azone_gq_pop_by_age.csv","chapter":"10 VERSPM Model Details","heading":"Group Quarter Population (azone_gq_pop_by_age.csv)","text":"file contains group quarters population estimates/forecasts age base future years. file format includes number persons within following six age categories:0-1415-1920-2930-5455-6465 PlusGroup quarters distinguished two types: institutional non-institutional. Institutional group quarter populations correctional facilities nursing homes. Non-institutional group quarters include college dormitories, military barracks, group homes, missions, shelters. non-institutional group quarters included modeled population, given assumption institutional group quarters populations account much, , travel. Base year data group quarter populations can sourced Census.","code":""},{"path":"verspm.html","id":"module-outputs","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Households created number persons six age categories (0-14, 15-19, 20-29, 30-54, 55-64, 65+) total number persons household. Two types households created: regular households (.e. persons living group quarters) group quarters households .HhId: Unique household IDHhSize: Number personsAge0to14: Persons 0 14 year old age groupAge15to19: Persons 15 19 year old age groupAge20to29: Persons 20 29 year old age groupAge30to54: Persons 30 54 year old age groupAge55to64: Persons 55 64 year old age groupAge65Plus: Persons 65 older age groupHhType: Coded household age composition (e.g., 2-1-0-2-0-0) Grp group quartersFor information see ","code":""},{"path":"verspm.html","id":"verspm-predictworkers","chapter":"10 VERSPM Model Details","heading":"10.2.2 PredictWorkers","text":"module assigns workers age households non-institutional group quarters population. simple model predicts workers function household type age composition.","code":""},{"path":"verspm.html","id":"user-input-files-1","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"relative-employment-azone_relative_employment.csv","chapter":"10 VERSPM Model Details","heading":"Relative employment (azone_relative_employment.csv)","text":"file contains ratio workers persons age cohort model year relative model estimation data year. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year versus estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year versus estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year versus estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year versus estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year versus estimation data yearSetting value 1 assumes ratio workers persons consistent estimation data specific age cohort.","code":""},{"path":"verspm.html","id":"internal-module-inputs","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-1","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Wkr15to19: Workers 15 19 year old age groupWkr20to29: Workers 20 29 year old age groupWkr30to54: Workers 30 54 year old age groupWkr55to64: Workers 55 64 year old age groupWkr65Plus: Workers 65 older age groupWorkers: Total workersNumWkr: Number workers residing zoneFor information see ","code":""},{"path":"verspm.html","id":"verspm-assignlifecycle","chapter":"10 VERSPM Model Details","heading":"10.2.3 AssignLifeCycle","text":"module assigns life cycle category household. life cycle categories similar, , established National Household Travel Survey (NHTS). age categories used VisionEval models broader used NHTS identify children different ages. simple model set rules assigns age group categories based age persons workers household.","code":""},{"path":"verspm.html","id":"user-input-files-2","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user input requirements.","code":""},{"path":"verspm.html","id":"internal-module-inputs-1","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-2","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"LifeCycle: Household life cycle defined 2009 NHTS LIF_CYC variableFor information see ","code":""},{"path":"verspm.html","id":"verspm-predictincome","chapter":"10 VERSPM Model Details","heading":"10.2.4 PredictIncome","text":"module predicts income simulated household given number workers age group average per capita income Azone household resides.","code":""},{"path":"verspm.html","id":"user-input-files-3","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"regional-income-azone_per_cap_inc.csv","chapter":"10 VERSPM Model Details","heading":"Regional Income (azone_per_cap_inc.csv)","text":"file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2010 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2010 column labels current year. example, data obtained year 2015 dollars column labels file shown become HHIncomePC.2015 GQIncomePC.2015.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-2","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-3","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Income: Total annual household (non-qroup group quarters) incomeFor information see ","code":""},{"path":"verspm.html","id":"verspm-predicthousing","chapter":"10 VERSPM Model Details","heading":"10.2.5 PredictHousing","text":"module assigns housing type, either single-family (SF) multifamily (MF) non-group quarters households based respective supplies SF MF dwelling units housing market household assigned (.e. Azone household assigned ) household characteristics. model assigns household Bzone based household’s housing type income quartile well supply housing type Bzone (input), distribution households income quartile Bzone (input). module assigns non-institutional group quarters households Bzones based supply group quarters units Bzone.","code":""},{"path":"verspm.html","id":"user-input-files-4","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"dwelling-units-bzone_dwelling_units.csv","chapter":"10 VERSPM Model Details","heading":"Dwelling Units (bzone_dwelling_units.csv)","text":"file contains number single-family dwelling units (SFDU), multifamily dwelling units (MFDU) group-quarter dwelling units (GQDU) Bzone base future years. Data base year single-family multifamily dwelling units can sourced Census housing data information units structure, multifamily dwelling units defined structures 2--units. group quarters, unless detailed local data available, Census data non-institutionalized group quarter population can serve proxy dwelling units assuming 1:1 ratio dwelling unit per GQ population.snapshot file:","code":""},{"path":"verspm.html","id":"household-proportion-by-income-bzone_hh_inc_qrtl_prop.csv","chapter":"10 VERSPM Model Details","heading":"Household Proportion by Income (bzone_hh_inc_qrtl_prop.csv)","text":"file contains proportion Bzone non-group quarters households quartile Azone household income category base future years. total Bzone sum 1.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-3","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-4","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"HouseType: Type dwelling unit householdSF: Number households living single family dwelling units zoneMF: Number households living multi-family dwelling units zoneGQ: Number persons living group quarters zonePop: Population residing zoneNumHh: Number households zoneNumWkr: Number workers zoneFor information see ","code":""},{"path":"verspm.html","id":"locateemployment-verspm-locateemployment","chapter":"10 VERSPM Model Details","heading":"10.2.6 LocateEmployment {verspm-locateemployment}","text":"module places employment Bzones based input assumptions employment type Bzone. model adjusts employment numbers balance number workers region. module creates worker table assigns workers Bzone employment locations function number jobs Bzone distance residence employment Bzones.","code":""},{"path":"verspm.html","id":"user-input-files-5","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"employment-data-bzone_employment.csv","chapter":"10 VERSPM Model Details","heading":"Employment Data (bzone_employment.csv)","text":"file contains total, retail service employment zone base future years. Employment categorizations Environmental Protection Agency’s (EPA) Smart Location Database 5-tier employment classification.TotEmp: Total number jobs zoneRetEmp: Number jobs retail sector zone (Census LEHD: CNS07)SvcEmp: Number jobs service sector zone (Census LEHD: CNS12 + CNS14 + CNS15 + CNS16 + CNS19)snapshot file:","code":""},{"path":"verspm.html","id":"zonal-latituted-longitude-bzone_lat_lon.csv","chapter":"10 VERSPM Model Details","heading":"Zonal Latituted Longitude (bzone_lat_lon.csv)","text":"file contains latitude longitude centroid zone.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-4","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-5","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"TotEmp: Total number jobs zoneRetEmp: Number jobs retail sector zoneSvcEmp: Number jobs service sector zoneWkrId: Unique worker IDDistanceToWork: Distance home work assuming location Bzone centroid ‘Manhattan’ distanceFor information see ","code":""},{"path":"verspm.html","id":"verspm-assignloctypes","chapter":"10 VERSPM Model Details","heading":"10.2.7 AssignLocTypes","text":"module assigns households location types: Urban (located within urbanized area boundary), Town (located smaller urban area enough population qualify urbanized area), Rural (located area characterized low density dispersed development).","code":""},{"path":"verspm.html","id":"user-input-files-6","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"urban-dwelling-proportion-bzone_urban-town_du_proportions.csv","chapter":"10 VERSPM Model Details","heading":"Urban dwelling proportion (bzone_urban-town_du_proportions.csv)","text":"file contains proportion SF, MF GQ dwelling units within urban portion zone.PropUrbanSFDU: Proportion single family dwelling units located within urban portion zonePropUrbanMFDU: Proportion multi-family dwelling units located within urban portion zonePropUrbanGQDU: Proportion group quarters accommodations located within urban portion zonePropTownSFDU: Proportion single family dwelling units located within town portion zonePropTownMFDU: Proportion multi-family dwelling units located within town portion zonePropTownGQDU: Proportion group quarters accommodations located within town portion zoneHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-5","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-6","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"LocType: Location type (Urban, Town, Rural) place household residesUrbanPop: Urbanized area populationRuralPop: Rural (.e. non-urbanized area) populationTownPop: Town (.e. urban non-urbanized area) populationUrbanIncome: Total household income urbanized area populationTownIncome: Total household income town (.e. urban non-urbanized area) populationRuralIncome: Total household income rural (.e. non-urbanized area) populationFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculate4dmeasures","chapter":"10 VERSPM Model Details","heading":"10.2.8 Calculate4DMeasures","text":"module calculates several -called ‘4D’ measures Bzone including density, diversity (.e. mixing land uses), transportation network design, destination accessibility, .e., four ‘Ds’ density, diversity, design, destination accessibility. measures similar measures included EPA’s Smart Location Database","code":""},{"path":"verspm.html","id":"user-input-files-7","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"developable-area-bzone_unprotected_area.csv","chapter":"10 VERSPM Model Details","heading":"Developable Area (bzone_unprotected_area.csv)","text":"file contains information unprotected (.e., developable) area within zone.UrbanArea: Area Urban unprotected (.e. developable) within zone (Acres)TownArea: Area Town unprotected within zone (Acres)RuralArea: Area Rural unprotected within zone (Acres)snapshot file:","code":""},{"path":"verspm.html","id":"network-density-bzone_network_design.csv","chapter":"10 VERSPM Model Details","heading":"Network density (bzone_network_design.csv)","text":"file contains values D3bpo4, measure intersection density determined number pedestrian-oriented intersections four legs per square mile. data inform input can sourced EPA’s Smart Location Database.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-6","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-7","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"D1B: Gross population density (people/acre) unprotected (.e. developable) land zoneD1C: Gross employment density (jobs/acre) unprotected land land zoneD1D: Gross activity density (employment + households) unprotected land zoneD2A_JPHH: Ratio jobs households zoneD2A_WRKEMP: Ratio workers jobs zoneD2A_EPHHM: Employment household entropy measure zone considering numbers households, retail jobs, service jobs, jobsD5: Destination accessibility zone calculated harmonic mean jobs within two (2) miles population within five (5) milesFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculateurbanmixmeasure","chapter":"10 VERSPM Model Details","heading":"10.2.9 CalculateUrbanMixMeasure","text":"module calculates urban mixed-use measure based 2001 National Household Travel Survey (NHTS) measure tract level urban/rural indicator. measure, developed Claritas, uses density tract surrounding tracts identify urban/rural context tract. categories include urban, suburban, second city, town rural. Mapping example metropolitan areas shows places identified urban correspond central city inner neighborhoods characterized mixed use, higher levels urban accessibility, higher levels walk/bike/transit accessibility.","code":""},{"path":"verspm.html","id":"user-input-files-8","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"household-neighborhood-bzone_urban-mixed-use_prop.csv","chapter":"10 VERSPM Model Details","heading":"Household Neighborhood (bzone_urban-mixed-use_prop.csv)","text":"file contains target proportion households located mixed-used neighborhoods zone.MixUseProp: Target proportion households located mixed-use neighborhoods zone (NA target)snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-7","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-8","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"IsUrbanMixNbrhd: Flag identifying whether household (1) (0) urban, mixed-use neighborhoodFor information see ","code":""},{"path":"verspm.html","id":"verspm-assignparkingrestrictions","chapter":"10 VERSPM Model Details","heading":"10.2.10 AssignParkingRestrictions","text":"module identifies parking restrictions prices affecting households residences, workplaces, places likely visit urban area. parking restriction/cost information used modules calculating cost vehicle ownership cost vehicle use.","code":""},{"path":"verspm.html","id":"user-input-files-9","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"parking-availability-bzone_parking.csv","chapter":"10 VERSPM Model Details","heading":"Parking Availability (bzone_parking.csv)","text":"file contains parking information Bzone base future years. Users use available local data parking availability, costs, program participation develop input.PkgSpacesPerSFDU: Average number free parking spaces available residents single-family dwelling unitsPkgSpacesPerMFDU: Average number free parking spaces available residents multifamily dwelling unitsPkgSpacesPerGQ: Average number free parking spaces available group quarters residentsPropWkrPay: Proportion workers pay parkingPropCashOut: Proportions workers paying parking cash--buy-back programPkgCost: Average daily cost long-term parking (e.g. paid monthly basis)snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-8","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-9","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"FreeParkingSpaces: Number free parking spaces available householdParkingUnitCost: Daily cost long-term parking (e.g., parking paid monthly basis)OtherParkingCost: Daily cost parking shopping locations locations paid parking including workPaysForParking: worker pay parking: 1 = yes, 0 = noIsCashOut: worker part cash--buy-back program: 1 = yes, 0 = noParkingCost: Daily cost long-term parking (e.g., parking paid monthly basis)information see ","code":""},{"path":"verspm.html","id":"verspm-assigndemandmanagement","chapter":"10 VERSPM Model Details","heading":"10.2.11 AssignDemandManagement","text":"module assigns demand management program participation households workers. Households assigned individualized marketing program participation. Workers assigned employee commute options participation. module computes net proportional reduction household daily VMT (DVMT) based participation travel demand management programs.","code":""},{"path":"verspm.html","id":"user-input-files-10","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"demand-management-bzone_travel_demand_mgt.csv","chapter":"10 VERSPM Model Details","heading":"Demand Management (bzone_travel_demand_mgt.csv)","text":"file contains information workers households participating demand management programs. Users use available local data travel demand management programs develop input.\n* EcoProp: Proportion workers working Bzone participate strong employee commute options program (can also used approximate impacts teleworking)\n* ImpProp: Proportion households residing Bzone participate strong individualized marketing programHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-9","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-10","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"IsIMP: Identifies whether household participant travel demand management individualized marketing program (IMP): 1 = yes, 0 = noPropTdmDvmtReduction: Proportional reduction household DVMT due participation travel demand management programsIsECO: Identifies whether worker participant travel demand management employee commute options program: 1 = yes, 0 = noFor information see ","code":""},{"path":"verspm.html","id":"verspm-assigncarsvcavailability","chapter":"10 VERSPM Model Details","heading":"10.2.12 AssignCarSvcAvailability","text":"module reads assigns ‘car service’ availability Bzones. Car services include taxis, car sharing services (e.g. Car--Go, Zipcar), future automated taxi services. high level car service increases household car availability – similar owning car. Low levels car service competitive access time therefore increase household car availability.","code":""},{"path":"verspm.html","id":"user-input-files-11","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"car-service-availability-bzone_carsvc_availability.csv","chapter":"10 VERSPM Model Details","heading":"Car Service Availability (bzone_carsvc_availability.csv)","text":"file contains information level car service availability contains value either Low High Bzones. High means car service access competitive household owned car impact household vehicle ownership; Low competitive impact household vehicle ownership.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-10","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"module internal module inputs","code":""},{"path":"verspm.html","id":"module-outputs-11","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"CarSvcLevel: Level car service availability household. High means access competitive household owned car; Low competitive.information see ","code":""},{"path":"verspm.html","id":"verspm-assigntransitservice","chapter":"10 VERSPM Model Details","heading":"10.2.13 AssignTransitService","text":"module assigns transit service level metropolitan area (Marea) neighborhoods (Bzones). Annual revenue-miles (.e. transit miles revenue service) transit mode type read input file. following eight modes recognized:DR = Demand-responsiveVP = Vanpool similarMB = Standard motor busRB = Bus rapid transit commuter busMG = Monorail/automated guidewaySR = Streetcar/trolley bus/inclined plainHR = Heavy Rail/Light RailCR = Commuter Rail/Hybrid Rail/Cable Car/Aerial TramwayRevenue miles converted bus (.e., MB) equivalents using factors derived urbanized area data National Transit Database (NTD). Bus-equivalent revenue miles used models predict vehicle ownership household DVMT.Revenue miles mode type also translated (using NTD data) vehicle miles three vehicle types: van, bus, rail. Miles vehicle type used calculate public transit energy consumption emissions.","code":""},{"path":"verspm.html","id":"user-input-files-12","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"transit-service-for-marea-marea_transit_service.csv","chapter":"10 VERSPM Model Details","heading":"Transit Service for Marea (marea_transit_service.csv)","text":"file contains annual revenue-miles different transit modes metropolitan area. Data develop input can sourced Federal Transit Administration NTD.DRRevMi: Annual revenue-miles demand-responsive public transit serviceVPRevMi: Annual revenue-miles van-pool similar public transit serviceMBRevMi: Annual revenue-miles standard bus public transit serviceRBRevMi: Annual revenue-miles rapid-bus commuter bus public transit serviceMGRevMi: Annual revenue-miles monorail automated guideway public transit serviceSRRevMi: Annual revenue-miles streetcar trolleybus public transit serviceHRRevMi: Annual revenue-miles light rail heavy rail public transit serviceCRRevMi: Annual revenue-miles commuter rail, hybrid rail, cable car, aerial tramway public transit serviceHere snapshot file:","code":""},{"path":"verspm.html","id":"transit-service-for-bzone-bzone_transit_service.csv","chapter":"10 VERSPM Model Details","heading":"Transit service for Bzone (bzone_transit_service.csv)","text":"file supplies data relative public transit accessibility Bzone level. data inform input can sourced EPA’s Smart Location Database.D4c: Aggregate frequency transit service within 0.25 miles block group boundary per hour evening peak period (Ref: EPA 2010 Smart Location Database)snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-11","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-12","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"TranRevMiPC: Ratio annual bus-equivalent revenue-miles (.e., revenue-miles productivity - passenger miles per revenue mile - standard bus) urbanized area populationVanDvmt: Total daily miles traveled vans various sizes provide demand responsive, vanpool, similar services.BusDvmt: Total daily miles traveled buses various sizes provide bus service various types.RailDvmt: Total daily miles traveled light rail, heavy rail, commuter rail, similar types vehicles.information see ","code":""},{"path":"verspm.html","id":"verspm-assignroadmiles","chapter":"10 VERSPM Model Details","heading":"10.2.14 AssignRoadMiles","text":"module assigns freeway arterial lane-miles metropolitan areas (Marea) calculates freeway lane-miles per capita.","code":""},{"path":"verspm.html","id":"user-input-files-13","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"lane-miles-marea_lane_miles.csv","chapter":"10 VERSPM Model Details","heading":"Lane-Miles (marea_lane_miles.csv)","text":"file contains inputs numbers freeway lane-miles arterial lane-miles Marea year. data develop input can sourced FHWA Highway Performance Monitoring System (HPMS), using either HPMS geospatial data Highway Statistics, State DOT.FwyLaneMi: Lane-miles roadways functionally classified freeways expressways urbanized portion metropolitan areaArtLaneMi: Lane-miles roadways functionally classified arterials (freeways expressways) urbanized portion metropolitan areaHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-12","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-13","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"FwyLaneMiPC: Ratio urbanized area freeway expressway lane-miles urbanized area populationFor information see ","code":""},{"path":"verspm.html","id":"verspm-assigndrivers","chapter":"10 VERSPM Model Details","heading":"10.2.15 AssignDrivers","text":"module assigns drivers age group household function numbers persons workers age group, household income, land use characteristics, public transit availability.","code":""},{"path":"verspm.html","id":"user-input-files-14","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"adjustment-for-household-drivers-region_hh_driver_adjust_prop.csv","chapter":"10 VERSPM Model Details","heading":"Adjustment for Household Drivers (region_hh_driver_adjust_prop.csv)","text":"file optional can used adjust estimate household drivers age cohort. file specifies relative driver licensing rate relative model estimation data year order account observed projected changes licensing rates.Drv15to19AdjProp: Target proportion unadjusted model number drivers 15 19 years old (1 = adjustment)Drv20to29AdjProp: Target proportion unadjusted model number drivers 20 29 years old (1 = adjustment)Drv30to54AdjProp: Target proportion unadjusted model number drivers 30 54 years old (1 = adjustment)Drv55to64AdjProp: Target proportion unadjusted model number drivers 55 64 years old (1 = adjustment)Drv65PlusAdjProp: Target proportion unadjusted model number drivers 65 older (1 = adjustment)snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-13","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-14","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Drv15to19: Number drivers 15 19 years oldDrv20to29: Number drivers 20 29 years oldDrv30to54: Number drivers 30 54 years oldDrv55to64: Number drivers 55 64 years oldDrv65Plus: Number drivers 65 olderDrivers: Number drivers householdDrvAgePersons: Number people 15 year old older householdFor information see ","code":""},{"path":"verspm.html","id":"verspm-assignvehicleownership","chapter":"10 VERSPM Model Details","heading":"10.2.16 AssignVehicleOwnership","text":"module determines number vehicles owned leased household function household characteristics, land use characteristics, transportation system characteristics.","code":""},{"path":"verspm.html","id":"user-input-files-15","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user input requirements.","code":""},{"path":"verspm.html","id":"internal-module-inputs-14","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-15","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Vehicles: Number automobiles light trucks owned leased household including high level car service vehicles available driving-age personsFor information see ","code":""},{"path":"verspm.html","id":"verspm-assignvehicletype","chapter":"10 VERSPM Model Details","heading":"10.2.17 AssignVehicleType","text":"module identifies many household vehicles light trucks many automobiles. Light trucks include pickup trucks, sport utility vehicles, vans, vehicle classified passenger car. Automobiles vehicles classified passenger cars.","code":""},{"path":"verspm.html","id":"user-input-files-16","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"light-truck-proportion-for-household-vehicles-azone_lttrk_prop.csv","chapter":"10 VERSPM Model Details","heading":"Light Truck Proportion for Household Vehicles (azone_lttrk_prop.csv)","text":"file specifies light truck proportion vehicle fleet. user can developed local registration data. Alternatively, MOVES available model region, input can calculated MOVES vehicle population data (SourceTypeYear). vehicle types used MOVES (SourceType) correspond two categories passenger vehicles used EERPAT: MOVES SourceType 21, Passenger Car, equivalent autos EERPAT MOVES Source Type 31, Passenger Truck, equivalent light trucks.LtTrkProp: Proportion household vehicles light trucks (pickup, SUV, van).snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-15","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-16","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"NumLtTrk: Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAuto: Number automobiles (.e., four-tire passenger vehicles light trucks) owned leased householdFor information see ","code":""},{"path":"verspm.html","id":"verspm-createvehicletable","chapter":"10 VERSPM Model Details","heading":"10.2.18 CreateVehicleTable","text":"module creates vehicle table populates household ID geography fields.","code":""},{"path":"verspm.html","id":"user-input-files-17","chapter":"10 VERSPM Model Details","heading":"10.2.18.1 User Input Files","text":"","code":""},{"path":"verspm.html","id":"car-service-characteristics-azone_carsvc_characteristics.csv","chapter":"10 VERSPM Model Details","heading":"Car Service Characteristics (azone_carsvc_characteristics.csv)","text":"file specifies different characteristics high low car service levels Azone. Changing input optional using default input values standard practice.HighCarSvcCost: Average cost dollars per mile travel high service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)LowCarSvcCost: Average cost dollars per mile travel low service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)AveCarSvcVehicleAge: Average age car service vehicles yearsLtTrkCarSvcSubProp: proportion light-truck owners substitute less-costly car service option owning light truckAutoCarSvcSubProp: proportion automobile owners substitute less-costly car service option owning automobileHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-16","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-17","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"VehId: Unique vehicle IDVehicleAccess: Identifier whether vehicle owned household (), vehicle low level car service (LowCarSvc), vehicle high level car service (HighCarSvc)information see ","code":""},{"path":"verspm.html","id":"verspm-assignvehicleage","chapter":"10 VERSPM Model Details","heading":"10.2.19 AssignVehicleAge","text":"module assigns vehicle ages household vehicle. Vehicle age assigned function vehicle type (auto light truck), household income, assumed mean vehicle age vehicle type Azone. Car service vehicles assigned age based input assumptions distinction vehicle type.","code":""},{"path":"verspm.html","id":"user-input-files-18","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"vehicles-mean-age-azone_hh_veh_mean_age.csv","chapter":"10 VERSPM Model Details","heading":"Vehicles Mean Age (azone_hh_veh_mean_age.csv)","text":"file provides inputs mean auto age mean light truck age Azone. user can develop file using State DMV data.AutoMeanAge: Mean age automobiles owned leased households.LtTrkMeanAge: Mean age light trucks owned leased households.snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-17","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-18","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Type: Vehicle body type: Auto = automobile, LtTrk = light trucks (.e. pickup, SUV, Van)Age: Vehicle age yearsFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculatevehicleowncost","chapter":"10 VERSPM Model Details","heading":"10.2.20 CalculateVehicleOwnCost","text":"module calculates average vehicle ownership cost vehicle based vehicle type age using data American Automobile Association (AAA). added cost parking vehicle residence free parking available household vehicles. ownership cost converted average ownership cost per mile predicting household DVMT, given number owned vehicles splitting miles equally among vehicle.","code":""},{"path":"verspm.html","id":"user-input-files-19","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"vehicle-ownership-taxes-azone_hh_veh_own_taxes.csv","chapter":"10 VERSPM Model Details","heading":"Vehicle Ownership Taxes (azone_hh_veh_own_taxes.csv)","text":"file provides inputs flat fees/taxes (.e. annual cost per vehicle) ad valorem taxes (.e. percentage vehicle value paid taxes).VehOwnFlatRateFee: Annual flat rate tax per vehicle dollarsVehOwnAdValoremTax: Annual proportion vehicle value paid taxesHere snapshot file:","code":""},{"path":"verspm.html","id":"proportion-of-pay-as-you-drive-payd-insurance-azone_payd_insurance_prop.csv","chapter":"10 VERSPM Model Details","heading":"Proportion of Pay-as-you-drive (PAYD) Insurance (azone_payd_insurance_prop.csv)","text":"file provides inputs proportion households PAYD insurance.PaydHhProp: Proportion households Azone pay---drive insurance vehiclesHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-18","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-19","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"OwnCost: Annual cost vehicle ownership including depreciation, financing, insurance, taxes, residential parking dollarsOwnCostPerMile: Annual cost vehicle ownership per mile vehicle travel (dollars per mile)InsCost: Annual vehicle insurance cost dollarsHasPaydIns: Identifies whether household pay---drive insurance vehicles: 1 = Yes, 0 = noFor information see ","code":""},{"path":"verspm.html","id":"verspm-adjustvehicleownership","chapter":"10 VERSPM Model Details","heading":"10.2.21 AdjustVehicleOwnership","text":"module adjusts household vehicle ownership based comparison cost owning vehicle per mile travel compared cost per mile using car service locations level car service quality high. determination whether car services substituted ownership also depends input assumptions regarding average likelihood owner substitute car services household vehicle.","code":""},{"path":"verspm.html","id":"user-input-files-20","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"car-service-characteristics-azone_carsvc_characteristics.csv-1","chapter":"10 VERSPM Model Details","heading":"Car Service Characteristics (azone_carsvc_characteristics.csv)","text":"file specifies different characteristics high low car service levels Azone. Changing input optional using default input values standard practice.HighCarSvcCost: Average cost dollars per mile travel high service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)LowCarSvcCost: Average cost dollars per mile travel low service level car service exclusive cost fuel, road use taxes, carbon taxes (social costs charged vehicle use)AveCarSvcVehicleAge: Average age car service vehicles yearsLtTrkCarSvcSubProp: proportion light-truck owners substitute less-costly car service option owning light truckAutoCarSvcSubProp: proportion automobile owners substitute less-costly car service option owning automobileHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-19","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-20","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"VehicleAccess: Identifier whether vehicle owned household (), vehicle low level car service (LowCarSvc), vehicle high level car service (HighCarSvc)OwnCost: Annual cost vehicle ownership per mile vehicle travel (dollars per mile)OwnCostPerMile:Annual cost vehicle ownership per mile vehicle travel (dollars per mile)InsCost: Annual vehicle insurance cost dollarsSwitchToCarSvc: Identifies whether vehicle switched owned car serviceOwnCostSavings: Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings dollars resulting substituting use car services household vehicleOwnCost:Annual household vehicle ownership cost (depreciation, finance, insurance, taxes) savings dollarsVehicles:Number automobiles light trucks owned leased household including high level car service vehicles available driving-age personsNumLtTrk:Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAuto:Number automobiles (.e. 4-tire passenger vehicles light trucks) owned leased householdNumHighCarSvc:Number high level service car service vehicles available household (difference number vehicles owned household number driving age persons households availability high level car servicesFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculatehouseholddvmt","chapter":"10 VERSPM Model Details","heading":"10.2.22 CalculateHouseholdDvmt","text":"module models household average daily vehicle miles traveled function household characteristics, vehicle ownership, attributes neighborhood metropolitan area household resides.","code":""},{"path":"verspm.html","id":"user-input-files-21","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user input requirements.","code":""},{"path":"verspm.html","id":"internal-module-inputs-20","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-21","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Dvmt: Average daily vehicle miles traveled household autos light trucksUrbanHhDvmt: Average daily vehicle miles traveled autos light trucks households residing urbanized portion MareaTownHhDvmt: Average daily vehicle miles traveled autos light trucks households residing town (urban urbanized) portion MareaRuralHhDvmt: Average daily vehicle miles traveled autos light trucks households residing rural (non-urban) portion MareaFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculatealtmodetrips","chapter":"10 VERSPM Model Details","heading":"10.2.23 CalculateAltModeTrips","text":"module calculates household transit trips, walk trips, bike trips. models sensitive household DVMT run household DVMT adjustments (e.g. account cost household DVMT) made.","code":""},{"path":"verspm.html","id":"user-input-files-22","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user input requirements.","code":""},{"path":"verspm.html","id":"internal-module-inputs-21","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-22","chapter":"10 VERSPM Model Details","heading":"10.2.23.1 Module Outputs","text":"WalkTrips: Average number walk trips per year household membersBikeTrips: Average number bicycle trips per year household membersTransitTrips:Average number public transit trips per year household membersFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculatevehicletrips","chapter":"10 VERSPM Model Details","heading":"10.2.24 CalculateVehicleTrips","text":"module calculates average daily vehicle trips households consistent household DVMT. average trip length model applied estimate average length household trips reflecting characteristics household place live. average trip length divided average household DVMT get estimate average number daily vehicle trips.","code":""},{"path":"verspm.html","id":"user-input-files-23","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user input requirements.","code":""},{"path":"verspm.html","id":"internal-module-inputs-22","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-23","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"VehicleTrips: Average number vehicle trips per day household membersAveVehTripLen: Average household vehicle trip length milesFor information see ","code":""},{"path":"verspm.html","id":"verspm-divertsovtravel","chapter":"10 VERSPM Model Details","heading":"10.2.25 DivertSovTravel","text":"module reduces household single-occupant vehicle (SOV) travel achieve goals inputs model. purpose module enable users ‘’ analysis potential light-weight vehicles (e.g. bicycles, electric bikes, electric scooters) infrastructure support use reduce SOV travel.Note: SOV DVMT reduction applied households urban town location types (LocTypes) unlikely actions/services provided rural areas significantly divert SOV DVMT bicycles, electric bicycles, scooters similar modes.","code":""},{"path":"verspm.html","id":"user-input-files-24","chapter":"10 VERSPM Model Details","heading":"10.2.25.1 User Input Files","text":"","code":""},{"path":"verspm.html","id":"proportion-of-diverted-sov-travel-azone_prop_sov_dvmt_diverted.csv","chapter":"10 VERSPM Model Details","heading":"10.2.25.1.1 Proportion of Diverted SOV Travel (azone_prop_sov_dvmt_diverted.csv)","text":"file provides inputs goal diverting portion SOV travel within 20-mile tour distance (round trip distance). user can use local household travel survey data (available) develop input.PropSovDvmtDiverted: Goals proportion household DVMT single occupant vehicle tours round-trip distances 20 miles less diverted bicycling slow speed modes travelHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-23","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-24","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"PropDvmtDiverted: Proportion household DVMT diverted bicycling, electric bikes, ‘low-speed’ travel modesAveTrpLenDiverted: Average length miles vehicle trips diverted bicycling, electric bikes, ‘low-speed’ travel modesFor information see ","code":""},{"path":"verspm.html","id":"verspm-initialize-vepowertrainsandfuels","chapter":"10 VERSPM Model Details","heading":"10.2.26 Initialize-vepowertrainsandfuels","text":"module processes vehicle fuel characteristics files model users may optionally supply. files supplied, modules package compute carbon intensities vehicle travel use user-supplied data instead datasets part package (see LoadDefaultValues.R script).","code":""},{"path":"verspm.html","id":"user-input-files-25","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"carbon-intensity-of-electricity-azone_electricity_carbon_intensity.csv","chapter":"10 VERSPM Model Details","heading":"Carbon Intensity of Electricity (azone_electricity_carbon_intensity.csv)","text":"input file specifies carbon intensity electricity Azone. input file OPTIONAL needed user wants modify carbon intensity electricity.ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)snapshot file:","code":""},{"path":"verspm.html","id":"average-fuel-carbon-intensity-of-transit-marea_transit_ave_fuel_carbon_intensity.csv","chapter":"10 VERSPM Model Details","heading":"Average Fuel Carbon Intensity of Transit (marea_transit_ave_fuel_carbon_intensity.csv)","text":"input file OPTIONAL. needed user wants modify average carbon intensity fuel used transit.TransitVanFuelCI: Average carbon intensity fuel used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuel used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuel used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"verspm.html","id":"biofuels-proportions-of-transit-fuels-marea_transit_biofuel_mix.csv","chapter":"10 VERSPM Model Details","heading":"Biofuels Proportions of Transit Fuels (marea_transit_biofuel_mix.csv)","text":"input file OPTIONAL. needed user wants modify biofuel used transit services.TransitEthanolPropGasoline: Ethanol proportion gasoline used transit vehiclesTransitBiodieselPropDiesel: Biodiesel proportion diesel used transit vehiclesTransitRngPropCng: Renewable natural gas proportion compressed natural gas used transit vehiclesHere snapshot file:","code":""},{"path":"verspm.html","id":"transit-fuels-proportions-by-transit-vehicle-type-marea_transit_fuel.csv","chapter":"10 VERSPM Model Details","heading":"Transit Fuels Proportions by Transit Vehicle Type (marea_transit_fuel.csv)","text":"input file OPTIONAL. needed user wants modify transit fuels proportions.VanPropDiesel: Proportion non-electric transit van travel powered dieselVanPropGasoline: Proportion non-electric transit van travel powered gasolineVanPropCng: Proportion non-electric transit van travel powered compressed natural gasBusPropDiesel: Proportion non-electric transit bus travel powered dieselBusPropGasoline: Proportion non-electric transit bus travel powered gasolineBusPropCng: Proportion non-electric transit bus travel powered compressed natural gasRailPropDiesel: Proportion non-electric transit rail travel powered dieselRailPropGasoline: Proportion non-electric transit rail travel powered gasolineHere snapshot file:","code":""},{"path":"verspm.html","id":"transit-powertrain-proportions-by-transit-vehicle-type-marea_transit_powertrain_prop.csv","chapter":"10 VERSPM Model Details","heading":"10.2.26.0.1 Transit Powertrain Proportions by Transit Vehicle Type (marea_transit_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify mixes transit vehicle powertrains.VanPropIcev: Proportion transit van travel using internal combustion engine powertrainsVanPropHev: Proportion transit van travel using hybrid electric powertrainsVanPropBev: Proportion transit van travel using battery electric powertrainsBusPropIcev: Proportion transit bus travel using internal combustion engine powertrainsBusPropHev: Proportion transit bus travel using hybrid electric powertrainsBusPropBev: Proportion transit bus travel using battery electric powertrainsRailPropIcev: Proportion transit rail travel using internal combustion engine powertrainsRailPropHev: Proportion transit rail travel using hybrid electric powertrainsRailPropEv: Proportion transit rail travel using electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"average-carbon-intensities-of-fuels-region_ave_fuel_carbon_intensity.csv","chapter":"10 VERSPM Model Details","heading":"10.2.26.0.2 Average Carbon Intensities of Fuels (region_ave_fuel_carbon_intensity.csv)","text":"input file OPTIONAL. needed user wants modify average carbon density different vehicle types model region.HhFuelCI: Average carbon intensity fuels used household vehicles (grams CO2e per megajoule)CarSvcFuelCI: Average carbon intensity fuels used car service vehicles (grams CO2e per megajoule)ComSvcFuelCI: Average carbon intensity fuels used commercial service vehicles (grams CO2e per megajoule)HvyTrkFuelCI: Average carbon intensity fuels used heavy trucks (grams CO2e per megajoule)TransitVanFuelCI: Average carbon intensity fuels used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuels used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuels used transit rail vehicles (grams CO2e per megajoule)snapshot file:","code":""},{"path":"verspm.html","id":"car-service-vehicle-powertrains-region_carsvc_powertrain_prop.csv","chapter":"10 VERSPM Model Details","heading":"10.2.26.0.3 Car Service Vehicle Powertrains (region_carsvc_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion car services.CarSvcAutoPropIcev: Proportion car service automobile travel powered internal combustion engine powertrainsCarSvcAutoPropHev: Proportion car service automobile travel powered hybrid electric powertrainsCarSvcAutoPropBev: Proportion car service automobile travel powered battery electric powertrainsCarSvcLtTrkPropIcev: Proportion car service light truck travel powered internal combustion engine powertrainsCarSvcLtTrkPropHev: Proportion car service light truck travel powered hybrid electric powertrainsCarSvcLtTrkPropBev: Proportion car service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"commercial-service-vehicle-powertrains-region_comsvc_powertrain_prop.csv","chapter":"10 VERSPM Model Details","heading":"10.2.26.0.4 Commercial Service Vehicle Powertrains (region_comsvc_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion commercial vehicles.ComSvcAutoPropIcev: Proportion commercial service automobile travel powered internal combustion engine powertrainsComSvcAutoPropHev: Proportion commercial service automobile travel powered hybrid electric powertrainsComSvcAutoPropBev: Proportion commercial service automobile travel powered battery electric powertrainsComSvcLtTrkPropIcev: Proportion commercial service light truck travel powered internal combustion engine powertrainsComSvcLtTrkPropHev: Proportion commercial service light truck travel powered hybrid electric powertrainsComSvcLtTrkPropBev: Proportion commercial service light truck travel powered battery electric powertrainssHere snapshot file:","code":""},{"path":"verspm.html","id":"heavy-duty-truck-powertrains-region_hvytrk_powertrain_prop.csv","chapter":"10 VERSPM Model Details","heading":"10.2.26.0.5 Heavy duty Truck Powertrains (region_hvytrk_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion heavy duty trucks.HvyTrkPropIcev: Proportion heavy truck travel powered internal combustion engine powertrainsHvyTrkPropHev: Proportion heavy truck travel powered hybrid electric powertrainsHvyTrkPropBev: Proportion heavy truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-24","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"module uses datasets datastore.","code":""},{"path":"verspm.html","id":"module-outputs-25","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"module produces datasets store datastore.information see ","code":""},{"path":"verspm.html","id":"verspm-calculatecarbonintensity","chapter":"10 VERSPM Model Details","heading":"10.2.27 CalculateCarbonIntensity","text":"module calculates average carbon intensity fuels (grams CO2e per megajoule) transportation mode vehicle type. transportation modes vehicle types :Average fuel carbon intensities public transit vehicles calculated Marea. average fuel carbon intensities mode vehicles calculated entire model region. module also calculates average carbon intensity electricity Azone level. Note module uses user input files user runs Initialize module. Otherwise module uses default inputs instfolder.","code":""},{"path":"verspm.html","id":"user-input-files-26","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"carbon-intensity-of-electricity-azone_electricity_carbon_intensity.csv-1","chapter":"10 VERSPM Model Details","heading":"10.2.27.0.1 Carbon Intensity of Electricity (azone_electricity_carbon_intensity.csv)","text":"input file OPTIONAL. needed user wants modify carbon intensity electricity.ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-25","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"module internal module inputs","code":""},{"path":"verspm.html","id":"module-outputs-26","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)HhAutoFuelCI: Average carbon intensity fuels used household automobiles (grams CO2e per megajoule)HhLtTrkFuelCI: Average carbon intensity fuels used household light trucks (grams CO2e per megajoule)CarSvcAutoFuelCI: Average carbon intensity fuels used car service automobiles (grams CO2e per megajoule)CarSvcLtTrkFuelCI: Average carbon intensity fuels used car service light trucks (grams CO2e per megajoule)ComSvcAutoFuelCI: Average carbon intensity fuels used commercial service automobiles (grams CO2e per megajoule)ComSvcLtTrkFuelCI: Average carbon intensity fuels used commercial service light trucks (grams CO2e per megajoule)HvyTrkFuelCI: Average carbon intensity fuels used heavy trucks (grams CO2e per megajoule)TransitVanFuelCI: Average carbon intensity fuel used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuel used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuel used transit rail vehicles (grams CO2e per megajoule)information see ","code":""},{"path":"verspm.html","id":"verspm-assignhhvehiclepowertrain","chapter":"10 VERSPM Model Details","heading":"10.2.28 AssignHhVehiclePowertrain","text":"module assigns powertrain type household vehicle. powertrain types internal combustion engine vehicle (ICEV), hybrid electric vehicle (HEV), plug-hybrid electric vehicle (PHEV), battery electric vehicles (BEV). module also assigns related characteristics household vehicles including:Battery range (PHEV BEV)Miles per gallon (MPG) gallons per mile (GPM)Miles per kilowatt-hour (MPKWH) kilowatt-hours per mile (KWHPM)Miles per gasoline gallon equivalent (MPGe)proportion DVMT powered electricityCarbon dioxide equivalent emissions per mile powered hydrocarbon fuelCarbon dioxide equivalent emissions per mile powered electricity","code":""},{"path":"verspm.html","id":"user-input-files-27","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"charging-availability-azone_charging_availability.csv","chapter":"10 VERSPM Model Details","heading":"Charging Availability (azone_charging_availability.csv)","text":"input file supplies data proportion different household types plug-electric vehicle (PEV) charging available Azone.PropSFChargingAvail: Proportion single-family dwellings Azone PEV charging facilities installed able installedPropMFChargingAvail: Proportion multifamily dwelling units Azone PEV charging facilities availablePropGQChargingAvail: Proportion group quarters dwelling units Azone PEV charging facilities availableHere snapshot file:","code":""},{"path":"verspm.html","id":"car-service-vehicle-powertrains-region_carsvc_powertrain_prop.csv-1","chapter":"10 VERSPM Model Details","heading":"10.2.28.0.1 Car Service Vehicle Powertrains (region_carsvc_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion car services.CarSvcAutoPropIcev: Proportion car service automobile travel powered internal combustion engine powertrainsCarSvcAutoPropHev: Proportion car service automobile travel powered hybrid electric powertrainsCarSvcAutoPropBev: Proportion car service automobile travel powered battery electric powertrainsCarSvcLtTrkPropIcev: Proportion car service light truck travel powered internal combustion engine powertrainsCarSvcLtTrkPropHev: Proportion car service light truck travel powered hybrid electric powertrainsCarSvcLtTrkPropBev: Proportion car service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-26","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-27","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Powertrain: Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-hybrid electric vehicle, BEV = battery electric vehicle, NA = applicable car service vehicleBatRng: Miles travel possible fully charged batteryMPG: Average miles vehicle travel powered fuel per gasoline equivalent gallonGPM: Average gasoline equivalent gallons per mile vehicle travel powered fuelMPKWH: Average miles vehicle travel powered electricity per kilowatt-hourKWHPM: Average kilowatt-hours per mile vehicle travel powered electricityMPGe: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)ElecDvmtProp: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)FuelCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered fuelElecCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered electricityFor information see ","code":""},{"path":"verspm.html","id":"verspm-initialize-vetravelperformance","chapter":"10 VERSPM Model Details","heading":"10.2.29 Initialize-vetravelperformance","text":"module reads processes roadway DVMT operations inputs.\nfollowing input files optional. data provided, model calculates values based default data included package processed LoadDefaultRoadDvmtValues.R script.","code":""},{"path":"verspm.html","id":"user-input-files-28","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"base-year-heavy-truck-dvmt-region_base_year_dvmt.csv","chapter":"10 VERSPM Model Details","heading":"Base Year Heavy Truck DVMT (region_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants adjust heavy truck DVMT base yearHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueHvyTrkDvmt: Average daily vehicle miles travel roadways region heavy trucks base yearComSvcDvmtGrowthBasis: Factor used grow commercial service vehicle DVMT Marea base year valueHere snapshot file:","code":""},{"path":"verspm.html","id":"base-year-dvmt-marea_base_year_dvmt.csv","chapter":"10 VERSPM Model Details","heading":"Base Year DVMT (marea_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants modify adjust dvmt growth factors base year MareaUrbanLdvDvmt: Average daily vehicle miles travel roadways urbanized portion Marea light-duty vehicles base yearUrbanHvyTrkDvmt: Average daily vehicle miles travel roadways urbanized portion Marea heavy trucks base yearHere snapshot file:","code":""},{"path":"verspm.html","id":"dvmt-split-by-road-class-marea_dvmt_split_by_road_class.csv","chapter":"10 VERSPM Model Details","heading":"DVMT Split by Road Class (marea_dvmt_split_by_road_class.csv)","text":"input file OPTIONAL. needed user wants modify DVMT split different road classes. data can derived FHWA Highway Statistics data.LdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway aerial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial rdwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysHere snapshot file:","code":""},{"path":"verspm.html","id":"operations-deployment-effects-on-dvmt-marea_operations_deployment.csv","chapter":"10 VERSPM Model Details","heading":"Operations Deployment Effects on DVMT (marea_operations_deployment.csv)","text":"input file OPTIONAL. needed user wants modify proportion DVMT affected operations different road classes.RampMeterDeployProp: Proportion freeway DVMT affected ramp metering deploymentIncidentMgtDeployProp: Proportion freeway DVMT affected incident management deploymentSignalCoordDeployProp: Proportion arterial DVMT affected signal coordination deploymentAccessMgtDeployProp: Proportion arterial DVMT affected access management deploymentOtherFwyOpsDeployProp: Proportion freeway DVMT affected deployment user-defined freeway operations measuresOtherArtOpsDeployProp: Proportion arterial DVMT affected deployment user-defined arterial operations measuresHere snapshot file:","code":""},{"path":"verspm.html","id":"other-operations-effects-other_ops_effectiveness.csv","chapter":"10 VERSPM Model Details","heading":"Other Operations Effects (other_ops_effectiveness.csv)","text":"input file OPTIONAL. needed user wants modify delay effects operations different road classesLevel: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extremeArt_Rcr: Percentage reduction recurring arterial delay occur full deployment user-defined arterial operations measuresArt_NonRcr: Percentage reduction non-recurring arterial delay occur full deployment user-defined arterial operations measuresFwy_Rcr: Percentage reduction recurring freeway delay occur full deployment user-defined freeway operations measuresFwy_NonRcr: Percentage reduction non-recurring freeway delay occur full deployment user-defined freeway operations measuresHere snapshot file:","code":""},{"path":"verspm.html","id":"congestion-charges-marea_congestion_charges.csv","chapter":"10 VERSPM Model Details","heading":"Congestion Charges (marea_congestion_charges.csv)","text":"input file OPTIONAL. needed user wants add congestion charge policy vehicle travel using different congestion levels roadway classes.FwyNoneCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods congestionFwyModCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods moderate congestionFwyHvyCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods heavy congestionFwySevCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods severe congestionFwyExtCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods extreme congestionArtNoneCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods congestionArtModCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods moderate congestionArtHvyCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods heavy congestionArtSevCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods severe congestionArtExtCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods extreme congestionHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-27","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"module uses datasets datastore.","code":""},{"path":"verspm.html","id":"module-outputs-28","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"module produces datasets store datastore.","code":""},{"path":"verspm.html","id":"verspm-calculatebaseroaddvmt","chapter":"10 VERSPM Model Details","heading":"10.2.30 CalculateBaseRoadDvmt","text":"module calculates base year roadway DVMT vehicle type (light-duty, heavy truck, bus) distribution roadway DVMT vehicle type roadway classes (freeway, arterial, )\nmodule uses optional user inputs Initialize module run. Otherwise, uses default data instfolder","code":""},{"path":"verspm.html","id":"user-input-files-29","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"base-year-heavy-truck-dvmt-region_base_year_dvmt.csv-1","chapter":"10 VERSPM Model Details","heading":"Base Year Heavy Truck DVMT (region_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants adjust heavy truck DVMT base yearHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueHvyTrkDvmt: Average daily vehicle miles travel roadways region heavy trucks base yearComSvcDvmtGrowthBasis: Factor used grow commercial service vehicle DVMT Marea base year valueHere snapshot file:","code":""},{"path":"verspm.html","id":"base-year-dvmt-marea_base_year_dvmt.csv-1","chapter":"10 VERSPM Model Details","heading":"Base Year DVMT (marea_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants modify adjust dvmt growth factors base year MareaUrbanLdvDvmt: Average daily vehicle miles travel roadways urbanized portion Marea light-duty vehicles base yearUrbanHvyTrkDvmt: Average daily vehicle miles travel roadways urbanized portion Marea heavy trucks base yearHere snapshot file:","code":""},{"path":"verspm.html","id":"dvmt-split-by-road-class-marea_dvmt_split_by_road_class.csv-1","chapter":"10 VERSPM Model Details","heading":"DVMT Split by Road Class (marea_dvmt_split_by_road_class.csv)","text":"input file OPTIONAL. needed user wants modify dvmt split different road classes. data can derived FHWA Highway Statistics data.LdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway aerial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial rdwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-28","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"HvyTrkDvmtUrbanProp: Proportion Region heavy truck daily vehicle miles travel occurring urbanized area roadwaysHvyTrkDvmtIncomeFactor: Ratio Region base year heavy truck DVMT household incomeHvyTrkDvmtPopulationFactor: Ratio Region base year heavy truck DVMT populationHvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasHvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles travel rural (.e. non-urbanized) areasComSvcDvmtHhDvmtFactor: Ratio Marea base year commercial service DVMT household DVMTComSvcDvmtIncomeFactor: Ratio base year commercial service vehicle DVMT household incomeComSvcDvmtPopulationFactor: Ratio base year commercial service vehicle DVMT populationHvyTrkDvmtPopulationFactor: Ratio base year heavy truck DVMT populationLdvRoadDvmtLdvDemandRatio: Ratio light-duty vehicle (LDV) daily vehicle miles travel (DVMT) urbanized area roadways Marea total LDV DVMT households residing urbanized area, commercial service vehicle travel related household demand, LDV public transit DVMT.ComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityLdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadways","code":""},{"path":"verspm.html","id":"module-outputs-29","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"HvyTrkDvmtUrbanProp: Proportion Region heavy truck daily vehicle miles travel occurring urbanized area roadwaysHvyTrkDvmtIncomeFactor: Ratio Region base year heavy truck DVMT household incomeHvyTrkDvmtPopulationFactor: Ratio Region base year heavy truck DVMT populationHvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasHvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles travel rural (.e. non-urbanized) areasComSvcDvmtHhDvmtFactor: Ratio Marea base year commercial service DVMT household DVMTComSvcDvmtIncomeFactor: Ratio base year commercial service vehicle DVMT household incomeComSvcDvmtPopulationFactor: Ratio base year commercial service vehicle DVMT populationHvyTrkDvmtPopulationFactor: Ratio base year heavy truck DVMT populationLdvRoadDvmtLdvDemandRatio: Ratio light-duty vehicle (LDV) daily vehicle miles travel (DVMT) urbanized area roadways Marea total LDV DVMT households residing urbanized area, commercial service vehicle travel related household demand, LDV public transit DVMT.ComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityLdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadways","code":""},{"path":"verspm.html","id":"verspm-calculatefutureroaddvmt","chapter":"10 VERSPM Model Details","heading":"10.2.31 CalculateFutureRoadDvmt","text":"module calculates future year roadway DVMT vehicle type (light-duty, heavy truck, bus) distribution roadway DVMT vehicle type roadway classes (freeway, arterial, )\nmodule uses optional user inputs Initialize module run. Otherwise, uses default data instfolder","code":""},{"path":"verspm.html","id":"user-input-files-30","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"base-year-heavy-truck-dvmt-region_base_year_dvmt.csv-2","chapter":"10 VERSPM Model Details","heading":"Base Year Heavy Truck DVMT (region_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants adjust heavy truck DVMT base yearHvyTrkDvmtGrowthBasis: Factor used grow heavy truck DVMT base year valueHvyTrkDvmt: Average daily vehicle miles travel roadways region heavy trucks base yearComSvcDvmtGrowthBasis: Factor used grow commercial service vehicle DVMT Marea base year valueHere snapshot file:","code":""},{"path":"verspm.html","id":"base-year-dvmt-marea_base_year_dvmt.csv-2","chapter":"10 VERSPM Model Details","heading":"Base Year DVMT (marea_base_year_dvmt.csv)","text":"input file OPTIONAL. needed user wants modify adjust dvmt growth factors base year MareaUrbanLdvDvmt: Average daily vehicle miles travel roadways urbanized portion Marea light-duty vehicles base yearUrbanHvyTrkDvmt: Average daily vehicle miles travel roadways urbanized portion Marea heavy trucks base yearHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-29","chapter":"10 VERSPM Model Details","heading":"10.2.31.1 Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-30","chapter":"10 VERSPM Model Details","heading":"10.2.31.2 Module Outputs","text":"HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasHvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles travel rural (.e. non-urbanized) areasComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadways","code":""},{"path":"verspm.html","id":"verspm-calculateroadperformance","chapter":"10 VERSPM Model Details","heading":"10.2.32 CalculateRoadPerformance","text":"module splits light-duty vehicle (LDV) daily vehicle miles travel DVHT freeways arterials function relative speeds congestion prices. Speeds prices combined calculate average ‘effective’ speed freeways arterials. ratio freeway arterial ‘effective’ speeds split factor calculated metropolitan area used split LDV DVMT. Iteration used find equilibrium split value. addition LDV freeway DVMT arterial DVMT, following performance measures saved datastore:Average freeway speed congestion level;Average arterial speed congestion level;Average freeway delay congestion level;Average arterial delay congestion level;Freeway DVMT proportions congestion level;Arterial DVMT proportions congestion level;Average amount paid per mile congestion pricing fees; ,Vehicle hours delay vehicle type.","code":""},{"path":"verspm.html","id":"user-input-files-31","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"operations-deployment-effects-on-dvmt-marea_operations_deployment.csv-1","chapter":"10 VERSPM Model Details","heading":"Operations Deployment Effects on DVMT (marea_operations_deployment.csv)","text":"input file OPTIONAL. needed user wants modify proportion DVMT affected operations different road classes.RampMeterDeployProp: Proportion freeway DVMT affected ramp metering deploymentIncidentMgtDeployProp: Proportion freeway DVMT affected incident management deploymentSignalCoordDeployProp: Proportion arterial DVMT affected signal coordination deploymentAccessMgtDeployProp: Proportion arterial DVMT affected access management deploymentOtherFwyOpsDeployProp: Proportion freeway DVMT affected deployment user-defined freeway operations measuresOtherArtOpsDeployProp: Proportion arterial DVMT affected deployment user-defined arterial operations measuresHere snapshot file:","code":""},{"path":"verspm.html","id":"other-operations-effects-other_ops_effectiveness.csv-1","chapter":"10 VERSPM Model Details","heading":"Other Operations Effects (other_ops_effectiveness.csv)","text":"input file OPTIONAL. needed user wants modify delay effects operations different road classesLevel: Congestion levels: None = none, Mod = moderate, Hvy = heavy, Sev = severe, Ext = extremeArt_Rcr: Percentage reduction recurring arterial delay occur full deployment user-defined arterial operations measuresArt_NonRcr: Percentage reduction non-recurring arterial delay occur full deployment user-defined arterial operations measuresFwy_Rcr: Percentage reduction recurring freeway delay occur full deployment user-defined freeway operations measuresFwy_NonRcr: Percentage reduction non-recurring freeway delay occur full deployment user-defined freeway operations measuresHere snapshot file:","code":""},{"path":"verspm.html","id":"congestion-charges-marea_congestion_charges.csv-1","chapter":"10 VERSPM Model Details","heading":"Congestion Charges (marea_congestion_charges.csv)","text":"input file OPTIONAL. needed user wants add congestion charge policy vehicle travel using different congestion levels roadway classes.FwyNoneCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods congestionFwyModCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods moderate congestionFwyHvyCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods heavy congestionFwySevCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods severe congestionFwyExtCongChg: Charge per mile (U.S. dollars) vehicle travel freeways periods extreme congestionArtNoneCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods congestionArtModCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods moderate congestionArtHvyCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods heavy congestionArtSevCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods severe congestionArtExtCongChg: Charge per mile (U.S. dollars) vehicle travel arterials periods extreme congestionHere snapshot file:","code":""},{"path":"verspm.html","id":"user-input-parameters","chapter":"10 VERSPM Model Details","heading":"User Input Parameters","text":"Value time (valueoftime) : parameter set value time (base cost year dollars per hour). defined model_parameters.json","code":"{\"NAME\": \"ValueOfTime\", \n\"VALUE\": \"16\", \n\"TYPE\": \"double\", \n\"UNITS\": \"base cost year dollars per hour\"\n}"},{"path":"verspm.html","id":"internal-module-inputs-30","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-31","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"LdvFwyDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freewaysLdvArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysFwyNoneCongSpeed: Average freeway speed (miles per hour) congestionFwyModCongSpeed: Average freeway speed (miles per hour) congestion moderateFwyHvyCongSpeed: Average freeway speed (miles per hour) congestion heavyFwySevCongSpeed: Average freeway speed (miles per hour) congestion severeFwyExtCongSpeed: Average freeway speed (miles per hour) congestion extremeArtNoneCongSpeed: Average arterial speed (miles per hour) congestionArtModCongSpeed: Average arterial speed (miles per hour) congestion moderateArtHvyCongSpeed: Average arterial speed (miles per hour) congestion heavyArtSevCongSpeed: Average arterial speed (miles per hour) congestion severeArtExtCongSpeed: Average arterial speed (miles per hour) congestion extremeOthSpd: Average speed (miles per hour) roadwaysAveLdvSpd: Average light-duty vehicle speed (miles per hour) roadways weighted proportions light-duty vehicle travelFwyNoneCongDelay: Average freeway delay (hours per mile) occurring congestionFwyModCongDelay: Average freeway delay (hours per mile) occurring congestion moderateFwyHvyCongDelay: Average freeway delay (hours per mile) occurring congestion heavyFwySevCongDelay: Average freeway delay (hours per mile) occurring congestion severeFwyExtCongDelay: Average freeway delay (hours per mile) occurring congestion extremeArtNoneCongDelay: Average arterial delay (hours per mile) occurring congestionArtModCongDelay: Average arterial delay (hours per mile) occurring congestion moderateArtHvyCongDelay: Average arterial delay (hours per mile) occurring congestion heavyArtSevCongDelay: Average arterial delay (hours per mile) occurring congestion severeArtExtCongDelay: Average arterial delay (hours per mile) occurring congestion extremeFwyDvmtPropNoneCong: Proportion freeway DVMT occurring congestionFwyDvmtPropModCong: Proportion freeway DVMT occurring congestion moderateFwyDvmtPropHvyCong: Proportion freeway DVMT occurring congestion heavyFwyDvmtPropSevCong: Proportion freeway DVMT occurring congestion severeFwyDvmtPropExtCong: Proportion freeway DVMT occurring congestion extremeArtDvmtPropNoneCong: Proportion arterial DVMT occurring congestionArtDvmtPropModCong: Proportion arterial DVMT occurring congestion moderateArtDvmtPropHvyCong: Proportion arterial DVMT occurring congestion heavyArtDvmtPropSevCong: Proportion arterial DVMT occurring congestion severeArtDvmtPropExtCong: Proportion arterial DVMT occurring congestion extremeAveCongPrice: Average price paid (dollars per mile) congestion feesFor information see ","code":""},{"path":"verspm.html","id":"verspm-calculatempgmpkwhadjustments","chapter":"10 VERSPM Model Details","heading":"10.2.33 CalculateMpgMpkwhAdjustments","text":"module calculates adjustments fuel economy electric energy economy plug-vehicles) resulting traffic congestion, speed smoothing(.e. active traffic management reduces speed variation), ecodriving practices.","code":""},{"path":"verspm.html","id":"user-input-files-32","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"speed-smoothing-and-eco-drive-marea_speed_smooth_ecodrive.csv","chapter":"10 VERSPM Model Details","heading":"Speed Smoothing and Eco-drive (marea_speed_smooth_ecodrive.csv)","text":"input file supplies information deployment speed smoothing ecodriving road class vehicle type.FwySmooth:Fractional deployment speed smoothing traffic management freeways, 0 deployment 1 full potential fuel savingsArtSmooth: Fractional deployment speed smoothing traffic management arterials, 0 deployment 1 full potential fuel savingsLdvEcoDrive: Eco-driving penetration light-duty vehicles; fraction vehicles 0 1HvyTrkEcoDrive: Eco-driving penetration heavy-duty vehicles; fraction vehicles 0 1Here snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-31","chapter":"10 VERSPM Model Details","heading":"10.2.33.1 Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-32","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"LdvSpdSmoothFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due speed smoothingHvyTrkSpdSmoothFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due speed smoothingBusSpdSmoothFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due speed smoothingLdvEcoDriveFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due eco-drivingHvyTrkEcoDriveFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due eco-drivingBusEcoDriveFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due eco-drivingLdIceFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due congestionLdHevFactor: Proportional adjustment light-duty hybrid-electric vehicle (HEV) MPG due congestionLdEvFactor: Proportional adjustment light-duty battery electric vehicle (EV) MPkWh due congestionLdFcvFactor: Proportional adjustment light-duty fuel cell vehicle (FCV) MPkWh due congestionHdIceFactor: Proportional adjustment heavy-duty internal combustion engine (ICE) vehicle MPG due congestion","code":""},{"path":"verspm.html","id":"verspm-adjusthhvehiclempgmpkwh","chapter":"10 VERSPM Model Details","heading":"10.2.34 AdjustHhVehicleMpgMpkwh","text":"module adjusts fuel economy power efficiency household vehicles reflect roadway congestion.","code":""},{"path":"verspm.html","id":"user-input-files-33","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"car-service-vehicle-powertrains-region_carsvc_powertrain_prop.csv-2","chapter":"10 VERSPM Model Details","heading":"10.2.34.0.1 Car Service Vehicle Powertrains (region_carsvc_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion car services.CarSvcAutoPropIcev: Proportion car service automobile travel powered internal combustion engine powertrainsCarSvcAutoPropHev: Proportion car service automobile travel powered hybrid electric powertrainsCarSvcAutoPropBev: Proportion car service automobile travel powered battery electric powertrainsCarSvcLtTrkPropIcev: Proportion car service light truck travel powered internal combustion engine powertrainsCarSvcLtTrkPropHev: Proportion car service light truck travel powered hybrid electric powertrainsCarSvcLtTrkPropBev: Proportion car service light truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-32","chapter":"10 VERSPM Model Details","heading":"10.2.34.1 Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-33","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"MPG: Average miles vehicle travel powered fuel per gasoline equivalent gallonGPM: Average gasoline equivalent gallons per mile vehicle travel powered fuelMPKWH: Average miles vehicle travel powered electricity per kilowatt-hourKWHPM: Average kilowatt-hours per mile vehicle travel powered electricityMPGe: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)ElecDvmtProp: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)FuelCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered fuelIsEcoDrive: Flag identifying whether drivers household eco-drivers","code":""},{"path":"verspm.html","id":"verspm-calculatevehicleoperatingcost","chapter":"10 VERSPM Model Details","heading":"10.2.35 CalculateVehicleOperatingCost","text":"module calculates vehicle operating costs per mile travel uses costs determine proportional split DVMT among household vehicles. module also calculates average --pocket costs per mile vehicle household, well cost social environmental impacts, road use taxes per mile vehicle travel.","code":""},{"path":"verspm.html","id":"user-input-files-34","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"vehicle-access-time-azone_vehicle_access_times.csv","chapter":"10 VERSPM Model Details","heading":"Vehicle Access Time (azone_vehicle_access_times.csv)","text":"file supplies data vehicle access eagress time Azone.OwnedVehAccessTime:Average amount time minutes required access egress household-owned vehicle tripHighCarSvcAccessTime: Average amount time minutes required access egress high service level car service tripLowCarSvcAccessTime: Average amount time minutes required access egress low service level car service tripHere snapshot file:","code":""},{"path":"verspm.html","id":"fuel-and-electricity-costs-azone_fuel_power_cost.csv","chapter":"10 VERSPM Model Details","heading":"Fuel and Electricity Costs (azone_fuel_power_cost.csv)","text":"file supplies data retail cost fuel electricity Azone. input can developed using local history querying Energy Information Administration (EIA) historical gasoline diesel power prices.FuelCost:Retail cost fuel per gas gallon equivalent dollars (taxes added)PowerCost: Retail cost electric power per kilowatt-hour dollars (taxes added)snapshot file:","code":""},{"path":"verspm.html","id":"vehicle-taxes-azone_veh_use_taxes.csv","chapter":"10 VERSPM Model Details","heading":"Vehicle Taxes (azone_veh_use_taxes.csv)","text":"file supplies data vehicle taxes related vehicle operating costs.FuelTax:Tax per gas gallon equivalent fuel dollarsVmtTax: Tax per mile vehicle travel dollarsPevSurchgTaxProp: Proportion equivalent gas tax per mile paid hydrocarbon fuel consuming vehicles charged plug-electric vehicles per mile travel powered electricityHere snapshot file:","code":""},{"path":"verspm.html","id":"external-costs-region_prop_externalities_paid.csv","chapter":"10 VERSPM Model Details","heading":"External Costs (region_prop_externalities_paid.csv)","text":"Proportional external costs region. input file allocates percent total cost charged region vehicles per mile basis.PropClimateCostPaid: Proportion climate change costs paid users (.e. ratio carbon taxes climate change costs). dollar value Climate Cost Paid given optional input file: region_co2e_costs.csv.PropOtherExtCostPaid: Proportion social costs paid users. social costs paid included input file within VETravelPerformance package. information values click .snapshot file:","code":""},{"path":"verspm.html","id":"user-input-parameters-1","chapter":"10 VERSPM Model Details","heading":"User Input Parameters","text":"Value time (valueoftime): parameter set value time (base cost year dollars per hour). defined model_parameters.json","code":"{\"NAME\": \"ValueOfTime\", \n\"VALUE\": \"16\", \n\"TYPE\": \"double\", \n\"UNITS\": \"base cost year dollars per hour\"\n}"},{"path":"verspm.html","id":"internal-module-inputs-33","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-34","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"AveVehCostPM: Average --pocket cost dollars per mile vehicle travelAveSocEnvCostPM: Average cost dollars social environmental impacts per mile vehicle travelAveRoadUseTaxPM: Average road use taxes dollars collected per mile vehicle travelDvmtProp: Proportion household DVMT allocated vehicleAveGPM: Average gasoline equivalent gallons per mile household vehicle travelAveKWHPM: Average kilowatt-hours per mile household vehicle travelAveCO2ePM: Average grams carbon-dioxide equivalents produced per mile household vehicle travel","code":""},{"path":"verspm.html","id":"verspm-budgethouseholddvmt","chapter":"10 VERSPM Model Details","heading":"10.2.36 BudgetHouseholdDvmt","text":"module adjusts average household DVMT keep quantity within household operating cost limits. limit household calculated several steps. First, proportion household’s income may spent vehicle operating costs calculated using model explained . called budget proportion. adjusted household income\nbudget calculation purposes calculated adding annual cost insurance households subscribing payd---drive (PAYD) insurance, cash-parking payments workers work employer cash--buy-back parking, vehicle ownership cost savings households substitute high level car service one household vehicles. adjusted household income multiplied budget proportion divided average vehicle operating cost per mile household determine maximum household DVMT fits within household budget. household DVMT set lesser budget maximum modeled household DVMT.budget proportion model estimated using data Bureau Labor’s consumer expenditure survey years 2003 2015. data used nominal dollar expenditures household income category year transportation category. values operating cost categories (gas oil, maintenance repair) summed divided midpoint value income category calculate budget proportion income group year. mean value computed income group. budget proportions income group year divided mean values income group normalize values. standard deviation combined normalized values computed value 3 deviations mean set maximum normalized value. mean values income group multiplied normalized maximum derive budget proportion maximum income group. smoothed splines model budget proportion function income estimated calculated budget proportion maximums. model used calculate budget proportion household based household income. minimum \nmaximum values calculated budget proportion maximums used constraints avoid unreasonable results low incomes high incomes.","code":""},{"path":"verspm.html","id":"user-input-files-35","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"module user-supplied input files","code":""},{"path":"verspm.html","id":"internal-module-inputs-34","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-35","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"Dvmt: Average daily vehicle miles traveled household autos light trucksUrbanHhDvmt: Average daily vehicle miles traveled autos light trucks households residing urbanized portion MareaRuralHhDvmt: Average daily vehicle miles traveled autos light trucks households residing non-urbanized portion MareaDailyGGE: Gasoline equivalent gallons consumed per day household vehicle travelDailyKWH: Kilowatt-hours consumed per day household vehicle travelDailyCO2e: Grams carbon-dioxide equivalents produced per day household vehicle travelWalkTrips: Average number walk trips per year household membersBikeTrips: Average number bicycle trips per year household membersTransitTrips: Average number public transit trips per year household membersVehicleTrips: Average number vehicle trips per day household members","code":""},{"path":"verspm.html","id":"verspm-calculatecomenergyandemissions","chapter":"10 VERSPM Model Details","heading":"10.2.37 CalculateComEnergyAndEmissions","text":"module calculates energy consumption carbon emissions heavy trucks light-duty commercial service vehicles. calculate values car service vehicles calculated part household emissions. also calculate public transit emissions calculated CalculateTransitEnergyAndEmissions module.","code":""},{"path":"verspm.html","id":"user-input-files-36","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"commercial-service-light-trucks-proportion-region_comsvc_lttrk_prop.csv","chapter":"10 VERSPM Model Details","heading":"Commercial Service Light Trucks Proportion (region_comsvc_lttrk_prop.csv)","text":"file supplies data light truck proportion commercial vehicles region.ComSvcLtTrkProp: Regional proportion commercial service vehicles light trucksHere snapshot file:","code":""},{"path":"verspm.html","id":"commercial-service-vehicle-powertrains-region_comsvc_powertrain_prop.csv-1","chapter":"10 VERSPM Model Details","heading":"Commercial Service Vehicle Powertrains (region_comsvc_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion commercial vehicles.ComSvcAutoPropIcev: Proportion commercial service automobile travel powered internal combustion engine powertrainsComSvcAutoPropHev: Proportion commercial service automobile travel powered hybrid electric powertrainsComSvcAutoPropBev: Proportion commercial service automobile travel powered battery electric powertrainsComSvcLtTrkPropIcev: Proportion commercial service light truck travel powered internal combustion engine powertrainsComSvcLtTrkPropHev: Proportion commercial service light truck travel powered hybrid electric powertrainsComSvcLtTrkPropBev: Proportion commercial service light truck travel powered battery electric powertrainssHere snapshot file:","code":""},{"path":"verspm.html","id":"heavy-duty-truck-powertrains-region_hvytrk_powertrain_prop.csv-1","chapter":"10 VERSPM Model Details","heading":"Heavy duty Truck Powertrains (region_hvytrk_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify powertrain proportion heavy duty trucks.HvyTrkPropIcev: Proportion heavy truck travel powered internal combustion engine powertrainsHvyTrkPropHev: Proportion heavy truck travel powered hybrid electric powertrainsHvyTrkPropBev: Proportion heavy truck travel powered battery electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-35","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-36","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"ComSvcUrbanGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated urban household activity gas gallon equivalentsComSvcUrbanGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated urban household activity gas gallon equivalentsComSvcRuralGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated rural household activity gas gallon equivalentsComSvcRuralGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated rural household activity gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Marea gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Marea gas gallon equivalentsComSvcUrbanKWH: Average daily amount electricity consumed commercial service vehicles associated urban household activity kilowatt-hoursComSvcUrbanKWH: Average daily amount electricity consumed commercial service vehicles associated urban household activity kilowatt-hoursComSvcRuralKWH: Average daily amount electricity consumed commercial service vehicles associated rural household activity kilowatt-hoursComSvcRuralKWH: Average daily amount electricity consumed commercial service vehicles associated rural household activity kilowatt-hoursComSvcUrbanCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated urban household activity gramsComSvcUrbanCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated urban household activity gramsComSvcRuralCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated rural household activity gramsComSvcRuralCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated rural household activity gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Marea gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Marea gramsComSvcAveUrbanAutoCO2eRate: Average amount carbon-dioxide equivalents produced commercial service automobiles per mile travel urbanized area roadways grams per mileComSvcAveUrbanAutoCO2eRate: Average amount carbon-dioxide equivalents produced commercial service automobiles per mile travel urbanized area roadways grams per mileComSvcAveUrbanLtTrkCO2eRate: Average amount carbon-dioxide equivalents produced commercial service light trucks per mile travel urbanized area roadways grams per mileComSvcAveUrbanLtTrkCO2eRate: Average amount carbon-dioxide equivalents produced commercial service light trucks per mile travel urbanized area roadways grams per mileHvyTrkAveUrbanCO2eRate: Average amount carbon-dioxide equivalents produced heavy trucks per mile travel urbanized area roadways grams per mileHvyTrkAveUrbanCO2eRate: Average amount carbon-dioxide equivalents produced heavy trucks per mile travel urbanized area roadways grams per mileHvyTrkRuralGGE: Average daily amount hydrocarbon fuels consumed heavy trucks rural roadways Region gas gallon equivalentsHvyTrkRuralGGE: Average daily amount hydrocarbon fuels consumed heavy trucks rural roadways Region gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Region gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Region gas gallon equivalentsHvyTrkRuralKWH: Average daily amount electricity consumed heavy trucks rural roadways Region kilowatt-hoursHvyTrkRuralKWH: Average daily amount electricity consumed heavy trucks rural roadways Region kilowatt-hoursHvyTrkUrbanKWH: Average daily amount electricity consumed heavy trucks urbanized area roadways Region kilowatt-hoursHvyTrkUrbanKWH: Average daily amount electricity consumed heavy trucks urbanized area roadways Region kilowatt-hoursHvyTrkRuralCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks rural roadways Region gramsHvyTrkRuralCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks rural roadways Region gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Region gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Region grams","code":""},{"path":"verspm.html","id":"verspm-calculateptranenergyandemissions","chapter":"10 VERSPM Model Details","heading":"10.2.38 CalculatePtranEnergyAndEmissions","text":"module calculates energy consumption carbon emissions public transit vehicle emissions urbanized areas.","code":""},{"path":"verspm.html","id":"user-input-files-37","chapter":"10 VERSPM Model Details","heading":"User Input Files","text":"","code":""},{"path":"verspm.html","id":"transit-powertrain-proportions-by-transit-vehicle-type-marea_transit_powertrain_prop.csv-1","chapter":"10 VERSPM Model Details","heading":"Transit Powertrain Proportions by Transit Vehicle Type (marea_transit_powertrain_prop.csv)","text":"input file OPTIONAL. needed user wants modify mixes transit vehicle powertrains.VanPropIcev: Proportion transit van travel using internal combustion engine powertrainsVanPropHev: Proportion transit van travel using hybrid electric powertrainsVanPropBev: Proportion transit van travel using battery electric powertrainsBusPropIcev: Proportion transit bus travel using internal combustion engine powertrainsBusPropHev: Proportion transit bus travel using hybrid electric powertrainsBusPropBev: Proportion transit bus travel using battery electric powertrainsRailPropIcev: Proportion transit rail travel using internal combustion engine powertrainsRailPropHev: Proportion transit rail travel using hybrid electric powertrainsRailPropEv: Proportion transit rail travel using electric powertrainsHere snapshot file:","code":""},{"path":"verspm.html","id":"internal-module-inputs-36","chapter":"10 VERSPM Model Details","heading":"Internal Module Inputs","text":"","code":""},{"path":"verspm.html","id":"module-outputs-37","chapter":"10 VERSPM Model Details","heading":"Module Outputs","text":"BusGGE: Average daily amount hydrocarbon fuels consumed bus transit vehicles urbanized area gas gallon equivalentsRailGGE: Average daily amount hydrocarbon fuels consumed rail transit vehicles urbanized area gas gallon equivalentsVanGGE: Average daily amount hydrocarbon fuels consumed van transit vehicles urbanized area gas gallon equivalentsBusKWH: Average daily amount electricity consumed bus transit vehicles urbanized area kilowatt-hoursRailKWH: Average daily amount electricity consumed rail transit vehicles urbanized area kilowatt-hoursVanKWH:Average daily amount electricity consumed van transit vehicles urbanized area kilowatt-hoursBusCO2e: Average daily amount carbon-dioxide equivalents produced bus transit vehicles urbanized area gramsRailCO2e: Average daily amount carbon-dioxide equivalents produced rail transit vehicles urbanized area gramsVanCO2e: Average daily amount carbon-dioxide equivalents produced van transit vehicles urbanized area gramsBusCO2eRate: Average amount carbon-dioxide equivalents produced bus transit vehicles per mile travel urbanized area grams per mileRailCO2eRate: Average amount carbon-dioxide equivalents produced rail transit vehicles per mile travel urbanized area grams per mileVanCO2eRate: Average amount carbon-dioxide equivalents produced van transit vehicles per mile travel urbanized area grams per mile","code":""},{"path":"verspm.html","id":"model-outputs","chapter":"10 VERSPM Model Details","heading":"10.3 Model Outputs","text":"large number performance metrics produced run RPAT model, including environment energy impacts, financial economic impacts, community impacts.full list outputs available follows. Based geo level, find metrics three files ( Azone.csv , Bzone.csv , Marea.csv ) outputs folderVanDvmt: Total daily miles traveled vans various sizes provide demand responsive, vanpool, similar services.BusDvmt: Total daily miles traveled buses various sizes provide bus service various types.RailDvmt: Total daily miles traveled light rail, heavy rail, commuter rail, similar types vehicles.UrbanHhDvmt: Average daily vehicle miles traveled autos light trucks households residing urbanized portion MareaRuralHhDvmt: Average daily vehicle miles traveled autos light trucks households residing non-urbanized portion MareaTownHhDvmt: Average daily vehicle miles traveled autos light trucks households residing town (urban urbanized) portion MareaComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityHvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadwaysLdvFwyDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freewaysLdvArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysFwyNoneCongSpeed: Average freeway speed (miles per hour) congestionFwyModCongSpeed: Average freeway speed (miles per hour) congestion moderateFwyHvyCongSpeed: Average freeway speed (miles per hour) congestion heavyFwySevCongSpeed: Average freeway speed (miles per hour) congestion severeFwyExtCongSpeed: Average freeway speed (miles per hour) congestion extremeArtNoneCongSpeed: Average arterial speed (miles per hour) congestionArtModCongSpeed: Average arterial speed (miles per hour) congestion moderateArtHvyCongSpeed: Average arterial speed (miles per hour) congestion heavyArtSevCongSpeed: Average arterial speed (miles per hour) congestion severeArtExtCongSpeed: Average arterial speed (miles per hour) congestion extremeOthSpd: Average speed (miles per hour) roadwaysAveLdvSpd: Average light-duty vehicle speed (miles per hour) roadways weighted proportions light-duty vehicle travelFwyNoneCongDelay: Average freeway delay (hours per mile) occurring congestionFwyModCongDelay: Average freeway delay (hours per mile) occurring congestion moderateFwyHvyCongDelay: Average freeway delay (hours per mile) occurring congestion heavyFwySevCongDelay: Average freeway delay (hours per mile) occurring congestion severeFwyExtCongDelay: Average freeway delay (hours per mile) occurring congestion extremeArtNoneCongDelay: Average arterial delay (hours per mile) occurring congestionArtModCongDelay: Average arterial delay (hours per mile) occurring congestion moderateArtHvyCongDelay: Average arterial delay (hours per mile) occurring congestion heavyArtSevCongDelay: Average arterial delay (hours per mile) occurring congestion severeArtExtCongDelay: Average arterial delay (hours per mile) occurring congestion extremeFwyDvmtPropNoneCong: Proportion freeway DVMT occurring congestionFwyDvmtPropModCong: Proportion freeway DVMT occurring congestion moderateFwyDvmtPropHvyCong: Proportion freeway DVMT occurring congestion heavyFwyDvmtPropSevCong: Proportion freeway DVMT occurring congestion severeFwyDvmtPropExtCong: Proportion freeway DVMT occurring congestion extremeArtDvmtPropNoneCong: Proportion arterial DVMT occurring congestionArtDvmtPropModCong: Proportion arterial DVMT occurring congestion moderateArtDvmtPropHvyCong: Proportion arterial DVMT occurring congestion heavyArtDvmtPropSevCong: Proportion arterial DVMT occurring congestion severeArtDvmtPropExtCong: Proportion arterial DVMT occurring congestion extremeAveCongPrice: Average price paid (dollars per mile) congestion feesLdvSpdSmoothFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due speed smoothingHvyTrkSpdSmoothFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due speed smoothingBusSpdSmoothFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due speed smoothingLdvEcoDriveFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due eco-drivingHvyTrkEcoDriveFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due eco-drivingBusEcoDriveFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due eco-drivingLdIceFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due congestionLdHevFactor: Proportional adjustment light-duty hybrid-electric vehicle (HEV) MPG due congestionLdEvFactor: Proportional adjustment light-duty battery electric vehicle (EV) MPkWh due congestionLdFcvFactor: Proportional adjustment light-duty fuel cell vehicle (FCV) MPkWh due congestionHdIceFactor: Proportional adjustment heavy-duty internal combustion engine (ICE) vehicle MPG due congestionComSvcUrbanGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated urban household activity gas gallon equivalentsComSvcRuralGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated rural household activity gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Marea gas gallon equivalentsComSvcUrbanKWH: Average daily amount electricity consumed commercial service vehicles associated urban household activity kilowatt-hoursComSvcRuralKWH: Average daily amount electricity consumed commercial service vehicles associated rural household activity kilowatt-hoursComSvcUrbanCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated urban household activity gramsComSvcRuralCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated rural household activity gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Marea gramsComSvcAveUrbanAutoCO2eRate: Average amount carbon-dioxide equivalents produced commercial service automobiles per mile travel urbanized area roadways grams per mileComSvcAveUrbanLtTrkCO2eRate: Average amount carbon-dioxide equivalents produced commercial service light trucks per mile travel urbanized area roadways grams per mileHvyTrkAveUrbanCO2eRate: Average amount carbon-dioxide equivalents produced heavy trucks per mile travel urbanized area roadways grams per mileHvyTrkRuralGGE: Average daily amount hydrocarbon fuels consumed heavy trucks rural roadways Region gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Region gas gallon equivalentsHvyTrkRuralKWH: Average daily amount electricity consumed heavy trucks rural roadways Region kilowatt-hoursHvyTrkUrbanKWH: Average daily amount electricity consumed heavy trucks urbanized area roadways Region kilowatt-hoursHvyTrkRuralCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks rural roadways Region gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Region gramsBusGGE: Average daily amount hydrocarbon fuels consumed bus transit vehicles urbanized area gas gallon equivalentsRailGGE: Average daily amount hydrocarbon fuels consumed rail transit vehicles urbanized area gas gallon equivalentsVanGGE: Average daily amount hydrocarbon fuels consumed van transit vehicles urbanized area gas gallon equivalentsBusKWH: Average daily amount electricity consumed bus transit vehicles urbanized area kilowatt-hoursRailKWH: Average daily amount electricity consumed rail transit vehicles urbanized area kilowatt-hoursVanKWH:Average daily amount electricity consumed van transit vehicles urbanized area kilowatt-hoursBusCO2e: Average daily amount carbon-dioxide equivalents produced bus transit vehicles urbanized area gramsRailCO2e: Average daily amount carbon-dioxide equivalents produced rail transit vehicles urbanized area gramsVanCO2e: Average daily amount carbon-dioxide equivalents produced van transit vehicles urbanized area gramsBusCO2eRate: Average amount carbon-dioxide equivalents produced bus transit vehicles per mile travel urbanized area grams per mileRailCO2eRate: Average amount carbon-dioxide equivalents produced rail transit vehicles per mile travel urbanized area grams per mileVanCO2eRate: Average amount carbon-dioxide equivalents produced van transit vehicles per mile travel urbanized area grams per mileAveVehCostPM: Average --pocket cost dollars per mile vehicle travelAveSocEnvCostPM: Average cost dollars social environmental impacts per mile vehicle travelAveRoadUseTaxPM: Average road use taxes dollars collected per mile vehicle travelWalkTrips: Average number walk trips per year household membersBikeTrips: Average number bicycle trips per year household membersTransitTrips: Average number public transit trips per year household membersVehicleTrips: Average number vehicle trips per day household membersFor simplicity, eight key metrics calculated multiple scenario runs shown Scenario Viewer output page:GHG Target Reduction: percentage reduction light-duty vehicle CHG emissionsDVMT Per Capita: daily vehicle miles travel residents divided populationWalk Trips Per Capita: annual residents walk trips ( including recreation walk transit)Air Pollution Emissions: daily metric tons pollutants emitted light-duty vehicle travelAnnual Fuel Use: annual million gallons gasoline fuels consumed light-duty vehicle travelTruck Delay: daily vehicle-hours delay heavy truck trael area roadsHousehold Vehicle Cost Percentage Income: average percentage income spent households owning operating light-duty vehiclesLow Income Household Vehicle Cost Percentage Income: average percentage income spent low-income households owning operating light-duty vehicles","code":""},{"path":"vestate.html","id":"vestate","chapter":"11 VE-State Model Details","heading":"11 VE-State Model Details","text":"","code":""},{"path":"vestate.html","id":"ve-state-vs.-ve-rspm","chapter":"11 VE-State Model Details","heading":"11.1 VE-State Vs. VE-RSPM","text":"main difference VE-RSPM models VE-State models number VE-RSPM inputs specified Bzone level. Bzones sub-regional geographies, typically census tracts block groups. Diagrams available VisionEval wiki visual explanation VE-RSPM VE-State geographies.\nAlso, note ‘Azones’ typically counties, ‘Mareas’ metropolitan areas, typically defined boundaries MPO.following diagrams show two model differ early stages.\nVE-State uses simulation methods generate land use housing input Bzone level.","code":""},{"path":"vestate.html","id":"ve-rspm-structure","chapter":"11 VE-State Model Details","heading":"11.1.1 VE-RSPM Structure","text":"","code":""},{"path":"vestate.html","id":"ve-state-structure","chapter":"11 VE-State Model Details","heading":"11.1.2 VE-State Structure","text":"Bzone level attributes required number modules methods need developed synthesizing representative set Bzones characteristics policies attributes specified Azone Marea levels. Something like done GreenSTEP model likely distribution neighborhood population density synthesized overall metropolitan area density. Azone level inputs provided base year population area development type (metropolitan, town, rural), population growth development type, ratio urban area growth population growth. inputs, average density calculated Azone development type model applied synthesize distribution neighborhood densities average density.\nVE-RSPM modules assign Bzone characteristics contained VELandUse package. modules developed synthesize Bzones characteristics placed VESimLandUse package. VE-State model run, modules VESimLandUse package run instead modules VELandUse package. Otherwise model setup nearly VE-State VE-RSPM. use VESimLandUse modules limited statewide applications however. Users simulate Bzones VE-RSPM-type application enable metropolitan area planners easily define model alternative land use scenarios done VE-RPAT (Rapid Policy Analysis Tool) applications.","code":""},{"path":"vestate.html","id":"required-bzone-attributes","chapter":"11 VE-State Model Details","heading":"11.2 Required Bzone Attributes","text":"Land use modeling VE-RSPM basis land use modeling VE-State. modules designed produce datasets needed run new multi-modal travel model. multi-modal module requires several activity density, diversity (.e., activity mixing), destination accessibility measures turn require households employment located Bzone level calculate measures. addition, multi-modal network service level measures need calculated. Second, locating jobs Bzone level allows travel demand management (TDM) parking pricing modules establish realistic relationships policies households affect. also allows household workers assigned job sites information can used translate job site TDM parking policies back households. Finally, simulated households assigned Bzones. VE-RSPM number single family multifamily dwelling units assigned Bzones inputs along relative income distribution households Bzone. VE-RSPM models housing choice household based overall supply housing type Azone household characteristics. model assigns household Bzone based household’s housing choice income, relative supplies housing type household income distribution Bzone. Bzone attributes need synthesized :Destination accessibility (.e., accessibility jobs housing) measured consistent used multi-modal travel model – information one 5D measured used VE-RSPM multi-modal travel model. Since synthetic zones won’t physical locations, can’t calculated simply households employment zone.Number households proportional split dwelling units single family multifamily – Number households dwelling unit split Bzone needed order assign households Bzones.Number jobs sector (retail, service, ) used calculating several diversity measures used RSPM multi-modal travel model. number jobs also used associate household workers workplace BzonesArea type development type – practical system zonal development classification needed organizing policy inputs. Policies travel demand management policies specified Azone area type /development type. designations also used calculation design distance transit ‘5D’ measure categories used VE-RSPM multi-modal travel model.","code":""},{"path":"vestate.html","id":"approach-for-synthesizing-bzones-and-their-attributes","chapter":"11 VE-State Model Details","heading":"11.3 Approach for Synthesizing Bzones and their Attributes","text":"user provides inputs :Azone proportional split dwelling units location type (metropolitan, town rural)Azone proportional split workers job site location types (example, proportions rural residents Azone work rural locations, town locations, metropolitan area)Marea proportional split Marea employment among AzonesTotal activity – numbers households jobs – determine number SimBzones Azone. SimBzones equal amounts activity unequal areas since activity density vary among SimBzones. appropriate average SimBzone activity value determined evaluation EPA Smart Location Database (SLD).Total activity – numbers households jobs – determine number SimBzones Azone. SimBzones equal amounts activity unequal areas since activity density vary among SimBzones. appropriate average SimBzone activity value determined evaluation EPA Smart Location Database (SLD).Models applied select destination accessibility value Bzone. metropolitan type development, model create distribution destination accessibility values consistent overall activity density metropolitan area. Random sampling distribution used assign destination accessibility values metropolitan SimBzones. Models also developed town rural types, investigation needed order determine form.Models applied select destination accessibility value Bzone. metropolitan type development, model create distribution destination accessibility values consistent overall activity density metropolitan area. Random sampling distribution used assign destination accessibility values metropolitan SimBzones. Models also developed town rural types, investigation needed order determine form.Activity density SimBzones determined function destination accessibility zone (destination accessibility measure activity density larger geographic scale). model estimated SLD creates distribution zone densities function destination accessibility. adjustment process, iterative proportional fitting process (IPF), used adjust densities destination accessibilities overall activity density zones metropolitan area equal input valueActivity density SimBzones determined function destination accessibility zone (destination accessibility measure activity density larger geographic scale). model estimated SLD creates distribution zone densities function destination accessibility. adjustment process, iterative proportional fitting process (IPF), used adjust densities destination accessibilities overall activity density zones metropolitan area equal input valueFurther subdivision metropolitan area area types done function destination accessibility activity density zone. Four area types proposed: urban core, close community, suburban/town, low density/rural. final typology relationship area types destination accessibility activity density developed examination SLD dataset. envisioned area types defined fuzzy sets rather crisp sets. Although SimBzones may wholly one type, many SimBzones degrees membership several types. Using fuzzy sets realistic recognition nature area types avoids aberrations resulting threshold effects.subdivision metropolitan area area types done function destination accessibility activity density zone. Four area types proposed: urban core, close community, suburban/town, low density/rural. final typology relationship area types destination accessibility activity density developed examination SLD dataset. envisioned area types defined fuzzy sets rather crisp sets. Although SimBzones may wholly one type, many SimBzones degrees membership several types. Using fuzzy sets realistic recognition nature area types avoids aberrations resulting threshold effects.total activity SimBzone split households jobs using model relates zonal mixing destination accessibility, activity density, area type. model specified estimated based investigations using SLD data. anticipated model produce distributions activity splits values drawn. IPF adjustment process used adjust values aggregation splits SimBzones Azone consistent Azone inputs. model also need specify split land area households jobs.total activity SimBzone split households jobs using model relates zonal mixing destination accessibility, activity density, area type. model specified estimated based investigations using SLD data. anticipated model produce distributions activity splits values drawn. IPF adjustment process used adjust values aggregation splits SimBzones Azone consistent Azone inputs. model also need specify split land area households jobs.number households determined SimBzone, split dwelling units housing type (single family, multifamily) function activity density. SLD census data used develop model. IPF used fit distribution SimBzone values Azone level control totals. allow users specify Azone ratios policy inputs.number households determined SimBzone, split dwelling units housing type (single family, multifamily) function activity density. SLD census data used develop model. IPF used fit distribution SimBzone values Azone level control totals. allow users specify Azone ratios policy inputs.variant VE-RSPM housing model applied assign households housing types Bzones. One thing worked whether allocation SimBzones considers household income . VE-RSPM, relative Bzone income distributions input used process allocating households Bzones. enables VE-State users model general relationships income parts metropolitan area (e.g., effect gentrification urban core).variant VE-RSPM housing model applied assign households housing types Bzones. One thing worked whether allocation SimBzones considers household income . VE-RSPM, relative Bzone income distributions input used process allocating households Bzones. enables VE-State users model general relationships income parts metropolitan area (e.g., effect gentrification urban core).Jobs SimBzone split numbers retail, service, jobs. approach yet determined. SimBzone splits constrained total Azone splits inputs. model probably function destination accessibility, employment density, mixing households employment SimBzone. SLD data used develop estimate model. Thought given whether control totals mix metropolitan area. , IPF adjustment process need used match totals.Jobs SimBzone split numbers retail, service, jobs. approach yet determined. SimBzone splits constrained total Azone splits inputs. model probably function destination accessibility, employment density, mixing households employment SimBzone. SLD data used develop estimate model. Thought given whether control totals mix metropolitan area. , IPF adjustment process need used match totals.Workers assigned SimBzone job sites. done yet determined. proposed agile development approach used first iteration model random assignment workers job sites. extensions considered time/budget investigation done using LEHD data SLD data look relationships worker residence area type worker job site area type. Relative income also considered.Workers assigned SimBzone job sites. done yet determined. proposed agile development approach used first iteration model random assignment workers job sites. extensions considered time/budget investigation done using LEHD data SLD data look relationships worker residence area type worker job site area type. Relative income also considered.numbers households numbers jobs type assigned SimBzones, remaining density diversity measures can calculated.numbers households numbers jobs type assigned SimBzones, remaining density diversity measures can calculated.distance transit measure modeled metropolitan SimBzones function metropolitan-level transit supply measure SimBzone attributes destinationThe distance transit measure modeled metropolitan SimBzones function metropolitan-level transit supply measure SimBzone attributes destinationDevelopment type (e.g., residential, employment, mixed, transit-oriented development, greenfield), assigned SimBzones based density, diversity, distance transit measures. development types, like area types may fuzzy sets. SLD used create development type specifications. design enable model users input Marea goals proportional split development types. model adjust allocation development types consistent goals constrained plausible levels.Development type (e.g., residential, employment, mixed, transit-oriented development, greenfield), assigned SimBzones based density, diversity, distance transit measures. development types, like area types may fuzzy sets. SLD used create development type specifications. design enable model users input Marea goals proportional split development types. model adjust allocation development types consistent goals constrained plausible levels.Network design measures used VE-RSPM multi-modal travel model (e.g., multi-modal network density, pedestrian network density) applied based inputs related area development type. SLD used identify ranges values area development type. Users specify inputs goals relative ranges Azone, development type area type.Network design measures used VE-RSPM multi-modal travel model (e.g., multi-modal network density, pedestrian network density) applied based inputs related area development type. SLD used identify ranges values area development type. Users specify inputs goals relative ranges Azone, development type area type.parking pricing, travel demand management, car service inputs specified Azone, area type, development type. translated SimBzone based SimBzone area type development type. done, AssignDemandManagement, AssignParkingRestrictions, AssignCarSvcAvailability modules can run currently . Thought given simplify inputs users required provide inputs every combination Azone, area type development type.parking pricing, travel demand management, car service inputs specified Azone, area type, development type. translated SimBzone based SimBzone area type development type. done, AssignDemandManagement, AssignParkingRestrictions, AssignCarSvcAvailability modules can run currently . Thought given simplify inputs users required provide inputs every combination Azone, area type development type.","code":""},{"path":"vestate.html","id":"modules-and-outputs-1","chapter":"11 VE-State Model Details","heading":"11.4 Modules and Outputs","text":"VE-State model compilation several modules, listed :modules use different input data. Generally speaking, VE-State inputs classified five following categories:User input model parameters: input parameters (model scenario specific), defined model_parameters.json, users review modify needed.Fixed input model parameters: input parameters specific model, defined model_parameters.json, users typically modify.User input files: input files (model scenario specific) users review modify needed.Fixed input files: input parameters specific model fixed.Internal module inputs: inputs created VE-RSPM modules.following section decribes module, required inputs, generated outputs.","code":""},{"path":"vestate.html","id":"vestate-createhouseholds","chapter":"11 VE-State Model Details","heading":"11.4.1 CreateHouseholds","text":"module creates simulated households using inputs population age group simulation year.","code":""},{"path":"vestate.html","id":"user-input-files-38","chapter":"11 VE-State Model Details","heading":"11.4.1.1 User Input Files","text":"Household population (azone_hh_pop_by_age.csv)Household population (azone_hh_pop_by_age.csv)Household size (azone_hhsize_targets.csv)Household size (azone_hhsize_targets.csv)Group quarter population (azone_gq_pop_by_age.csv)Group quarter population (azone_gq_pop_by_age.csv)","code":""},{"path":"vestate.html","id":"module-outputs-38","chapter":"11 VE-State Model Details","heading":"11.4.1.2 Module Outputs","text":"Households created number persons six age categories (0-14, 15-19, 20-29, 30-54, 55-64, 65+) total number persons household. Two types households created: regular households (.e. persons living group quarters) group quarters households .HhId: Unique household IDHhSize: Number personsAge0to14: Persons 0 14 year old age groupAge15to19: Persons 15 19 year old age groupAge20to29: Persons 20 29 year old age groupAge30to54: Persons 30 54 year old age groupAge55to64: Persons 55 64 year old age groupAge65Plus: Persons 65 older age groupHhType: Coded household age composition (e.g., 2-1-0-2-0-0) Grp group quartersFor information see ","code":""},{"path":"vestate.html","id":"vestate-predictworkers","chapter":"11 VE-State Model Details","heading":"11.4.2 PredictWorkers","text":"module assigns workers age households non-institutional group quarters population. simple model predicts workers function household type age composition.","code":""},{"path":"vestate.html","id":"user-input-files-39","chapter":"11 VE-State Model Details","heading":"11.4.2.1 User Input Files","text":"Relative employment (azone_relative_employment.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-37","chapter":"11 VE-State Model Details","heading":"11.4.2.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-39","chapter":"11 VE-State Model Details","heading":"11.4.2.3 Module Outputs","text":"Wkr15to19: Workers 15 19 year old age groupWkr20to29: Workers 20 29 year old age groupWkr30to54: Workers 30 54 year old age groupWkr55to64: Workers 55 64 year old age groupWkr65Plus: Workers 65 older age groupWorkers: Total workersNumWkr: Number workers residing zoneFor information see ","code":""},{"path":"vestate.html","id":"vestate-assignlifecycle","chapter":"11 VE-State Model Details","heading":"11.4.3 AssignLifeCycle","text":"module assigns life cycle category household. life cycle categories similar, , established National Household Travel Survey (NHTS). age categories used VisionEval models broader used NHTS identify children different ages. simple model set rules assigns age group categories based age persons workers household.","code":""},{"path":"vestate.html","id":"user-input-files-40","chapter":"11 VE-State Model Details","heading":"11.4.3.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-38","chapter":"11 VE-State Model Details","heading":"11.4.3.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-40","chapter":"11 VE-State Model Details","heading":"11.4.3.3 Module Outputs","text":"LifeCycle: Household life cycle defined 2009 NHTS LIF_CYC variableFor information see ","code":""},{"path":"vestate.html","id":"predictincome","chapter":"11 VE-State Model Details","heading":"11.4.4 PredictIncome","text":"module predicts income simulated household given number workers age group average per capita income Azone household resides.","code":""},{"path":"vestate.html","id":"user-input-files-41","chapter":"11 VE-State Model Details","heading":"11.4.4.1 User Input Files","text":"Regional income (azone_per_cap_inc.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-39","chapter":"11 VE-State Model Details","heading":"11.4.4.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-41","chapter":"11 VE-State Model Details","heading":"11.4.4.3 Module Outputs","text":"Income: Total annual household (non-group group quarters) incomeFor information see ","code":""},{"path":"vestate.html","id":"vestate-initialize","chapter":"11 VE-State Model Details","heading":"11.4.5 Initialize","text":"Modules VESimLandUse package synthesize Bzones land use attributes function Azone characteristics well data derived US Environmental Protection Agency’s Smart Location Database (SLD) augmented US Census housing household income data, data National Transit Database. Details data included VESimLandUseData package. combined dataset contains number land use attributes US Census block group level. goal Bzone synthesis generate set SimBzones Azone reasonably represent block group land use characteristics given characteristics Azone, Marea Azone part , scenario inputs provided user.Many models procedures used Bzone synthesis pivot profiles developed data sources specific urbanized areas, well general profiles different urbanized area population size categories, towns, rural areas. Using specific general profiles enables simulated Bzones (SimBzones) better represent areas modeled variety conditions found different states. Following listing urbanized areas profiles developed. Note urbanized areas cross state lines split individual state components. done facilitate development state models better reflect characteristics urbanized area characteristics state.incumbent model user identify name urbanized area profile used Mareas model. module reads names assigned “marea_uza_profile_names.csv” file checks validity. invalid, input processing stop error messages written log identifying problem names. following table identifies names may used.","code":""},{"path":"vestate.html","id":"user-input-files-42","chapter":"11 VE-State Model Details","heading":"11.4.5.1 User Input Files","text":"Metropolitan area names (marea_uza_profile_names.csv)Metropolitan area names (marea_uza_profile_names.csv)Household location type proportions (azone_hh_loc_type_prop.csv)Household location type proportions (azone_hh_loc_type_prop.csv)Work location type proportions (azone_wkr_loc_type_prop.csv)Work location type proportions (azone_wkr_loc_type_prop.csv)Land area location type (azone_loc_type_land_area.csv)Land area location type (azone_loc_type_land_area.csv)Group quarter population location type proportions (azone_gq_pop-prop_by_area-type.csv)Group quarter population location type proportions (azone_gq_pop-prop_by_area-type.csv)","code":""},{"path":"vestate.html","id":"vestate-createsimbzones","chapter":"11 VE-State Model Details","heading":"11.4.6 CreateSimBzones","text":"module synthesizes Bzones land use attributes function Azone characteristics well data derived US Environmental Protection Agency’s Smart Location Database (SLD) augmented US Census housing household income data, data National Transit Database. Details data included VESimLandUseData package. combined dataset contains number land use attributes US Census block group level. goal Bzone synthesis generate set SimBzones Azone reasonably represent block group land use characteristics given characteristics Azone, Marea Azone part , scenario inputs provided user.Many models procedures used Bzone synthesis pivot profiles developed data sources specific urbanized areas, well general profiles different urbanized area population size categories, towns, rural areas. Using specific general profiles enables simulated Bzones (SimBzones) better represent areas modeled variety conditions found different states. documentation Initialize module listing urbanized area profile names.models procedures module create SimBzones within Azone simulate land use characteristics neighborhoods likely found Azone. SimBzones assigned quantities households jobs attributed several land use measures process. characteristics :Location Type: Identification whether SimBzone located urbanized area, town (.e. urban-type area large enough urbanized), rural (.e. dispersed low-density development)Households: Number households SimBzoneEmployment: Number jobs SimBzoneActivity Density: Number households jobs per acreLand Use Diversity: Measures degree mixing households jobsDestination Accessibility: Measures proximity households jobsArea Type Development Type: Categories describe relative urban nature SimBzone (area type) character development SimBzone (development type).Employment Split: Number retail, service, jobs SimBzone.","code":""},{"path":"vestate.html","id":"user-input-files-43","chapter":"11 VE-State Model Details","heading":"11.4.6.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-40","chapter":"11 VE-State Model Details","heading":"11.4.6.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-42","chapter":"11 VE-State Model Details","heading":"11.4.6.3 Module Outputs","text":"LocType: Location type (Urban, Town, Rural) place household residesNumHh: Number households allocated SimBzoneTotEmp: Total number jobs zoneRetEmp: Number jobs retail sector zoneSvcEmp: Number jobs service sector zoneOthEmp: Number jobs retail service sectors zoneAreaType: Area type (center, inner, outer, fringe) BzoneDevType: Location type (Urban, Town, Rural) BzoneD1D: Gross activity density (employment + households) unprotected land zone (Ref: EPA 2010 Smart Location Database)D5: Destination accessibility zone calculated harmonic mean jobs within 2 miles population within 5 milesUrbanArea: Area Urban unprotected (.e. developable) within zoneTownArea: Area Town unprotected (.e. developable) within zoneRuralArea: Area Rural unprotected (.e. developable) within zoneSFDU: Number single family dwelling units (PUMS codes 01 - 03) zoneMFDU: Number multi-family dwelling units (PUMS codes 04 - 09) zoneFor information see ","code":""},{"path":"vestate.html","id":"vestate-simulatehousing","chapter":"11 VE-State Model Details","heading":"11.4.7 SimulateHousing","text":"module assigns housing type, either single-family (SF) multifamily (MF) regular households based respective supplies SF MF dwelling units housing market household assigned (.e. Azone household assigned ) household characteristics. assigns household SimBzone based household’s housing type well supply housing type SimBzone. module assigns non-institutional group quarters households SimBzones randomly.","code":""},{"path":"vestate.html","id":"user-input-files-44","chapter":"11 VE-State Model Details","heading":"11.4.7.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-41","chapter":"11 VE-State Model Details","heading":"11.4.7.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-43","chapter":"11 VE-State Model Details","heading":"11.4.7.3 Module Outputs","text":"HouseType: Type dwelling unit household resides (SF = single family, MF = multi-family, GQ = group quartersLocType: Location type (Urban, Town, Rural) place household residesPop: Total population residing BzoneUrbanPop: Urbanized area population MareaTownPop: Town (.e. urban non-urbanized area) MareaRuralPop: Rural (.e. urbanized town) population MareaNumWkr: Number jobs retail sector zoneUrbanIncome: Total household income urbanized area population MareaTownIncome: Total household income town (.e. urban non-urbanized area) population MareaRuralIncome: Total household income rural (.e. urbanized town) population MareaFor information see ","code":""},{"path":"vestate.html","id":"vestate-simulateemployment","chapter":"11 VE-State Model Details","heading":"11.4.8 SimulateEmployment","text":"module assign workers SimBzone work locations. worker table created identifies unique worker ID, household ID worker part , SimBzone, Azone, Marea worker job location.","code":""},{"path":"vestate.html","id":"user-input-files-45","chapter":"11 VE-State Model Details","heading":"11.4.8.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-42","chapter":"11 VE-State Model Details","heading":"11.4.8.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-44","chapter":"11 VE-State Model Details","heading":"11.4.8.3 Module Outputs","text":"WkrId: Unique worker IDBzone: Bzone ID worker job locationAzone: Azone ID worker job locationMarea: Marea ID worker job locationFor information see ","code":""},{"path":"vestate.html","id":"vestate-4dmeasures","chapter":"11 VE-State Model Details","heading":"11.4.9 Simulate4DMeasures","text":"module calculates several 4D measures SimBzone including density, diversity (.e. mixing land uses), pedestrian-orientedn transportation network design. measures similar measures included Environmental Protection Agency’s (EPA)","code":""},{"path":"vestate.html","id":"user-input-files-46","chapter":"11 VE-State Model Details","heading":"11.4.9.1 User Input Files","text":"D3bpo4 value different location types (marea_d3bpo4_adj.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-43","chapter":"11 VE-State Model Details","heading":"11.4.9.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-45","chapter":"11 VE-State Model Details","heading":"11.4.9.3 Module Outputs","text":"D1B: Gross population density (people/acre) unprotectedD1C: Gross employment density (jobs/acre) unprotected landD2A_JPHH: Ratio jobs households zoneD2A_WRKEMP: Ratio workers jobs zoneD2A_EPHHM: Employment household entropy measure zone considering numbers households, retail jobs, service jobs, jobsD3bpo4: Intersection density terms pedestrian-oriented intersections four legs per square mileFor information see ","code":""},{"path":"vestate.html","id":"vestate-simulateurbanmixmeasure","chapter":"11 VE-State Model Details","heading":"11.4.10 SimulateUrbanMixMeasure","text":"module simulates urban mixed-use measure based 2001 National Household Travel Survey measure tract level urban/rural indicator","code":""},{"path":"vestate.html","id":"user-input-files-47","chapter":"11 VE-State Model Details","heading":"11.4.10.1 User Input Files","text":"Target proportion households mixed-use neighborhoods (marea_mix_targets.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-44","chapter":"11 VE-State Model Details","heading":"11.4.10.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-46","chapter":"11 VE-State Model Details","heading":"11.4.10.3 Module Outputs","text":"IsUrbanMixNbrhd: Flag identifying whether household (1) (0) urban mixed-use neighborhoodFor information see ","code":""},{"path":"vestate.html","id":"vestate-assignparkingrestrictions","chapter":"11 VE-State Model Details","heading":"11.4.11 AssignParkingRestrictions","text":"module identifies parking restrictions prices affecting households residences, workplaces, places likely visit urban area. module takes user inputs parking restrictions prices Bzone calculates household number free parking spaces available household’s residence, workers pay parking whether payment part cash--buy-back program, cost residential parking household vehicles can’t parked free space, cost workplace parking, cost parking activities shopping. parking restriction/cost information used modules calculating cost vehicle ownership cost vehicle use.","code":""},{"path":"vestate.html","id":"user-input-files-48","chapter":"11 VE-State Model Details","heading":"11.4.11.1 User Input Files","text":"Parking availability (marea_parking-avail_by_area-type.csv)Parking availability (marea_parking-avail_by_area-type.csv)Parking cost (marea_parking-cost_by_area-type.csv)Parking cost (marea_parking-cost_by_area-type.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-45","chapter":"11 VE-State Model Details","heading":"11.4.11.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-47","chapter":"11 VE-State Model Details","heading":"11.4.11.3 Module Outputs","text":"FreeParkingSpaces: Number free parking spaces available householdParkingUnitCost: Daily cost long-term parking (e.g. paid monthly basis)OtherParkingCost: Daily cost parking shopping locations locations paid parking including work (adjusted number vehicle trips)PaysForParking: worker pay parking: 1 = yes, 0 = noIsCashOut: worker paid parking cash--buy-back program: 1 = yes, 0 = noParkingCost: Daily cost long-term parking (e.g. paid monthly basis)information see ","code":""},{"path":"vestate.html","id":"vestate-assigndemandmanagement","chapter":"11 VE-State Model Details","heading":"11.4.12 AssignDemandManagement","text":"module assigns demand management program participation households workers. Households assigned individualized marketing program participation. Workers assigned employee commute options participation. module computes net proportional reduction household DVMT based participation travel demand management programs.","code":""},{"path":"vestate.html","id":"user-input-files-49","chapter":"11 VE-State Model Details","heading":"11.4.12.1 User Input Files","text":"Travel demand management (marea_travel-demand-mgt_by_area-type.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-46","chapter":"11 VE-State Model Details","heading":"11.4.12.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-48","chapter":"11 VE-State Model Details","heading":"11.4.12.3 Module Outputs","text":"IsIMP: dentifies whether household participant travel demand management individualized marketing program (IMP): 1 = yes, 0 = nPropTdmDvmtReduction: Proportional reduction household DVMT due participation travel demand management programsIsECO: Identifies whether worker participant travel demand management employee commute options program: 1 = yes, 0 = noFor information see ","code":""},{"path":"vestate.html","id":"vestate-assigncarsvcavailability","chapter":"11 VE-State Model Details","heading":"11.4.13 AssignCarSvcAvailability","text":"module assigns car service availability levels (Low, High) Bzones households. Car services include taxis, car sharing services (e.g. Car--Go, Zipcar), future automated taxi services","code":""},{"path":"vestate.html","id":"user-input-files-50","chapter":"11 VE-State Model Details","heading":"11.4.13.1 User Input Files","text":"Car service availability (marea_carsvc_availability)","code":""},{"path":"vestate.html","id":"internal-module-inputs-47","chapter":"11 VE-State Model Details","heading":"11.4.13.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-49","chapter":"11 VE-State Model Details","heading":"11.4.13.3 Module Outputs","text":"IsIMP: dentifies whether household participant travel demand management individualized marketing program (IMP): 1 = yes, 0 = nPropTdmDvmtReduction: Proportional reduction household DVMT due participation travel demand management programsIsECO: Identifies whether worker participant travel demand management employee commute options program: 1 = yes, 0 = noFor information see ","code":""},{"path":"vestate.html","id":"vestate-simulatetransitservice","chapter":"11 VE-State Model Details","heading":"11.4.14 SimulateTransitService","text":"module assigns transit service level urbanized portion Marea neighborhoods (SimBzones) within urbanized area. Annual revenue-miles (.e. transit miles revenue service) transit mode type read input file","code":""},{"path":"vestate.html","id":"user-input-files-51","chapter":"11 VE-State Model Details","heading":"11.4.14.1 User Input Files","text":"Transit service Marea (marea_transit_service.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-48","chapter":"11 VE-State Model Details","heading":"11.4.14.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-50","chapter":"11 VE-State Model Details","heading":"11.4.14.3 Module Outputs","text":"TranRevMiPC: Ratio annual bus-equivalent revenue-miles (.e. revenue-miles productivity - passenger miles per revenue mile - standard bus) urbanized area populationVanDvmt: Total daily miles traveled vans various sizes provide demand responsive, vanpool, similar services.BusDvmt: Total daily miles traveled buses various sizes provide bus service various types.RailDvmt: Total daily miles traveled light rail, heavy rail, commuter rail, similar types vehicles.D4c: Aggregate frequency transit service within 0.25 miles block group boundary per hour evening peak period (Ref: EPA 2010 Smart Location Database)information see ","code":""},{"path":"vestate.html","id":"vestate-simulateroadmiles","chapter":"11 VE-State Model Details","heading":"11.4.15 SimulateRoadMiles","text":"module assigns freeway arterial lane-miles metropolitan areas (Marea) calculates freeway lane-miles per capita.","code":""},{"path":"vestate.html","id":"user-input-files-52","chapter":"11 VE-State Model Details","heading":"11.4.15.1 User Input Files","text":"Lane-miles metropolitan areas (marea_lane_miles.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-49","chapter":"11 VE-State Model Details","heading":"11.4.15.2 Internal Module Inputs","text":"FwyLaneMiPC: Ratio urbanized area freeway expressway lane-miles urbanized area populationFor information see ","code":""},{"path":"vestate.html","id":"module-outputs-51","chapter":"11 VE-State Model Details","heading":"11.4.15.3 Module Outputs","text":"FwyLaneMiPC: Ratio urbanized area freeway expressway lane-miles urbanized area population","code":""},{"path":"vestate.html","id":"vestate-assigndrivers","chapter":"11 VE-State Model Details","heading":"11.4.16 AssignDrivers","text":"module assigns drivers age group household function numbers persons workers age group, household income, land use characteristics, public transit availability.","code":""},{"path":"vestate.html","id":"user-input-files-53","chapter":"11 VE-State Model Details","heading":"11.4.16.1 User Input Files","text":"Adjustment proportion household drivers age group region\n(region_hh_driver_adjust_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-50","chapter":"11 VE-State Model Details","heading":"11.4.16.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-52","chapter":"11 VE-State Model Details","heading":"11.4.16.3 Module Outputs","text":"Drv15to19: Number drivers 15 19 years oldDrv20to29: Number drivers 20 29 years oldDrv30to54: Number drivers 30 54 years oldDrv55to64: Number drivers 55 64 years oldDrv65Plus: Number drivers 65 olderDrivers: Number drivers householdDrvAgePersons: Number people 15 year old older householdFor information see ","code":""},{"path":"vestate.html","id":"vestate-assignvehicleownership","chapter":"11 VE-State Model Details","heading":"11.4.17 AssignVehicleOwnership","text":"module determines number vehicles owned leased household function household characteristics, land use characteristics, transportation system characteristics.","code":""},{"path":"vestate.html","id":"user-input-files-54","chapter":"11 VE-State Model Details","heading":"11.4.17.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-51","chapter":"11 VE-State Model Details","heading":"11.4.17.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-53","chapter":"11 VE-State Model Details","heading":"11.4.17.3 Module Outputs","text":"Vehicles: Number automobiles light trucks owned leased household including high level car service vehicles available driving-age personsFor information see ","code":""},{"path":"vestate.html","id":"vestate-assignvehicletype","chapter":"11 VE-State Model Details","heading":"11.4.18 AssignVehicleType","text":"module identifies many household vehicles light trucks many automobiles. Light trucks include pickup trucks, sport utility vehicles, vans, vehicle classified passenger car. Automobiles vehicles classified passenger cars.","code":""},{"path":"vestate.html","id":"user-input-files-55","chapter":"11 VE-State Model Details","heading":"11.4.18.1 User Input Files","text":"Light truck proportion household vehicles Azone (azone_lttrk_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-52","chapter":"11 VE-State Model Details","heading":"11.4.18.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-54","chapter":"11 VE-State Model Details","heading":"11.4.18.3 Module Outputs","text":"NumLtTrk: Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAuto: Number automobiles (.e., four-tire passenger vehicles light trucks) owned leased householdFor information see ","code":""},{"path":"vestate.html","id":"vestate-createvehicletable","chapter":"11 VE-State Model Details","heading":"11.4.19 CreateVehicleTable","text":"module creates vehicle table populates household ID geography fields.","code":""},{"path":"vestate.html","id":"user-input-files-56","chapter":"11 VE-State Model Details","heading":"11.4.19.1 User Input Files","text":"Car service characteristics Azone (azone_carsvc_characteristics.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-53","chapter":"11 VE-State Model Details","heading":"11.4.19.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-55","chapter":"11 VE-State Model Details","heading":"11.4.19.3 Module Outputs","text":"VehId: Unique vehicle IDVehicleAccess: Identifier whether vehicle owned household (), vehicle low level car service (LowCarSvc), vehicle high level car service (HighCarSvc)information see ","code":""},{"path":"vestate.html","id":"vestate-assignvehicleage","chapter":"11 VE-State Model Details","heading":"11.4.20 AssignVehicleAge","text":"module assigns vehicle ages household vehicle. Vehicle age assigned function vehicle type (auto light truck), household income, assumed mean vehicle age vehicle type Azone. Car service vehicles assigned age based input assumptions distinction vehicle type.","code":""},{"path":"vestate.html","id":"user-input-files-57","chapter":"11 VE-State Model Details","heading":"11.4.20.1 User Input Files","text":"Vehicles mean age household vehicles Azone (azone_hh_veh_mean_age.csv)Vehicles mean age household vehicles Azone (azone_hh_veh_mean_age.csv)Car service characteristics Azone (azone_carsvc_characteristics.csv)Car service characteristics Azone (azone_carsvc_characteristics.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-54","chapter":"11 VE-State Model Details","heading":"11.4.20.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-56","chapter":"11 VE-State Model Details","heading":"11.4.20.3 Module Outputs","text":"Type: Vehicle body type: Auto = automobile, LtTrk = light trucks (.e. pickup, SUV, Van)Age: Vehicle age yearsFor information see ","code":""},{"path":"vestate.html","id":"vestate-calculatevehicleowncost","chapter":"11 VE-State Model Details","heading":"11.4.21 CalculateVehicleOwnCost","text":"module calculates average vehicle ownership cost vehicle based vehicle type age using data American Automobile Association (AAA). added cost parking vehicle residence free parking available household vehicles. ownership cost converted average ownership cost per mile predicting household DVMT, given number owned vehicles splitting miles equally among vehicle.\n#### User Input FilesVehicle ownership taxes households (azone_hh_veh_own_taxes.csv)Vehicle ownership taxes households (azone_hh_veh_own_taxes.csv)Proportion pay---drive (PAYD) insurance users (azone_payd_insurance_prop.csv)Proportion pay---drive (PAYD) insurance users (azone_payd_insurance_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-55","chapter":"11 VE-State Model Details","heading":"11.4.21.1 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-57","chapter":"11 VE-State Model Details","heading":"11.4.21.2 Module Outputs","text":"OwnCost: Annual cost vehicle ownership including depreciation, financing, insurance, taxes, residential parking dollarsOwnCostPerMile: Annual cost vehicle ownership per mile vehicle travel (dollars per mile)InsCost: Annual vehicle insurance cost dollarsHasPaydIns: Identifies whether household pay---drive insurance vehicles: 1 = Yes, 0 = noFor information see ","code":""},{"path":"vestate.html","id":"vestate-adjustvehicleownership","chapter":"11 VE-State Model Details","heading":"11.4.22 AdjustVehicleOwnership","text":"module adjusts household vehicle ownership based comparison cost owning vehicle per mile travel compared cost per mile using car service locations level car service quality high. determination whether car services substituted ownership also depends input assumptions regarding average likelihood owner substitute car services household vehicle.","code":""},{"path":"vestate.html","id":"user-input-files-58","chapter":"11 VE-State Model Details","heading":"11.4.22.1 User Input Files","text":"Car service characteristics Azone (azone_carsvc_characteristics.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-56","chapter":"11 VE-State Model Details","heading":"11.4.22.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-58","chapter":"11 VE-State Model Details","heading":"11.4.22.3 Module Outputs","text":"VehicleAccess: Identifier whether vehicle owned household (), vehicle low level car service (LowCarSvc), vehicle high level car service (HighCarSvc)OwnCost: Annual cost vehicle ownership per mile vehicle travel (dollars per mile)OwnCostPerMile:Annual cost vehicle ownership per mile vehicle travel (dollars per mile)InsCost: Annual vehicle insurance cost dollarsSwitchToCarSvc: Identifies whether vehicle switched owned car serviceOwnCostSavings: Annual vehicle ownership cost (depreciation, finance, insurance, taxes) savings dollars resulting substituting use car services household vehicleOwnCost:Annual household vehicle ownership cost (depreciation, finance, insurance, taxes) savings dollarsVehicles:Number automobiles light trucks owned leased household including high level car service vehicles available driving-age personsNumLtTrk:Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAuto:Number automobiles (.e. 4-tire passenger vehicles light trucks) owned leased householdNumHighCarSvc:Number high level service car service vehicles available household (difference number vehicles owned household number driving age persons households availability high level car servicesFor information see ","code":""},{"path":"vestate.html","id":"vestate-calculatehouseholddvmt","chapter":"11 VE-State Model Details","heading":"11.4.23 CalculateHouseholdDvmt","text":"module models household average daily vehicle miles traveled function household characteristics, vehicle ownership, attributes neighborhood metropolitan area household resides.","code":""},{"path":"vestate.html","id":"user-input-files-59","chapter":"11 VE-State Model Details","heading":"11.4.23.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-57","chapter":"11 VE-State Model Details","heading":"11.4.23.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-59","chapter":"11 VE-State Model Details","heading":"11.4.23.3 Module Outputs","text":"Dvmt: Average daily vehicle miles traveled household autos light trucksUrbanHhDvmt: Average daily vehicle miles traveled autos light trucks households residing urbanized portion MareaTownHhDvmt: Average daily vehicle miles traveled autos light trucks households residing town (urban urbanized) portion MareaRuralHhDvmt: Average daily vehicle miles traveled autos light trucks households residing rural (non-urban) portion MareaFor information see ","code":""},{"path":"vestate.html","id":"vestate-calculatealtmodetrips","chapter":"11 VE-State Model Details","heading":"11.4.24 CalculateAltModeTrips","text":"module calculates household transit trips, walk trips, bike trips. models sensitive household DVMT run household DVMT adjustments (e.g. account cost household DVMT) made.","code":""},{"path":"vestate.html","id":"user-input-files-60","chapter":"11 VE-State Model Details","heading":"11.4.24.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-58","chapter":"11 VE-State Model Details","heading":"11.4.24.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-60","chapter":"11 VE-State Model Details","heading":"11.4.24.3 Module Outputs","text":"WalkTrips: Average number walk trips per year household membersBikeTrips: Average number bicycle trips per year household membersTransitTrips:Average number public transit trips per year household membersFor information see ","code":""},{"path":"vestate.html","id":"vestate-calculatevehicletrips","chapter":"11 VE-State Model Details","heading":"11.4.25 CalculateVehicleTrips","text":"module calculates average daily vehicle trips households consistent household DVMT. average trip length model applied estimate average length household trips reflecting characteristics household place live. average trip length divided average household DVMT get estimate average number daily vehicle trips.","code":""},{"path":"vestate.html","id":"user-input-files-61","chapter":"11 VE-State Model Details","heading":"11.4.25.1 User Input Files","text":"module user input requirements.","code":""},{"path":"vestate.html","id":"internal-module-inputs-59","chapter":"11 VE-State Model Details","heading":"11.4.25.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-61","chapter":"11 VE-State Model Details","heading":"11.4.25.3 Module Outputs","text":"VehicleTrips: Average number vehicle trips per day household membersAveVehTripLen: Average household vehicle trip length milesFor information see ","code":""},{"path":"vestate.html","id":"vestate-divertsovtravel","chapter":"11 VE-State Model Details","heading":"11.4.26 DivertSovTravel","text":"module reduces household single-occupant vehicle (SOV) travel achieve goals inputs model. purpose module enable users ‘’ analysis potential light-weight vehicles (e.g. bicycles, electric bikes, electric scooters) infrastructure support use reduce SOV travel.","code":""},{"path":"vestate.html","id":"user-input-files-62","chapter":"11 VE-State Model Details","heading":"11.4.26.1 User Input Files","text":"Proportion diverted SOV trips (azone_prop_sov_dvmt_diverted.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-60","chapter":"11 VE-State Model Details","heading":"11.4.26.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-62","chapter":"11 VE-State Model Details","heading":"11.4.26.3 Module Outputs","text":"PropDvmtDiverted: Proportion household DVMT diverted bicycling, electric bikes, ‘low-speed’ travel modesAveTrpLenDiverted: Average length miles vehicle trips diverted bicycling, electric bikes, ‘low-speed’ travel modesFor information see ","code":""},{"path":"vestate.html","id":"vestate-initialize-vepowertrainsandfuels","chapter":"11 VE-State Model Details","heading":"11.4.27 Initialize-vepowertrainsandfuels","text":"module processes vehicle fuel characteristics files model users may optionally supply. files supplied, modules package compute carbon intensities vehicle travel use user-supplied data instead datasets part package (see LoadDefaultValues.R script).","code":""},{"path":"vestate.html","id":"user-input-files-63","chapter":"11 VE-State Model Details","heading":"11.4.27.1 User Input Files","text":"Carbon intensity electricity (azone_electricity_carbon_intensity.csv)Carbon intensity electricity (azone_electricity_carbon_intensity.csv)Average fuel carbon intensity transit (marea_transit_ave_fuel_carbon_intensity.csv)Average fuel carbon intensity transit (marea_transit_ave_fuel_carbon_intensity.csv)Biofuels proportions transit fuels (marea_transit_biofuel_mix.csv)Biofuels proportions transit fuels (marea_transit_biofuel_mix.csv)Transit fuels proportions transit vehicle type (marea_transit_fuel.csv)Transit fuels proportions transit vehicle type (marea_transit_fuel.csv)Transit powertrain proportions transit vehicle type (marea_transit_powertrain_prop.csv)Transit powertrain proportions transit vehicle type (marea_transit_powertrain_prop.csv)Average carbon intensities fuels vehicle category model region (region_ave_fuel_carbon_intensity.csv)Average carbon intensities fuels vehicle category model region (region_ave_fuel_carbon_intensity.csv)Car service vehicle powertrain proportions vehicle type model region (region_carsvc_powertrain_prop.csv)Car service vehicle powertrain proportions vehicle type model region (region_carsvc_powertrain_prop.csv)Commercial service vehicle powertrain proportions vehicle type (region_comsvc_powertrain_prop.csv)Commercial service vehicle powertrain proportions vehicle type (region_comsvc_powertrain_prop.csv)Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv)Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-61","chapter":"11 VE-State Model Details","heading":"11.4.27.2 Internal Module Inputs","text":"module uses datasets datastore.","code":""},{"path":"vestate.html","id":"module-outputs-63","chapter":"11 VE-State Model Details","heading":"11.4.27.3 Module Outputs","text":"module produces datasets store datastore.information see ","code":""},{"path":"vestate.html","id":"vestate-calculatecarbonintensity","chapter":"11 VE-State Model Details","heading":"11.4.28 CalculateCarbonIntensity","text":"module calculates average carbon intensity fuels (grams CO2e per megajoule) transportation mode vehicle type. transportation modes vehicle types :Average fuel carbon intensities public transit vehicles calculated Marea. average fuel carbon intensities mode vehicles calculated entire model region. module also calculates average carbon intensity electricity Azone level. Note module uses user input files user runs Initialize module. Otherwise module uses default inputs instfolder.","code":""},{"path":"vestate.html","id":"user-input-files-64","chapter":"11 VE-State Model Details","heading":"11.4.28.1 User Input Files","text":"Carbon intensity electricity (azone_electricity_carbon_intensity.csv)Carbon intensity electricity (azone_electricity_carbon_intensity.csv)Biofuels proportions transit fuels (marea_transit_biofuel_mix.csv)Biofuels proportions transit fuels (marea_transit_biofuel_mix.csv)Transit fuels proportions transit vehicle type (marea_transit_fuel.csv)Transit fuels proportions transit vehicle type (marea_transit_fuel.csv)Average carbon intensities fuels vehicle category model region (region_ave_fuel_carbon_intensity.csv)Average carbon intensities fuels vehicle category model region (region_ave_fuel_carbon_intensity.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-62","chapter":"11 VE-State Model Details","heading":"11.4.28.2 Internal Module Inputs","text":"module internal module inputs","code":""},{"path":"vestate.html","id":"module-outputs-64","chapter":"11 VE-State Model Details","heading":"11.4.28.3 Module Outputs","text":"ElectricityCI: Carbon intensity electricity point consumption (grams CO2e per megajoule)HhAutoFuelCI: Average carbon intensity fuels used household automobiles (grams CO2e per megajoule)HhLtTrkFuelCI: Average carbon intensity fuels used household light trucks (grams CO2e per megajoule)CarSvcAutoFuelCI: Average carbon intensity fuels used car service automobiles (grams CO2e per megajoule)CarSvcLtTrkFuelCI: Average carbon intensity fuels used car service light trucks (grams CO2e per megajoule)ComSvcAutoFuelCI: Average carbon intensity fuels used commercial service automobiles (grams CO2e per megajoule)ComSvcLtTrkFuelCI: Average carbon intensity fuels used commercial service light trucks (grams CO2e per megajoule)HvyTrkFuelCI: Average carbon intensity fuels used heavy trucks (grams CO2e per megajoule)TransitVanFuelCI: Average carbon intensity fuel used transit vans (grams CO2e per megajoule)TransitBusFuelCI: Average carbon intensity fuel used transit buses (grams CO2e per megajoule)TransitRailFuelCI: Average carbon intensity fuel used transit rail vehicles (grams CO2e per megajoule)information see ","code":""},{"path":"vestate.html","id":"vestate-assignhhvehiclepowertrain","chapter":"11 VE-State Model Details","heading":"11.4.29 AssignHhVehiclePowertrain","text":"module assigns powertrain type household vehicle. powertrain types internal combustion engine vehicle (ICEV), hybrid electric vehicle (HEV), plug-hybrid electric vehicle (PHEV), battery electric vehicles (BEV). module also assigns related characteristics household vehicles including:Battery range (PHEV BEV)Miles per gallon (MPG) gallons per mile (GPM)Miles per kilowatt-hour (MPKWH) kilowatt-hours per mile (KWHPM)Miles per gasoline gallon equivalent (MPGe)proportion DVMT powered electricityCarbon dioxide equivalent emissions per mile powered hydrocarbon fuelCarbon dioxide equivalent emissions per mile powered electricity","code":""},{"path":"vestate.html","id":"user-input-files-65","chapter":"11 VE-State Model Details","heading":"11.4.29.1 User Input Files","text":"Charging availability (azone_charging_availability.csv)Charging availability (azone_charging_availability.csv)Car service vehicle powertrain proportions vehicle type model region (region_carsvc_powertrain_prop.csv)Car service vehicle powertrain proportions vehicle type model region (region_carsvc_powertrain_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-63","chapter":"11 VE-State Model Details","heading":"11.4.29.2 Internal Module Inputs","text":"Powertrain: Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-hybrid electric vehicle, BEV = battery electric vehicle, NA = applicable car service vehicleBatRng: Miles travel possible fully charged batteryMPG: Average miles vehicle travel powered fuel per gasoline equivalent gallonGPM: Average gasoline equivalent gallons per mile vehicle travel powered fuelMPKWH: Average miles vehicle travel powered electricity per kilowatt-hourKWHPM: Average kilowatt-hours per mile vehicle travel powered electricityMPGe: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)ElecDvmtProp: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)FuelCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered fuelElecCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered electricityFor information see ","code":""},{"path":"vestate.html","id":"module-outputs-65","chapter":"11 VE-State Model Details","heading":"11.4.29.3 Module Outputs","text":"Powertrain: Vehicle powertrain type: ICEV = internal combustion engine vehicle, HEV = hybrid electric vehicle, PHEV = plug-hybrid electric vehicle, BEV = battery electric vehicle, NA = applicable car service vehicleBatRng: Miles travel possible fully charged batteryMPG: Average miles vehicle travel powered fuel per gasoline equivalent gallonGPM: Average gasoline equivalent gallons per mile vehicle travel powered fuelMPKWH: Average miles vehicle travel powered electricity per kilowatt-hourKWHPM: Average kilowatt-hours per mile vehicle travel powered electricityMPGe: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)ElecDvmtProp: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)FuelCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered fuelElecCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered electricityFor information see ","code":""},{"path":"vestate.html","id":"vestate-initialize-vetravelperformance","chapter":"11 VE-State Model Details","heading":"11.4.30 Initialize-vetravelperformance","text":"module reads processes roadway DVMT operations inputs.\nfollowing input files optional. data provided, model calculates values based default data included package processed LoadDefaultRoadDvmtValues.R script.","code":""},{"path":"vestate.html","id":"user-input-files-66","chapter":"11 VE-State Model Details","heading":"11.4.30.1 User Input Files","text":"Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)DVMT split road class Marea (marea_dvmt_split_by_road_class.csv)\nDVMT split road class Marea (marea_dvmt_split_by_road_class.csv)Operations deployment effects dvmt Marea (marea_operations_deployment.csv)Operations deployment effects dvmt Marea (marea_operations_deployment.csv)operations effects (other_ops_effectiveness.csv)operations effects (other_ops_effectiveness.csv)Charges congestion levels road class (marea_congestion_charges.csv)Charges congestion levels road class (marea_congestion_charges.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-64","chapter":"11 VE-State Model Details","heading":"11.4.30.2 Internal Module Inputs","text":"module uses datasets datastore.","code":""},{"path":"vestate.html","id":"module-outputs-66","chapter":"11 VE-State Model Details","heading":"11.4.30.3 Module Outputs","text":"module produces datasets store datastore.","code":""},{"path":"vestate.html","id":"vestate-calculatebaseroaddvmt","chapter":"11 VE-State Model Details","heading":"11.4.31 CalculateBaseRoadDvmt","text":"module calculates base year roadway DVMT vehicle type (light-duty, heavy truck, bus) distribution roadway DVMT vehicle type roadway classes (freeway, arterial, )\nmodule uses optional user inputs Initialize module run. Otherwise, uses default data instfolder","code":""},{"path":"vestate.html","id":"user-input-files-67","chapter":"11 VE-State Model Details","heading":"11.4.31.1 User Input Files","text":"Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)DVMT split road class Marea (marea_dvmt_split_by_road_class.csv)DVMT split road class Marea (marea_dvmt_split_by_road_class.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-65","chapter":"11 VE-State Model Details","heading":"11.4.31.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-67","chapter":"11 VE-State Model Details","heading":"11.4.31.3 Module Outputs","text":"HvyTrkDvmtUrbanProp: Proportion Region heavy truck daily vehicle miles travel occurring urbanized area roadwaysHvyTrkDvmtIncomeFactor: Ratio Region base year heavy truck DVMT household incomeHvyTrkDvmtPopulationFactor: Ratio Region base year heavy truck DVMT populationHvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasHvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles travel rural (.e. non-urbanized) areasComSvcDvmtHhDvmtFactor: Ratio Marea base year commercial service DVMT household DVMTComSvcDvmtIncomeFactor: Ratio base year commercial service vehicle DVMT household incomeComSvcDvmtPopulationFactor: Ratio base year commercial service vehicle DVMT populationHvyTrkDvmtPopulationFactor: Ratio base year heavy truck DVMT populationLdvRoadDvmtLdvDemandRatio: Ratio light-duty vehicle (LDV) daily vehicle miles travel (DVMT) urbanized area roadways Marea total LDV DVMT households residing urbanized area, commercial service vehicle travel related household demand, LDV public transit DVMT.ComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityLdvFwyArtDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmtProp: Proportion light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmtProp: Proportion heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmtProp: Proportion bus daily vehicle miles travel urbanized portion Marea occuring roadwaysLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadways","code":""},{"path":"vestate.html","id":"vestate-calculatefutureroaddvmt","chapter":"11 VE-State Model Details","heading":"11.4.32 CalculateFutureRoadDvmt","text":"module calculates future year roadway DVMT vehicle type (light-duty, heavy truck, bus) distribution roadway DVMT vehicle type roadway classes (freeway, arterial, )\nmodule uses optional user inputs Initialize module run. Otherwise, uses default data instfolder","code":""},{"path":"vestate.html","id":"user-input-files-68","chapter":"11 VE-State Model Details","heading":"11.4.32.1 User Input Files","text":"Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year highway truck DVMT region (region_base_year_hvytrk_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)Base year DVMT Marea (marea_base_year_dvmt.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-66","chapter":"11 VE-State Model Details","heading":"11.4.32.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-68","chapter":"11 VE-State Model Details","heading":"11.4.32.3 Module Outputs","text":"HvyTrkUrbanDvmt: Base year Region heavy truck daily vehicle miles travel urbanized areasHvyTrkRuralDvmt: Base year Region heavy truck daily vehicle miles travel rural (.e. non-urbanized) areasComSvcUrbanDvmt: Commercial service daily vehicle miles travel associated Marea urbanized household activityComSvcRuralDvmt: Commercial service daily vehicle miles travel associated Marea rural household activityLdvFwyArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freeway arterial roadwaysLdvOthDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring roadwaysHvyTrkFwyDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring freewaysHvyTrkArtDvmt:Heavy truck daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysHvyTrkOthDvmt: Heavy truck daily vehicle miles travel urbanized portion Marea occurring roadwaysBusFwyDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring freewaysBusArtDvmt: Bus daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysBusOthDvmt: Bus daily vehicle miles travel urbanized portion Marea occuring roadways","code":""},{"path":"vestate.html","id":"vestate-calculateroadperformance","chapter":"11 VE-State Model Details","heading":"11.4.33 CalculateRoadPerformance","text":"module splits light-duty vehicle (LDV) daily vehicle miles travel DVHT freeways arterials function relative speeds congestion prices. Speeds prices combined calculate average ‘effective’ speed freeways arterials. ratio freeway arterial ‘effective’ speeds split factor calculated metropolitan area used split LDV DVMT. Iteration used find equilibrium split value. addition LDV freeway DVMT arterial DVMT, following performance measures saved datastore:Average freeway speed congestion level;Average arterial speed congestion level;Average freeway delay congestion level;Average arterial delay congestion level;Freeway DVMT proportions congestion level;Arterial DVMT proportions congestion level;Average amount paid per mile congestion pricing fees; ,Vehicle hours delay vehicle type.","code":""},{"path":"vestate.html","id":"user-input-files-69","chapter":"11 VE-State Model Details","heading":"11.4.33.1 User Input Files","text":"Operations deployment effects dvmt Marea (marea_operations_deployment.csv)Operations deployment effects dvmt Marea (marea_operations_deployment.csv)operations effects (other_ops_effectiveness.csv)operations effects (other_ops_effectiveness.csv)Charges congestion levels road class (marea_congestion_charges.csv)Charges congestion levels road class (marea_congestion_charges.csv)","code":""},{"path":"vestate.html","id":"user-input-parameters-2","chapter":"11 VE-State Model Details","heading":"11.4.33.2 User Input Parameters","text":"Value time (valueoftime) : parameter set value time (base cost year dollars per hour). defined model_parameters.json","code":"{\"NAME\": \"ValueOfTime\", \n\"VALUE\": \"16\", \n\"TYPE\": \"double\", \n\"UNITS\": \"base cost year dollars per hour\"\n}"},{"path":"vestate.html","id":"internal-module-inputs-67","chapter":"11 VE-State Model Details","heading":"11.4.33.3 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-69","chapter":"11 VE-State Model Details","heading":"11.4.33.4 Module Outputs","text":"LdvFwyDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring freewaysLdvArtDvmt: Light-duty daily vehicle miles travel urbanized portion Marea occurring arterial roadwaysFwyNoneCongSpeed: Average freeway speed (miles per hour) congestionFwyModCongSpeed: Average freeway speed (miles per hour) congestion moderateFwyHvyCongSpeed: Average freeway speed (miles per hour) congestion heavyFwySevCongSpeed: Average freeway speed (miles per hour) congestion severeFwyExtCongSpeed: Average freeway speed (miles per hour) congestion extremeArtNoneCongSpeed: Average arterial speed (miles per hour) congestionArtModCongSpeed: Average arterial speed (miles per hour) congestion moderateArtHvyCongSpeed: Average arterial speed (miles per hour) congestion heavyArtSevCongSpeed: Average arterial speed (miles per hour) congestion severeArtExtCongSpeed: Average arterial speed (miles per hour) congestion extremeOthSpd: Average speed (miles per hour) roadwaysLdvAveSpeed: Average light-duty vehicle speed (miles per hour) roadways weighted proportions light-duty vehicle travelFwyNoneCongDelay: Average freeway delay (hours per mile) occurring congestionFwyModCongDelay: Average freeway delay (hours per mile) occurring congestion moderateFwyHvyCongDelay: Average freeway delay (hours per mile) occurring congestion heavyFwySevCongDelay: Average freeway delay (hours per mile) occurring congestion severeFwyExtCongDelay: Average freeway delay (hours per mile) occurring congestion extremeArtNoneCongDelay: Average arterial delay (hours per mile) occurring congestionArtModCongDelay: Average arterial delay (hours per mile) occurring congestion moderateArtHvyCongDelay: Average arterial delay (hours per mile) occurring congestion heavyArtSevCongDelay: Average arterial delay (hours per mile) occurring congestion severeArtExtCongDelay: Average arterial delay (hours per mile) occurring congestion extremeFwyDvmtPropNoneCong: Proportion freeway DVMT occurring congestionFwyDvmtPropModCong: Proportion freeway DVMT occurring congestion moderateFwyDvmtPropHvyCong: Proportion freeway DVMT occurring congestion heavyFwyDvmtPropSevCong: Proportion freeway DVMT occurring congestion severeFwyDvmtPropExtCong: Proportion freeway DVMT occurring congestion extremeArtDvmtPropNoneCong: Proportion arterial DVMT occurring congestionArtDvmtPropModCong: Proportion arterial DVMT occurring congestion moderateArtDvmtPropHvyCong: Proportion arterial DVMT occurring congestion heavyArtDvmtPropSevCong: Proportion arterial DVMT occurring congestion severeArtDvmtPropExtCong: Proportion arterial DVMT occurring congestion extremeAveCongPrice: Average price paid (dollars per mile) congestion feesFor information see ","code":""},{"path":"vestate.html","id":"vestate-calculatempgmpkwhadjustments","chapter":"11 VE-State Model Details","heading":"11.4.34 CalculateMpgMpkwhAdjustments","text":"module calculates adjustments fuel economy electric energy economy plug-vehicles) resulting traffic congestion, speed smoothing(.e. active traffic management reduces speed variation), ecodriving practices.","code":""},{"path":"vestate.html","id":"user-input-files-70","chapter":"11 VE-State Model Details","heading":"11.4.34.1 User Input Files","text":"Speed smoothing eco-driving (marea_speed_smooth_ecodrive.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-68","chapter":"11 VE-State Model Details","heading":"11.4.34.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-70","chapter":"11 VE-State Model Details","heading":"11.4.34.3 Module Outputs","text":"LdvSpdSmoothFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due speed smoothingHvyTrkSpdSmoothFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due speed smoothingBusSpdSmoothFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due speed smoothingLdvEcoDriveFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due eco-drivingHvyTrkEcoDriveFactor: Proportional adjustment heavy truck internal combustion engine (ICE) vehicle MPG due eco-drivingBusEcoDriveFactor: Proportional adjustment bus internal combustion engine (ICE) vehicle MPG due eco-drivingLdIceFactor: Proportional adjustment light-duty internal combustion engine (ICE) vehicle MPG due congestionLdHevFactor: Proportional adjustment light-duty hybrid-electric vehicle (HEV) MPG due congestionLdEvFactor: Proportional adjustment light-duty battery electric vehicle (EV) MPkWh due congestionLdFcvFactor: Proportional adjustment light-duty fuel cell vehicle (FCV) MPkWh due congestionHdIceFactor: Proportional adjustment heavy-duty internal combustion engine (ICE) vehicle MPG due congestion","code":""},{"path":"vestate.html","id":"vestate-adjusthhvehiclempgmpkwh","chapter":"11 VE-State Model Details","heading":"11.4.35 AdjustHhVehicleMpgMpkwh","text":"module adjusts fuel economy power efficiency household vehicles reflect roadway congestion.","code":""},{"path":"vestate.html","id":"user-input-files-71","chapter":"11 VE-State Model Details","heading":"11.4.35.1 User Input Files","text":"Car service vehicle powertrain proportions vehicle type model region (region_carsvc_powertrain_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-69","chapter":"11 VE-State Model Details","heading":"11.4.35.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-71","chapter":"11 VE-State Model Details","heading":"11.4.35.3 Module Outputs","text":"MPG: Average miles vehicle travel powered fuel per gasoline equivalent gallonGPM: Average gasoline equivalent gallons per mile vehicle travel powered fuelMPKWH: Average miles vehicle travel powered electricity per kilowatt-hourKWHPM: Average kilowatt-hours per mile vehicle travel powered electricityMPGe: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)ElecDvmtProp: Average miles vehicle travel per gasoline equivalent gallon (fuel electric powered)FuelCO2ePM: Average grams carbon-dioxide equivalents produced per mile travel powered fuelIsEcoDrive: Flag identifying whether drivers household eco-drivers","code":""},{"path":"vestate.html","id":"vestate-calculatevehicleoperatingcost","chapter":"11 VE-State Model Details","heading":"11.4.36 CalculateVehicleOperatingCost","text":"module calculates vehicle operating costs per mile travel uses costs determine proportional split DVMT among household vehicles. module also calculates average --pocket costs per mile vehicle household, well cost social environmental impacts, road use taxes per mile vehicle travel.","code":""},{"path":"vestate.html","id":"user-input-files-72","chapter":"11 VE-State Model Details","heading":"11.4.36.1 User Input Files","text":"Vehicle access times (azone_vehicle_access_times.csv)Vehicle access times (azone_vehicle_access_times.csv)Fuel electricity costs household vehicles (azone_fuel_power_cost.csvFuel electricity costs household vehicles (azone_fuel_power_cost.csvVehicle operating taxes households (azone_veh_use_taxes.csvVehicle operating taxes households (azone_veh_use_taxes.csvProportional external costs region (region_prop_externalities_paid.csvProportional external costs region (region_prop_externalities_paid.csv","code":""},{"path":"vestate.html","id":"user-input-parameters-3","chapter":"11 VE-State Model Details","heading":"11.4.36.2 User Input Parameters","text":"Value time (valueoftime) : parameter set value time (base cost year dollars per hour). defined model_parameters.json","code":"{\"NAME\": \"ValueOfTime\", \n\"VALUE\": \"16\", \n\"TYPE\": \"double\", \n\"UNITS\": \"base cost year dollars per hour\"\n}"},{"path":"vestate.html","id":"internal-module-inputs-70","chapter":"11 VE-State Model Details","heading":"11.4.36.3 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-72","chapter":"11 VE-State Model Details","heading":"11.4.36.4 Module Outputs","text":"AveVehCostPM: Average --pocket cost dollars per mile vehicle travelAveSocEnvCostPM: Average cost dollars social environmental impacts per mile vehicle travelAveRoadUseTaxPM: Average road use taxes dollars collected per mile vehicle travelDvmtProp: Proportion household DVMT allocated vehicleAveGPM: Average gasoline equivalent gallons per mile household vehicle travelAveKWHPM: Average kilowatt-hours per mile household vehicle travelAveCO2ePM: Average grams carbon-dioxide equivalents produced per mile household vehicle travel","code":""},{"path":"vestate.html","id":"vestate-budgethouseholddvmt","chapter":"11 VE-State Model Details","heading":"11.4.37 BudgetHouseholdDvmt","text":"module adjusts average household DVMT keep quantity within household operating cost limits. limit household calculated several steps. First, proportion household’s income may spent vehicle operating costs calculated using model explained . called budget proportion. adjusted household income\nbudget calculation purposes calculated adding annual cost insurance households subscribing payd---drive (PAYD) insurance, cash-parking payments workers work employer cash--buy-back parking, vehicle ownership cost savings households substitute high level car service one household\nvehicles. adjusted household income muliplied budget proportion divided average vehicle operating cost per mile household determine maximum household DVMT fits within household budget. household DVMT set lesser budget maximum modeled household DVMT.\nbudget proportion model estimated using data Bureau Labor’s consumer expenditure survey years 2003 2015. data used nominal dollar expenditures household income category year transportation category. values operating cost categories (gas oil, maintenance repair) summed divided \nmidpoint value income category calculate budget proportion income group year. mean value computed income group. budget proportions income group year divided mean values income group normalize values. standard deviation combined normalized values computed value 3\ndeviations mean set maximum normalized value. mean values income group multiplied normalized maximum derive budget proportion maximum income group. smoothed splines model budget proportion function income estimated calculated budget proportion maximums. model used calculate budget proportion household based household income. minimum \nmaximum values calculated budget proportion maximums used constraints avoid unreasonable results low incomes high incomes.","code":""},{"path":"vestate.html","id":"user-input-files-73","chapter":"11 VE-State Model Details","heading":"11.4.37.1 User Input Files","text":"module user-supplied input files","code":""},{"path":"vestate.html","id":"internal-module-inputs-71","chapter":"11 VE-State Model Details","heading":"11.4.37.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-73","chapter":"11 VE-State Model Details","heading":"11.4.37.3 Module Outputs","text":"Dvmt: Average daily vehicle miles traveled household autos light trucksUrbanHhDvmt: Average daily vehicle miles traveled autos light trucks households residing urbanized portion MareaRuralHhDvmt: Average daily vehicle miles traveled autos light trucks households residing non-urbanized portion MareaDailyGGE: Gasoline equivalent gallons consumed per day household vehicle travelDailyKWH: Kilowatt-hours consumed per day household vehicle travelDailyCO2e: Grams carbon-dioxide equivalents produced per day household vehicle travelWalkTrips: Average number walk trips per year household membersBikeTrips: Average number bicycle trips per year household membersTransitTrips: Average number public transit trips per year household membersVehicleTrips: Average number vehicle trips per day household members","code":""},{"path":"vestate.html","id":"vestate-balanceroadcostsandrevenues","chapter":"11 VE-State Model Details","heading":"11.4.38 BalanceRoadCostsAndRevenues","text":"module calculates extra mileage tax ($ per vehicle mile traveled) household vehicles needed make difference cost constructing, maintaining, operating roadways revenues fuel, VMT, congestion taxes.","code":""},{"path":"vestate.html","id":"user-input-files-74","chapter":"11 VE-State Model Details","heading":"11.4.38.1 User Input Files","text":"Road cost region (region_road_cost.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-72","chapter":"11 VE-State Model Details","heading":"11.4.38.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-74","chapter":"11 VE-State Model Details","heading":"11.4.38.3 Module Outputs","text":"ExtraVmtTax: Added vehicle mile tax household vehicle use pay deficit road costs road revenues (dollars per vehicle mile)","code":""},{"path":"vestate.html","id":"vestate-calculatecomenergyandemissions","chapter":"11 VE-State Model Details","heading":"11.4.39 CalculateComEnergyAndEmissions","text":"module calculates energy consumption carbon emissions heavy trucks light-duty commercial service vehicles. calculate values car service vehicles calculated part household emissions. also calculate public transit emissions calculated CalculateTransitEnergyAndEmissions module.","code":""},{"path":"vestate.html","id":"user-input-files-75","chapter":"11 VE-State Model Details","heading":"11.4.39.1 User Input Files","text":"Light trucks proportion commercial service vehicles (region_comsvc_lttrk_prop.csv)Light trucks proportion commercial service vehicles (region_comsvc_lttrk_prop.csv)Commercial service vehicle powertrain proportions vehicle type (region_comsvc_powertrain_prop.csv)Commercial service vehicle powertrain proportions vehicle type (region_comsvc_powertrain_prop.csv)Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv)Heavy duty truck powertrain proportions (region_hvytrk_powertrain_prop.csv)Mean age commercial service vehicles vehicle type (region_comsvc_veh_mean_age.csv)Mean age commercial service vehicles vehicle type (region_comsvc_veh_mean_age.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-73","chapter":"11 VE-State Model Details","heading":"11.4.39.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-75","chapter":"11 VE-State Model Details","heading":"11.4.39.3 Module Outputs","text":"ComSvcUrbanGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated urban household activity gas gallon equivalentsComSvcUrbanGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated urban household activity gas gallon equivalentsComSvcRuralGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated rural household activity gas gallon equivalentsComSvcRuralGGE: Average daily amount hydrocarbon fuels consumed commercial service vehicles associated rural household activity gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Marea gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Marea gas gallon equivalentsComSvcUrbanKWH: Average daily amount electricity consumed commercial service vehicles associated urban household activity kilowatt-hoursComSvcUrbanKWH: Average daily amount electricity consumed commercial service vehicles associated urban household activity kilowatt-hoursComSvcRuralKWH: Average daily amount electricity consumed commercial service vehicles associated rural household activity kilowatt-hoursComSvcRuralKWH: Average daily amount electricity consumed commercial service vehicles associated rural household activity kilowatt-hoursComSvcUrbanCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated urban household activity gramsComSvcUrbanCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated urban household activity gramsComSvcRuralCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated rural household activity gramsComSvcRuralCO2e: Average daily amount carbon-dioxide equivalents produced commercial service vehicles associated rural household activity gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Marea gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Marea gramsComSvcAveUrbanAutoCO2eRate: Average amount carbon-dioxide equivalents produced commercial service automobiles per mile travel urbanized area roadways grams per mileComSvcAveUrbanAutoCO2eRate: Average amount carbon-dioxide equivalents produced commercial service automobiles per mile travel urbanized area roadways grams per mileComSvcAveUrbanLtTrkCO2eRate: Average amount carbon-dioxide equivalents produced commercial service light trucks per mile travel urbanized area roadways grams per mileComSvcAveUrbanLtTrkCO2eRate: Average amount carbon-dioxide equivalents produced commercial service light trucks per mile travel urbanized area roadways grams per mileHvyTrkAveUrbanCO2eRate: Average amount carbon-dioxide equivalents produced heavy trucks per mile travel urbanized area roadways grams per mileHvyTrkAveUrbanCO2eRate: Average amount carbon-dioxide equivalents produced heavy trucks per mile travel urbanized area roadways grams per mileHvyTrkRuralGGE: Average daily amount hydrocarbon fuels consumed heavy trucks rural roadways Region gas gallon equivalentsHvyTrkRuralGGE: Average daily amount hydrocarbon fuels consumed heavy trucks rural roadways Region gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Region gas gallon equivalentsHvyTrkUrbanGGE: Average daily amount hydrocarbon fuels consumed heavy trucks urbanized area roadways Region gas gallon equivalentsHvyTrkRuralKWH: Average daily amount electricity consumed heavy trucks rural roadways Region kilowatt-hoursHvyTrkRuralKWH: Average daily amount electricity consumed heavy trucks rural roadways Region kilowatt-hoursHvyTrkUrbanKWH: Average daily amount electricity consumed heavy trucks urbanized area roadways Region kilowatt-hoursHvyTrkUrbanKWH: Average daily amount electricity consumed heavy trucks urbanized area roadways Region kilowatt-hoursHvyTrkRuralCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks rural roadways Region gramsHvyTrkRuralCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks rural roadways Region gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Region gramsHvyTrkUrbanCO2e: Average daily amount carbon-dioxide equivalents produced heavy trucks urbanized area roadways Region grams","code":""},{"path":"vestate.html","id":"vestate-calculateptranenergyandemissions","chapter":"11 VE-State Model Details","heading":"11.4.40 CalculatePtranEnergyAndEmissions","text":"module calculates energy consumption carbon emissions public transit vehicle emissions urbanized areas.","code":""},{"path":"vestate.html","id":"user-input-files-76","chapter":"11 VE-State Model Details","heading":"11.4.40.1 User Input Files","text":"Transit powertrain proportions transit vehicle type (marea_transit_powertrain_prop.csv)","code":""},{"path":"vestate.html","id":"internal-module-inputs-74","chapter":"11 VE-State Model Details","heading":"11.4.40.2 Internal Module Inputs","text":"","code":""},{"path":"vestate.html","id":"module-outputs-76","chapter":"11 VE-State Model Details","heading":"11.4.40.3 Module Outputs","text":"BusGGE: Average daily amount hydrocarbon fuels consumed bus transit vehicles urbanized area gas gallon equivalentsRailGGE: Average daily amount hydrocarbon fuels consumed rail transit vehicles urbanized area gas gallon equivalentsVanGGE: Average daily amount hydrocarbon fuels consumed van transit vehicles urbanized area gas gallon equivalentsBusKWH: Average daily amount electricity consumed bus transit vehicles urbanized area kilowatt-hoursRailKWH: Average daily amount electricity consumed rail transit vehicles urbanized area kilowatt-hoursVanKWH:Average daily amount electricity consumed van transit vehicles urbanized area kilowatt-hoursBusCO2e: Average daily amount carbon-dioxide equivalents produced bus transit vehicles urbanized area gramsRailCO2e: Average daily amount carbon-dioxide equivalents produced rail transit vehicles urbanized area gramsVanCO2e: Average daily amount carbon-dioxide equivalents produced van transit vehicles urbanized area gramsBusCO2eRate: Average amount carbon-dioxide equivalents produced bus transit vehicles per mile travel urbanized area grams per mileRailCO2eRate: Average amount carbon-dioxide equivalents produced rail transit vehicles per mile travel urbanized area grams per mileVanCO2eRate: Average amount carbon-dioxide equivalents produced van transit vehicles per mile travel urbanized area grams per mile","code":""},{"path":"vestate.html","id":"development-and-installation","chapter":"11 VE-State Model Details","heading":"11.5 Development and Installation","text":"section describes installation use VE-State.","code":""},{"path":"vestate.html","id":"installation-of-visioneval-and-ve-state","chapter":"11 VE-State Model Details","heading":"11.6 Installation of VisionEval and VE-State","text":"VE-State VisionEval framework implemented R, statistical programming language environment. R VisionEval open source freely available. running VE-State need follow steps:Install R (users encouraged also install RStudio, free open-source integrated development environment R)Install VisionEvalRun VE-StateThe VisionEval installer available . Follow instructions page carefully install VisionEval system.","code":""},{"path":"vestate.html","id":"in-brief-running-ve-state-base-scenario","chapter":"11 VE-State Model Details","heading":"11.7 In Brief: Running VE-State Base Scenario","text":"See VisionEval Getting Started documentation overview framework methods running models querying results.Double-click VisionEval.Rproj location installed VisionEval. launch RStudio.Enter statemod <- openModel('VE-State')Enter statemod$run()","code":""},{"path":"vestate.html","id":"in-detail-running-ve-state-base-scenario","chapter":"11 VE-State Model Details","heading":"11.8 In Detail: Running VE-State Base Scenario","text":"","code":""},{"path":"vestate.html","id":"preparing-inputs","chapter":"11 VE-State Model Details","heading":"11.8.1 Preparing inputs","text":"VisionEval VE-State installed, directory sample data available ../models/VE-State/. (Note .. refers parent directory unzipped installer file).VE-State directory serves dual purposes providing sample data serving template local modification locations.../models/VE-State/ directory contains sample input files Oregon. inputs can modified replaced investigate impacts policy changes model different state. folder contains multiple files subfolders:run_model.R core script running model. consists calls modules make model. user may modify script call desired modules.defs directory contains five model definition files introduced Model Definition FilesThe inputs directory contains number CSV JSON files provide inputs modules. module specifies input files needs. like know\ndescription input file can change files desired testing see Inputs_and_ParametersThe ../models/VE-State directory contains sample input files state Oregon. can modified replaced investigate impacts policy changes model different state.","code":""},{"path":"vestate.html","id":"running-the-model","chapter":"11 VE-State Model Details","heading":"11.8.2 Running the Model","text":"multiple ways run VisionEval models. VisionEval models can run via command line directly using openModel, can run one scenario multiple scenarios parallel. Results can viewed tabular form interactive VEScenarioViewer.Start R (RStudio) make sure directory set installer folder. easiest way double-click VisionEval.Rproj, associated RStudio installed correctly.see ‘Welcome VisionEval!’ RStudio console. run following commands:default run model ../models/VE-State/ directory. default model Oregon, 2010 2040.running script see modules running order.model run take approximately 45 minutes. complete, output exported ../models/VE-State/outputs 3 different zone levels.","code":"statemod <- openModel('VE-State')\nstatemod$run()"},{"path":"vestate.html","id":"querying-results","chapter":"11 VE-State Model Details","heading":"11.9 Querying results","text":"extract results .csv files, run:R console, see messages tables extracted files saved, e.g.:state-wide model, Household Vehicle tables particular can quite large, full result extraction might take several minutes.extract just one field, example DVMT household level 2010 2040, first select just Household table using tablesSelected method:select Dvmt field:Extract result list data frames plotting, rather .csv file. manipulation list can done put fields one data frame plotting, example:Plot using ggplot2 library, example:query methods described Getting Started documentation.","code":"statemod$extract()Extracting data for Table Azone in Group 2010\nExtracting data for Table Bzone in Group 2010\nExtracting data for Table Household in Group 2010\n[...]\nWrite output file: /models/VE-State/output/Azone_2010_1_2021-03-02_153010.csv\nWrite output file: /models/VE-State/output/Bzone_2010_1_2021-03-02_153010.csv\n[...]statemod$tablesSelected <- 'Household'statemod$fieldsSelected <- 'Dvmt'hh_dvmt <- statemod$extract(saveTo = F)\nhh_dvmt <- unlist(hh_dvmt)\nyear <- names(hh_dvmt)\nyear <- ifelse(grepl('2010', year), '2010', '2040')\nhh_dvmt <- data.frame(year, Dvmt = hh_dvmt)ggplot(hh_dvmt, aes(x = Dvmt, fill = year)) + \n  geom_histogram() + \n  ylab('Number of Households') +\n  ggtitle('Distribution of DVMT by VE-State for Oregon')"},{"path":"vestate.html","id":"scenarios","chapter":"11 VE-State Model Details","heading":"11.9.1 Scenarios","text":"modify scenario, appropriate input files edited. example, change flat rate tax vehicles future azone_hh_veh_own_taxes.csv modified Excel, LibreOffice, OpenOffice, text editor change VehOwnFlatRateFee year 2038.Create scenarios using steps VE-RSPMReturn Tutorial.","code":""},{"path":"vestate.html","id":"development-and-installation-1","chapter":"11 VE-State Model Details","heading":"11.10 Development and Installation","text":"section describes installation use VE-State.","code":""},{"path":"vestate.html","id":"installation-of-visioneval-and-ve-state-1","chapter":"11 VE-State Model Details","heading":"11.11 Installation of VisionEval and VE-State","text":"VE-State VisionEval framework implemented R, statistical programming language environment. R VisionEval open source freely available. running VE-State need follow steps:Install R (users encouraged also install RStudio, free open-source integrated development environment R)Install VisionEvalRun VE-StateThe VisionEval installer available . Follow instructions page carefully install VisionEval system.","code":""},{"path":"vestate.html","id":"in-brief-running-ve-state-base-scenario-1","chapter":"11 VE-State Model Details","heading":"11.12 In Brief: Running VE-State Base Scenario","text":"See VisionEval Getting Started documentation overview framework methods running models querying results.Double-click VisionEval.Rproj location installed VisionEval. launch RStudio.Enter statemod <- openModel('VE-State')Enter statemod$run()","code":""},{"path":"vestate.html","id":"in-detail-running-ve-state-base-scenario-1","chapter":"11 VE-State Model Details","heading":"11.13 In Detail: Running VE-State Base Scenario","text":"","code":""},{"path":"vestate.html","id":"preparing-inputs-1","chapter":"11 VE-State Model Details","heading":"11.13.1 Preparing inputs","text":"VisionEval VE-State installed, directory sample data available ../models/VE-State/. (Note .. refers parent directory unzipped installer file).VE-State directory serves dual purposes providing sample data serving template local modification locations.../models/VE-State/ directory contains sample input files Oregon. inputs can modified replaced investigate impacts policy changes model different state. folder contains multiple files subfolders:run_model.R core script running model. consists calls modules make model. user may modify script call desired modules.defs directory contains five model definition files introduced Model Definition FilesThe inputs directory contains number CSV JSON files provide inputs modules. module specifies input files needs. like know\ndescription input file can change files desired testing see Inputs_and_ParametersThe ../models/VE-State directory contains sample input files state Oregon. can modified replaced investigate impacts policy changes model different state.","code":""},{"path":"vestate.html","id":"running-the-model-1","chapter":"11 VE-State Model Details","heading":"11.13.2 Running the Model","text":"multiple ways run VisionEval models. VisionEval models can run via command line directly using openModel, can run one scenario multiple scenarios parallel. Results can viewed tabular form interactive VEScenarioViewer.Start R (RStudio) make sure directory set installer folder. easiest way double-click VisionEval.Rproj, associated RStudio installed correctly.see ‘Welcome VisionEval!’ RStudio console. run following commands:default run model ../models/VE-State/ directory. default model Oregon, 2010 2040.running script see modules running order.model run take approximately 45 minutes. complete, output exported ../models/VE-State/outputs 3 different zone levels.","code":"statemod <- openModel('VE-State')\nstatemod$run()"},{"path":"vestate.html","id":"querying-results-1","chapter":"11 VE-State Model Details","heading":"11.14 Querying results","text":"extract results .csv files, run:R console, see messages tables extracted files saved, e.g.:state-wide model, Household Vehicle tables particular can quite large, full result extraction might take several minutes.extract just one field, example DVMT household level 2010 2040, first select just Household table using tablesSelected method:select Dvmt field:Extract result list data frames plotting, rather .csv file. manipulation list can done put fields one data frame plotting, example:Plot using ggplot2 library, example:query methods described Getting Started documentation.","code":"statemod$extract()Extracting data for Table Azone in Group 2010\nExtracting data for Table Bzone in Group 2010\nExtracting data for Table Household in Group 2010\n[...]\nWrite output file: /models/VE-State/output/Azone_2010_1_2021-03-02_153010.csv\nWrite output file: /models/VE-State/output/Bzone_2010_1_2021-03-02_153010.csv\n[...]statemod$tablesSelected <- 'Household'statemod$fieldsSelected <- 'Dvmt'hh_dvmt <- statemod$extract(saveTo = F)\nhh_dvmt <- unlist(hh_dvmt)\nyear <- names(hh_dvmt)\nyear <- ifelse(grepl('2010', year), '2010', '2040')\nhh_dvmt <- data.frame(year, Dvmt = hh_dvmt)ggplot(hh_dvmt, aes(x = Dvmt, fill = year)) + \n  geom_histogram() + \n  ylab('Number of Households') +\n  ggtitle('Distribution of DVMT by VE-State for Oregon')"},{"path":"vestate.html","id":"scenarios-1","chapter":"11 VE-State Model Details","heading":"11.14.1 Scenarios","text":"modify scenario, appropriate input files edited. example, change flat rate tax vehicles future azone_hh_veh_own_taxes.csv modified Excel, LibreOffice, OpenOffice, text editor change VehOwnFlatRateFee year 2038.Create scenarios using steps VE-RSPMReturn Tutorial.","code":""},{"path":"verpat.html","id":"verpat","chapter":"12 VERPAT Model Details","heading":"12 VERPAT Model Details","text":"","code":""},{"path":"verpat.html","id":"overview-2","chapter":"12 VERPAT Model Details","heading":"12.1 Overview","text":"VERPAT tool evaluating impact various smart growth policies. VERPAT designed high-level evaluation regional scale can bridge distance evaluating smart growth policies regional visioning process evaluating smart growth policies project alternative level regional transportation plan. VERPAT evaluates policy scenarios identify promising policies tested using detailed project-level tool. Currently, VERPAT can provide information following changes regional system:Built Environment - changes urban form (proportion population employment living mixed-use areas, transit-oriented developments, rural/greenfield areas)Travel Demand - changes population demographics (age structure), changes personal income, changes firms size industry, relative amounts development occurring urban core, close-communities, suburban rural areas, urban core, auto light truck proportions year, induced demandTransportation Supply - amounts regional transit service, amounts freeway arterial capacityPolicies - pricing (vehicle miles traveled charges parking pricing programs), intelligent transportation system () strategies freeways arterials, demand management (vanpool, telecommuting, ridesharing, transit pass programs)VERPAT designed evaluate regions, can multi-county metropolitan region. distinguishes population employment living/working urban core, close-communities, suburban rural/greenfield areas based densities, diversity land uses, street design intersection densities, job accessibility auto, distances transit stops, connectivity street system.intended audience VERPAT regional decision-makers land use transportation planners involved development evaluation transportation land use policies, need conduct scenario planning evaluate smart growth policies determine impact travel demand. VERPAT designed address many limitations identified research possible provide tool filled gap set available tools. relationships VERPAT tool based upon background research conducted SHRP 2 C16 project. VERPAT designed allow evaluation wide range policies combination policies consistent framework quickly easily promising smart growth strategies can identified pursued land use transportation planning processes. VERPAT intended precede supplement sophisticated modeling efforts, can used evaluate specific smart growth projects. designed accessible land use transportation planners modeling experience.","code":""},{"path":"verpat.html","id":"verpat-model-structure","chapter":"12 VERPAT Model Details","heading":"12.1.1 VERPAT Model Structure","text":"VERPAT disaggregate policy model predicts travel demand impacts individual household level.diagram illustrates modeling system model components feedback loops. Links provided source code implements section.\n Household Models: Households Package \n\n Firms Models: Firms Package \n\n Urban Form Models: Land Use Package \n\n Accessibility Models: Transport Supply Package \n\n Vehicle Models: Household Vehicles Package \n\n Travel Demand Models: Household Travel Package \n\n Congestion Models: Transport Supply Use Package \n\n Travel Performance Package \n\n Reporting Package \n, see [[VERPAT Modules Outputs | VERPAT-Modules--Outputs]].","code":""},{"path":"verpat.html","id":"verpat-modules","chapter":"12 VERPAT Model Details","heading":"12.1.2 VERPAT Modules","text":"VERPAT provide specific spatial results beyond built environment categories regional level, capture individual household firm characteristics interactions policies. disaggregate nature model captures impacts may occurring small portions population (say 0-vehicle households) aggregate models difficult time capturing impacts.following explanation major steps model execution[] = indicates VE modulesHousehold Model - Households PackageCreate synthetic households region, including persons [Create Households] workers [Predict Workers] age group. total household income assigned household, given ages persons household average per capita income region household resides [PredictIncome].Firm Model - Synthetic Firms Package\nset firms created forecast year represents likely firm composition region, given County Business Pattern data firms size industry. firm described terms number employees industry [CreateBaseSyntheticFirms] [CreateFutureSyntheticFirms].Firm Model - Synthetic Firms Package\nset firms created forecast year represents likely firm composition region, given County Business Pattern data firms size industry. firm described terms number employees industry [CreateBaseSyntheticFirms] [CreateFutureSyntheticFirms].Urban Form Model - Land Use Package\nCalculate Place Types Households Firms - Population employment location characteristics important variables vehicle ownership, travel demand, accessibility models. four place types (urban core, Close-Community, suburban, rural five location categories (residential, commercial, mixed-use, transit-oriented development, Greenfield)]. Models households developed estimate location characteristics using National Household Travel Survey data. Firms currently allocated randomly fit employment allocation inputs since national datasets draw relationships [CalculateBasePlaceTypes] [CalculateFuturePlaceTypes].Urban Form Model - Land Use Package\nCalculate Place Types Households Firms - Population employment location characteristics important variables vehicle ownership, travel demand, accessibility models. four place types (urban core, Close-Community, suburban, rural five location categories (residential, commercial, mixed-use, transit-oriented development, Greenfield)]. Models households developed estimate location characteristics using National Household Travel Survey data. Firms currently allocated randomly fit employment allocation inputs since national datasets draw relationships [CalculateBasePlaceTypes] [CalculateFuturePlaceTypes].Accessibility Model - Transport Supply Package\nCalculate Freeway, Arterial, Public Transit Supply Levels - number lane miles freeways arterials computed region based change inventories particular scenario. public transit, inputs specify change transit revenue miles relative base. Inputs area also specify revenue mile split electrified rail buses [CreateBaseAccessibility] [CreateFutureAccessibility].Accessibility Model - Transport Supply Package\nCalculate Freeway, Arterial, Public Transit Supply Levels - number lane miles freeways arterials computed region based change inventories particular scenario. public transit, inputs specify change transit revenue miles relative base. Inputs area also specify revenue mile split electrified rail buses [CreateBaseAccessibility] [CreateFutureAccessibility].Vehicle Model - Household Vehicle Package\nCalculate Vehicle Ownership - household assigned number vehicles likely based number persons driving age household, whether elderly persons live household, income household, population density household lives, freeway supply, transit supply, whether household located urban mixed-use area. [AssignVehicleFeatures] [AssignVehicleFeaturesFuture].Vehicle Model - Household Vehicle Package\nCalculate Vehicle Ownership - household assigned number vehicles likely based number persons driving age household, whether elderly persons live household, income household, population density household lives, freeway supply, transit supply, whether household located urban mixed-use area. [AssignVehicleFeatures] [AssignVehicleFeaturesFuture].Travel Demand Model - Household Travel Package\nCalculate Travel Demand - average daily vehicle miles traveled, classification vehicles electric vehicles, auto transit trips household modeled based household information determined previous steps base conditions. model sensitive household income, population density neighborhood household resides, number household vehicles, whether household owns vehicles, levels public transportation freeway supplies region, driving age population household, presence persons age 65, whether neighborhood characterized mixed-use development. [CalculateTravelDemand] [CalculateTravelDemandFuture].Travel Demand Model - Household Travel Package\nCalculate Travel Demand - average daily vehicle miles traveled, classification vehicles electric vehicles, auto transit trips household modeled based household information determined previous steps base conditions. model sensitive household income, population density neighborhood household resides, number household vehicles, whether household owns vehicles, levels public transportation freeway supplies region, driving age population household, presence persons age 65, whether neighborhood characterized mixed-use development. [CalculateTravelDemand] [CalculateTravelDemandFuture].Congestion Model - Transport Supply Use Package\nCalculate amount congestion – Auto, light truck VMT, truck VMT bus VMT allocated freeways, arterials, roadways. Truck bus VMT allocated based mode-specific data, auto light truck VMT allocated based combination factors model sensitive relative supplies freeway arterial lane miles. System-wide ratios VMT lane miles freeways arterials used allocate VMT congestion levels using congestion levels defined Texas Transportation Institute Urban Mobility Report. freeway arterial congestion level associated average trip speed conditions include treatment incident management roadway. Overall average speeds congestion level calculated based input assumptions degree incident management. Speed vs. fuel efficiency relationships light vehicles, trucks, buses used adjust fleet fuel efficiency averages computed region. [CalculateCongestionBase], [CalculateCongestionFuture], [CalculateCongestionPolicy].","code":"Calculate Truck and Bus Vehicle Miles Traveled (VMT) - Regional truck VMT is calculated based on changes in the regional household income. As a default, a one-to-one relationship between regional income growth and truck VMT growth is assumed. In other words, a doubling of total regional income would result in a doubling of truck VMT. Bus VMT is calculated from bus revenue miles that are factored up to total vehicle miles to account for miles driven in non-revenue service. [[CalculateTravelDemand](https://github.com/visioneval/VisionEval/wiki/VERPAT-Modules-and-Outputs#calculatetraveldemand)] and [[CalculateTravelDemandFuture](https://github.com/visioneval/VisionEval/wiki/VERPAT-Modules-and-Outputs#calculatetraveldemandfuture)].   "},{"path":"verpat.html","id":"feedback-loops","chapter":"12 VERPAT Model Details","heading":"12.1.3 Feedback loops","text":"Following initial calculations baseline conditions, model feedback loops, allow changes travel demand impacts based induced travel demand changes policies given scenario. Congestion recalculated following adjustments demand.Induced Demand Model - Household Travel Package\nCalculate Induced Travel Demand - Induced demand calculated changes roadway supply near term function speed, based potential mode route shifts produce changes VMT longer term include changes vehicle ownership, still function speed. model include induced demand result changes growth may occur part smart growth scenario evidence limited empirical evidence. [CalculateInducedDemand].Induced Demand Model - Household Travel PackageCalculate Induced Travel Demand - Induced demand calculated changes roadway supply near term function speed, based potential mode route shifts produce changes VMT longer term include changes vehicle ownership, still function speed. model include induced demand result changes growth may occur part smart growth scenario evidence limited empirical evidence. [CalculateInducedDemand].Policy Adjusted Travel Demand - Household Travel Package\nCalculate Scenario Travel Demand - average daily VMT household can adjusted based changes growth patterns place type, changes auto operating cost, changes road lane miles transit revenue miles scenario. also series policy assumptions can contribute changes VMT: pricing VMT charges parking pricing, strategies freeways arterials, vanpool, telecommuting, ridesharing, transit pass programs. contribute shifts travel demand given scenario. [CalculatePolicyVmt].Policy Adjusted Travel Demand - Household Travel Package\nCalculate Scenario Travel Demand - average daily VMT household can adjusted based changes growth patterns place type, changes auto operating cost, changes road lane miles transit revenue miles scenario. also series policy assumptions can contribute changes VMT: pricing VMT charges parking pricing, strategies freeways arterials, vanpool, telecommuting, ridesharing, transit pass programs. contribute shifts travel demand given scenario. [CalculatePolicyVmt].Performance metrics calculated VEReports package. impacts produced given scenario include environment energy impacts greenhouse gas (GHG) emissions fuel consumption), financial economic impacts (highway transit infrastructure costs, transit operating costs, traveler costs), regional accessibility, community impacts (livability public health indicators).","code":""},{"path":"verpat.html","id":"for-more-information","chapter":"12 VERPAT Model Details","heading":"12.1.4 For more information","text":"VERPAT Modules OutputsVisionEval Model System Design Users GuideTravelWorks Rapid Policy Assessment ToolRPAT User manual[[Overview | VERPAT-Tutorial-Overview]]","code":""},{"path":"verpat.html","id":"inputs-and-parameters-verpat-inputs-and-parameters","chapter":"12 VERPAT Model Details","heading":"12.2 Inputs and Parameters {verpat-inputs-and-parameters}","text":"VERPAT contains 5 definition files 32 input files, user must change others typically remain unchanged. page walks end user files specifies files must updated implement VERPAT new region.following five files need configured “defs” directory:run_parameters.jsonmodel_parameters.jsondeflators.csvgeo.csvunits.csv","code":""},{"path":"verpat.html","id":"run_parameters.json","chapter":"12 VERPAT Model Details","heading":"12.2.0.1 run_parameters.json","text":"“run_parameters.json” file contains parameters define key attributes model run relationships model runs. detailed description file can found . results model run stored directory name specified \"DatastoreName\". name changed running different scenarios. e.g. running base scenario output directory name can set BaseScenario using \"DatastoreName\": [\"BaseScenario\"] file. format VERPAT run_parameters.json file follows:Inputs Model Parameters Definitions","code":"{\n    \"Model\": [\"RPAT\"],\n    \"Scenario\": [\"RPAT Pilot\"],\n    \"Description\": [\"Pilot RPAT module in VisionEval\"],\n    \"Region\": [\"Multnomah County Oregon\"],\n    \"BaseYear\": [\"2005\"],\n    \"Years\": [\"2005\", \"2035\"],\n    \"DatastoreName\": [\"Datastore\"],\n    \"DatastoreType\": [\"RD\"],\n    \"Seed\": [1],\n    \"RunTypes\": [\"E\", \"ELESNP\"]\n}"},{"path":"verpat.html","id":"model_parameters.json-1","chapter":"12 VERPAT Model Details","heading":"12.2.0.2 model_parameters.json","text":"“model_parameters.json” can contain global parameters particular model configuration may used multiple modules. detailed description file structure can found . description variables, required VERPAT, listed file documented modules uses inputs outputs section. values may modified run scenarios. variables can modified described Input Files. format VERPAT model_parameters.json file follows:Inputs Model Parameters Definitions","code":"[\n  {\"NAME\": \"EmploymentGrowth\",\n   \"VALUE\": \"1.5\",\n   \"TYPE\": \"double\",\n   \"UNITS\": \"multiplier\",\n   \"PROHIBIT\": \"\",\n   \"ISELEMENTOF\": \"\"},\n  {\n    \"NAME\": \"FwyLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n  },\n  {\n    \"NAME\" : \"ArtLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n  },\n  .\n  .\n  .\n  {\n    \"NAME\" : \"AutoCostGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n  }\n]"},{"path":"verpat.html","id":"deflators.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.0.3 deflators.csv","text":"deflators.csv file defines annual deflator values, consumer price index, used convert currency values different years currency denomination. file need modified unless years dollar values used input dataset contained file. format file follows:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"geo.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.0.4 geo.csv","text":"“geography.csv” file describes geographic relationships model names geographic entities CSV-formatted text file. Azone, Bzone, Marea remain consistent input data. format file follows:geography described 13 place types shown . One emerging school thought land use planning consider land uses terms place types instead simply residential commercial high density compared low density. place type refers characteristics developed area including types uses included, mix uses, density intensity uses.initial typology system organize place types can traced Smart Growth Transect, contained six zones original configuration including:Rural PreserveRural ReserveEdgeGeneralCenterCoreThis approach classifying place types refined Caltrans Smart Mobility defined following seven place types including:Urban CentersClose-Compact CommunitiesCompact CommunitiesSuburban CommunitiesRural Agricultural LandsProtected LandsSpecial Use AreasSeveral place type categories provided additional options Close-Compact Communities three sub-definitions including Close--Centers, Close-Corridors, Close-Neighborhoods.alternative view place types provided Reconnecting America, developed performance based place type approach describing areas proximate transit stations. Station areas vary terms relative focus residential units, employees mix two. Station areas also characterized relative intensity well shown .PERFORMANCE BASED TYPOLOGY TRANSIT STATION AREASThe approach employed place types RPAT therefore amalgam approaches, terminology borrowed Smart Growth Transect Caltrans Smart Mobility Study, relative performance place type taken Reconnecting America approach applied region instead transit station sites.Four general area types defined RPAT including:Urban Core high-density mixed-use places high jobs-housing ratios, well connected streets high levels pedestrian activities. anticipated many regions, Urban Core traditional downtown area likely one.Close-Community areas located near Urban Cores consist primarily housing scattered mixed-use centers arterial corridors. Housing varied terms density type. Transit available primary focus commute trips. areas may classified residents suburban considered close-communities given adjacency Downtown therefore higher levels regional accessibility.Suburban place type anticipated represent majority development within regions. communities characterized low level integration housing jobs, retail, services, poorly connected street networks, low levels transit service, large amounts surface parking, limited walk ability.Rural place type defined settlements widely spaced towns separated firms, vineyards, orchards, grazing lands. areas characterized widely dispersed residential uses, little transit service, limited pedestrian facilities.definition place types allowed use development types within Urban Core, Close-Community, Suburban area types including:Residential includes place types predominantly residential character limited employment retail opportunities. Examples development type might include typical Suburban Residential areas Downtown primarily residential well. anticipated development type may found area types except rural.Employment includes areas focused employment limited retail residential. example might include Suburban Office Complex large cluster office buildings within Close-Community Urban Core. residential development type, anticipated type use found place types except rural.Mixed-Use areas within region mix residential, employment, retail uses. development type can found Suburban place type, commonly found close-community urban core place type. Downtown areas retained residential population complement employment examples development type.Transit-Oriented Development (TOD) similar development types applied area types except Rural areas since thought highly unlikely rural TOD developed. TOD development type characterized greater access transit area types. Examples development type might include Suburban TOD focused commuter rail station.process allocating existing land use 13 place types somewhat dependent types data available region describe existing land use, process can either detailed somewhat simplified. following description relays process developed Atlanta Regional Commission (ARC) part pilot testing RPAT provides example , mechanically, agency can approach allocation. noted merely one approach specific recommendation method followed.general, ARC followed somewhat detailed process derive input data land use data presented “Unified Growth Policy Map”, regional travel demand model. developed heuristics align land use 13 place types RPAT uses.conversion land use data place type scheme used RPAT involved taking ARC’s Unified Growth Policy Map (UGPM) Areas converting 13 RPAT place types.first step allocate UGPM areas four area types used RPAT. Urban Core area type includes Region Core, Region Employment Centers Aerotropolis UGPM areas; Close-Community includes Maturing Neighborhoods; Suburban includes Developing Suburbs Established Suburbs; Rural includes Rural Areas Developing Rural.ARC traffic analysis zone (TAZ) system overlaid area types centroid TAZ used determine area type.RPAT development type, dimension place type matrix, included residential, mixed-use, employment, TOD development types determined TAZ rural area type using base year percentage TAZ’s employment relation total population employment TAZ. mix employment employment used determine TAZs development type using following cut points:\nResidential: < 33.33%\nMixed Use: 33.33% 66.67%\nEmployment: > 66.67%\nResidential: < 33.33%Mixed Use: 33.33% 66.67%Employment: > 66.67%Identify TAZs TOD based transit service specific development types: one TAZ determined TOD development type, Lindbergh Center, Urban Core area type.combination area type development type used allocate TAZs one 13 place types.following enumeration place type abbreviation appears input file well brief description value:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"units.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.1 units.csv","text":"“units.csv” file describes default units used storing complex data types model. file modified user. format file follows:VisionEval model system keeps track types units measure data processed. details file structure can found .Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"input-files","chapter":"12 VERPAT Model Details","heading":"12.2.2 Input Files","text":"","code":""},{"path":"verpat.html","id":"inputs-1","chapter":"12 VERPAT Model Details","heading":"12.2.2.1 Inputs","text":"scenario inputs split four (4) categories: Built Environment, Demand, Policy, Supply. two ways specify inputs. CSV Inputs specified *.csv file JSON Inputs specified model_parameters.json file. users encouraged change inputs build different scenarios. RPAT VERPAT connection RPAT inputs VERPAT inputs.Built Environment\n- CSV Inputs\n- bzone_pop_emp_prop.csvDemand\n- CSV Inputs\n- region_trips_per_cap.csv\n- azone_employment_by_naics.csv\n- azone_hh_pop_by_age.csv\n- azone_gq_pop_by_age.csv\n- azone_hhsize_targets.csv\n- azone_per_cap_inc.csv\n- azone_relative_employment.csv\n- region_truck_bus_vmt.csv\n- JSON Inputs\n- BaseLtVehDvmt\n- BaseFwyArtProp\n- EmploymentGrowthTransport SupplyCSV Inputs\nmarea_lane_miles.csv\nmarea_rev_miles_pc.csv\nmarea_lane_miles.csvmarea_rev_miles_pc.csvPolicy\n- CSV Inputs\n- region_commute_options.csv\n- azone_its_prop.csv\n- region_light_vehicles.csv\n- marea_parking_growth.csv\n- JSON Inputs\n- AutoCostGrowth\n- FwyLaneMiGrowth\n- ArtLaneMiGrowth\n- BusRevMiPCGrowth\n- RailRevMiPCGrowth\n- VmtCharge","code":""},{"path":"verpat.html","id":"model-parameters-2","chapter":"12 VERPAT Model Details","heading":"12.2.2.2 Model Parameters","text":"two ways specify model parameters. CSV Parameters specified *.csv file JSON Parameters model_parameters.json file. provided access model parameters, encouraged use default parameter values unless directed use alternatives. Editing modeling parameters based research pertaining local data sources may result unpredictable results.Model ParametersCSV Parameters\nmodel_accident_rates.csv\nmodel_fuel_prop_by_veh.csv\nmodel_fuel_composition_prop.csv\nmodel_fuel_co2.csv\nmodel_place_type_elasticities.csv\nmodel_place_type_relative_values.csv\nmodel_tdm_ridesharing.csv\nmodel_tdm_transit.csv\nmodel_tdm_transitlevels.csv\nmodel_tdm_vanpooling.csv\nmodel_tdm_workschedule.csv\nmodel_tdm_workschedulelevels.csv\nmodel_transportation_costs.csv\nmodel_veh_mpg_by_year.csv\nmodel_phev_range_prop_mpg_mpkwh.csv\nmodel_hev_prop_mpg.csv\nmodel_ev_range_prop_mpkwh.csv\nmodel_accident_rates.csvmodel_fuel_prop_by_veh.csvmodel_fuel_composition_prop.csvmodel_fuel_co2.csvmodel_place_type_elasticities.csvmodel_place_type_relative_values.csvmodel_tdm_ridesharing.csvmodel_tdm_transit.csvmodel_tdm_transitlevels.csvmodel_tdm_vanpooling.csvmodel_tdm_workschedule.csvmodel_tdm_workschedulelevels.csvmodel_transportation_costs.csvmodel_veh_mpg_by_year.csvmodel_phev_range_prop_mpg_mpkwh.csvmodel_hev_prop_mpg.csvmodel_ev_range_prop_mpkwh.csvJSON Parameters\nAnnVmtInflator\nBaseCostPerMile\nDvmtBudgetProp\nFuelCost\nKwhCost\nGasTax\nLtTruckProp\nTranRevMiAdjFactor\nTruckVmtGrowthMultiplier\nWorkVmtProp\nAnnVmtInflatorBaseCostPerMileDvmtBudgetPropFuelCostKwhCostGasTaxLtTruckPropTranRevMiAdjFactorTruckVmtGrowthMultiplierWorkVmtProp","code":""},{"path":"verpat.html","id":"input-files-to-change-1","chapter":"12 VERPAT Model Details","heading":"12.2.3 Input Files to Change","text":"user change input files described .","code":""},{"path":"verpat.html","id":"built-environment-1","chapter":"12 VERPAT Model Details","heading":"12.2.4 Built Environment","text":"","code":""},{"path":"verpat.html","id":"csv-inputs-5","chapter":"12 VERPAT Model Details","heading":"12.2.4.1 CSV Inputs","text":"","code":""},{"path":"verpat.html","id":"bzone_pop_emp_prop.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.4.2 bzone_pop_emp_prop.csv","text":"Population Jobs Place Type: file contains distribution population employment among 13 place types base future year. See explanation infomation regarding place types. column, year, must sum one (1). acceptable land use (.e. value 0) certain categories.yearly TAZ employment population totals summed 13 place type scaled total one employment population. allocation growth base future years population employment 13 place types captured rows containing future years. discussion population jobs place type input describes allocate existing land use 13 place types. similar approach can used allocate expected growth spatial planning resources TAZ Census Block Group level forecasts place types.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"demand-1","chapter":"12 VERPAT Model Details","heading":"12.2.5 Demand","text":"","code":""},{"path":"verpat.html","id":"csv-inputs-6","chapter":"12 VERPAT Model Details","heading":"12.2.5.1 CSV Inputs","text":"","code":""},{"path":"verpat.html","id":"region_trips_per_cap.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.2 region_trips_per_cap.csv","text":"Auto transit trips per capita: file contains regional averages auto transit trips per capita per day base year.Auto regional average auto trips per capita, including drive alone shared ride travel. data can derived National Household Travel Survey region local household travel survey regional travel demand forecasting model.Transit regional average transit trips per capita, including walk drive access transit. data can derived National Transit Database annual database contains “service” table annual transit trip data transit operator local household travel survey regional travel demand forecasting model.snapshot files:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_employment_by_naics.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.3 azone_employment_by_naics.csv","text":"Employment: file contains employment data counties make region. file derived County Business Pattern (CBP) data county. Industries categorized North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories :n1_4: 1- 4 employeesn5_9: 5-9 employeesn10_19: 10-19 employeesn20_99: 20-99 employeesn100_249: 100-249 employeesn250_499: 250-499 employeesn500_999: 500-999 employeesn1000: 1,000 Employee Size Classn1000_1: 1,000-1,499 employeesn1000_2: 1,500-2,499 employeesn1000_3: 2,500 4, 999 Employeesn1000_4: 5,000 employeesWhile county field required present, business synthesis process require meaningful value therefore users may simply enter ‘region’. consistency naming “region” maintained across files contains label “county” “Geo”. also necessary use detailed NAICS categories available; current business synthesis model subsequent models use level detail (although future versions model may) – minimum, number establishments employment types can provided size category. Regions significant employment industries government public administration covered CBP may need add records file cover type employment accurately match employment totals region. two additional fields contained file :emp: Total number employeesest: Total number establishmentsHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_hh_pop_by_age.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.4 azone_hh_pop_by_age.csv","text":"Household population: file contains population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusFuture year data must developed user; many regions population forecasts available regional state agencies /local academic sources. employment data inputs future data need county specific. Rather, regional totals age group can entered file value “region” entered county field.snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_gq_pop_by_age.csv-construction-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.5 azone_gq_pop_by_age.csv :construction:","text":"Group quarter population: file contains group quarters population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_hhsize_targets.csv-construction-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.6 azone_hhsize_targets.csv :construction:","text":"Household size (azone_hhsize_targets.csv): file contains household specific targets. contain two household specific attributes:AveHhSize: Average household size households (non-group quarters)Prop1PerHh: Proportion households (non-group quarters) one personHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_per_cap_inc.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.7 azone_per_cap_inc.csv","text":"Regional income: file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2000 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2000 column labels current year. example, data obtained year 2005 dollars column labels file shown become HHIncomePC.2005 GQIncomePC.2005.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_relative_employment.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.8 azone_relative_employment.csv","text":"Relative employment: file contains ratio workers persons age cohort model year vs. estimation data year. relative employment value age group, employment rate age group relative employment rate model estimation year data used adjust relative employment reflect changes relative employment years. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year vs. estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year vs. estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year vs. estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year vs. estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year vs. estimation data yearHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"region_truck_bus_vmt.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.9 region_truck_bus_vmt.csv","text":"Truck bus vmt: file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv #EDIT (marea_rev_miles_pc.csv?) user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"json-inputs-3","chapter":"12 VERPAT Model Details","heading":"12.2.5.10 JSON Inputs","text":"","code":""},{"path":"verpat.html","id":"baseltvehdvmt-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.11 BaseLtVehDvmt","text":"Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"basefwyartprop-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.12 BaseFwyArtProp","text":"Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"employmentgrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.5.13 EmploymentGrowth","text":"Employment Growth (EmploymentGrowth): variable represents growth rate employment region base year future year. rate 1 indicates changes overall employment, value 1 indicates growth (e.g., 1.5 = 50% growth) value less 1 indicates decline employment. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\": \"EmploymentGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\": \"double\",\n    \"UNITS\": \"multiplier\",\n    \"PROHIBIT\": \"\",\n    \"ISELEMENTOF\": \"\"\n}"},{"path":"verpat.html","id":"transport-supply-2","chapter":"12 VERPAT Model Details","heading":"12.2.6 Transport Supply","text":"","code":""},{"path":"verpat.html","id":"csv-inputs-7","chapter":"12 VERPAT Model Details","heading":"12.2.6.1 CSV Inputs","text":"","code":""},{"path":"verpat.html","id":"marea_lane_miles.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.6.2 marea_lane_miles.csv","text":"Road lane miles: file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"marea_rev_miles_pc.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.6.3 marea_rev_miles_pc.csv","text":"Transit revenue miles: file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"policy-1","chapter":"12 VERPAT Model Details","heading":"12.2.7 Policy","text":"","code":""},{"path":"verpat.html","id":"csv-inputs-8","chapter":"12 VERPAT Model Details","heading":"12.2.7.1 CSV Inputs","text":"","code":""},{"path":"verpat.html","id":"region_commute_options.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.2 region_commute_options.csv","text":"Percentage employees offered commute options: file contains assumptions availability participation work based travel demand management programs. policies ridesharing programs, transit pass programs, telecommuting alternative work schedule programs, vanpool programs. , user enters proportion workers participate (data items “Participation” suffix). one program, transit subsidy, user must also enter subsidy level dollars TransitSubsidyLevel data item.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"azone_its_prop.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.3 azone_its_prop.csv","text":"Percent road miles treatment: file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"region_light_vehicles.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.4 region_light_vehicles.csv","text":"Bicycling/light vehicles targets: file contains input data non-motorized vehicle model. VERPAT, non-motorized vehicles bicycles, also electric bicycles, segways, similar vehicles small, light-weight can travel bicycle speeds slightly higher. parameters follows:TargetProp: non-motorized vehicle ownership rate (average ratio non-motorized vehicles driver age population)Threshold: single-occupant vehicle (SOV) tour mileage threshold used SOV travel proportion model. upper limit tour lengths suitable reallocation non-motorized modes.PropSuitable: proportion SOV travel suitable non-motorized vehicle travel. variable describes proportion SOV tours within mileage threshold non-motorized vehicles might substituted. variable takes account factors weather trip purpose.non-motorized vehicle model predicts ownership use non-motorized vehicles (non-motorized vehicles bicycles, also electric bicycles, segways similar vehicles small, light-weight can travel bicycle speeds slightly higher bicycle speeds). core concept model non-motorized vehicle usage primarily substitute short-distance SOV travel. Therefore, model estimates proportion household vehicle travel occurs short-distance SOV tours. model determines maximum potential household VMT diverted non-motorized vehicles, also dependent availability non-motorized vehicles.\nNote bike share programs (BSP) serve increase availability non-motorized vehicles can taken account increasing TargetProp variable. Use national estimates non-motorized ownership regional estimates non-motorized ownership available (unless region notably atypical levels bicycle usage). See Bicycle Ownership United States analysis regional differences.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"marea_parking_growth.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.5 marea_parking_growth.csv","text":"Increase parking cost supply: file contains information allows effects policies workplace parking charges “cash-buy-back” programs tested. input parameters follows entered base future year:PropWorkParking: proportion employees park workPropWorkCharged: proportion employers charge parkingPropCashOut: proportion employment parking converted free pay “cash-buy-back” type programPropOtherCharged: proportion parking freeParkingCost.2000: average daily parking cost 2000 year USD. order use base year dollars just replace 2000 column labels base year. variable average daily parking cost incur fee park. paid parking varies across region, “PkgCost” value reflect average parking fees, weighted supply – parking Center City, average heavily weighted toward price Center City.snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"json-inputs-4","chapter":"12 VERPAT Model Details","heading":"12.2.7.6 JSON Inputs","text":"","code":""},{"path":"verpat.html","id":"autocostgrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.7 AutoCostGrowth","text":"% Increase Auto Operating Cost (AutoCostGrowth): parameter reflects proportional increase auto operating cost. can used test different assumptions future gas prices effects increased gas taxes. value 1.5 multiplies base year operating costs 1.5 thus reflects 50% increase. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"AutoCostGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"fwylanemigrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.8 FwyLaneMiGrowth","text":"FwyLaneMiGrowth: variable indicates percent increase supply freeways lane miles future year compared base year. default, transportation supply assumed grow line population increase; therefore value 1 indicates growth proportion population growth. value less 1 indicates less freeway lane mile supply, per person, future. value 1 indicates faster freeway expansion population growth. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\": \"FwyLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"artlanemigrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.9 ArtLaneMiGrowth","text":"ArtLaneMiGrowth: variable indicates percent increase supply arterial lane miles future year compared base year. similar value freeway except measures arterial lane mile growth. also proportional population growth. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"ArtLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"busrevmipcgrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.10 BusRevMiPCGrowth","text":"BusRevMiPCGrowth: percent increase transit revenue miles per capita bus. behaves similar way freeway rail values value 1 indicates per capita revenue miles stays constant. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"BusRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"railrevmipcgrowth-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.11 RailRevMiPCGrowth","text":"RailRevMiPCGrowth: percent increase transit revenue miles per capita rail. encompasses rail modes, light rail commuter rail. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"RailRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"vmtcharge-1","chapter":"12 VERPAT Model Details","heading":"12.2.7.12 VmtCharge","text":"Auto Operating Surcharge Per VMT (VmtCharge): cost cents per mile levied auto users form VMT charge. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"VmtCharge\",\n    \"VALUE\": \"0.05\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"model-parameters-3","chapter":"12 VERPAT Model Details","heading":"12.2.8 Model Parameters","text":"Users can modify parameters test alternative scenarios. e.g. users can use model_veh_mpg_by_year.csv test alternative vehicle development scenarios, improved technology /fuel economy standards lead higher fuel economies.","code":""},{"path":"verpat.html","id":"csv-inputs-9","chapter":"12 VERPAT Model Details","heading":"12.2.8.1 CSV Inputs","text":"","code":""},{"path":"verpat.html","id":"model_accident_rates.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.2 model_accident_rates.csv","text":"Accident Rates: Road safety impacts calculated factoring amount VMT. following national average rates, Fatality Analysis Reporting System General Estimates System (2009) US Department Transportation, applied calculate number fatal injury accidents value property damage:Fatal: 1.14 per 100 Million Miles TraveledInjury: 51.35 per 100 Million Miles TraveledProperty damage: 133.95 per 100 Million Miles TraveledHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_fuel_prop_by_veh.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.3 model_fuel_prop_by_veh.csv","text":"Vehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.PropDiesel: proportion fleet uses dieselPropCng: proportion fleet uses CNGPropGas: proportion fleet uses gasolineHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_fuel_composition_prop.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.4 model_fuel_composition_prop.csv","text":"Fuel composition: file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :GasPropEth: average ethanol proportion gasoline soldDieselPropBio: average biodiesel proportion diesel soldHere snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_fuel_co2.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.5 model_fuel_co2.csv","text":"Emission Rate: emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. file used convert fuel use CO2 equivalent emissions.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_place_type_elasticities.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.6 model_place_type_elasticities.csv","text":"file contains elasticities four performance metrics:VMT – Following estimate travel demand incorporates induced demand, adjustment made travel demand accounts changes growth place types used model describe urban form. changes interpreted changes design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix). effect travel demand determined changes VMT urban form categories, shown table . elasticities shown table multiplied D values place type. D values proportion values place type relative regional average, set 1.0.VehicleTrips – change number vehicle trips calculated using set elasticities Index 4D Values (2001) pivots current number vehicle trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.TransitTrips – change number transit trips calculated using set elasticities Index 4D Values (2001) pivots current number transit trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.Walking – elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. product elasticity D value applied place type growth quantities scenario calculated percentage increase decrease walking new residents region relative current place type distribution.snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_place_type_relative_values.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.7 model_place_type_relative_values.csv","text":"file contains D values, proportional values 13 place types (Bzones) relative regional average, five Ds used VERPAT - design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix).\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_ridesharing.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.8 model_tdm_ridesharing.csv","text":"Travel Demand Management: Ridesharing: ridesharing Travel Demand Management file contains parameters describing effectiveness ridesharing programs place type. proportion employees participating ridesharing program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. ridesharing sub-model computes anticipated level VMT reduction resulting implementation ridesharing, based place type household lives , using effectiveness values shown parameter file. Previous studies determined level ridesharing participation less rural suburban areas, compared -urban areas. Typically, people carpool urbanized areas due presence parking charges, potential difficulties finding parking, disincentives typically present urbanized areas.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_transit.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.9 model_tdm_transit.csv","text":"Travel Demand Management: Transit Fares: transit fare Travel Demand Management files parameters effectiveness (level VMT reduction) fare subsidy values employer. subsidized/discounted transit model begins evaluating level participation within region. Monte Carlo processes used identify households participate transit pass programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model allows selection one four potential subsidy levels (also policy inputs), influence level VMT reduction based level subsidy applied place type. anticipated level VMT reduction reduced account proportion work travel overall daily travel.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_transitlevels.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.10 model_tdm_transitlevels.csv","text":"Travel Demand Management: Transit Subsidy Levels: file contains dollar value match subsidy levels used model_tdm_transit.csv file.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_vanpooling.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.11 model_tdm_vanpooling.csv","text":"Travel Demand Management: Vanpooling: file contains parameters describing effectiveness terms VMT reductions vanpooling programs across three levels employee involvement.\nvanpool program sub-model operates evaluating likely level participation. Monte Carlo processes used identify households participate vanpool programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. employers participate program categorized three levels involvement low medium high. level involvement reflects extent employer actively facilitate promote vanpooling. example, low level involvement might represent employer organizes minimal number vanpools. high level involvement represent employer extensive vanpooling program cover large number employees. Based level involvement, reduction VMT estimated basis values file.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_workschedule.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.12 model_tdm_workschedule.csv","text":"Travel Demand Management: Work Schedule: file contains parameters describe effectiveness different participation levels three different telecommuting alternative work schedules.\ntelecommuting alternative work schedule model first evaluates likely level participation throughout region terms telecommuting alternatively-works schedules. Monte Carlo processes used identify households participate telecommuting programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model determines type programs might implemented. Three potential alternatives offered including:4/40 Schedule: 4 days per week 40 hours per week9/80 Schedule: working 4 days every week average 80 hours 2 weeksTelecommuting: Workers may work 1 2 days week remotelyOnce option identified level participation, estimated VMT determined basis parameters file.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_tdm_workschedulelevels.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.13 model_tdm_workschedulelevels.csv","text":"Travel Demand Management: Work Schedule Participation Levels: file describes proportion employees participating program corresponding participation levels used model_tdm_workschedule.csv file.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_transportation_costs.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.14 model_transportation_costs.csv","text":"Transportation Costs: file contains unit cost rates transportation infrastructure investments operating costs transit fare revenue. parameters used calculations transportation costs performance metrics.\nsource transit capital, operating costs, fare revenue NTD, particular National Transit Profile available NTDB website. Costs available variety index formats, e.g. cost per revenue mile hour; cost per passenger trip used VERPAT.\nsource highway infrastructure costs FHWA’s Highway Economic Requirements System model, . Information obtained Chapter 6 2005 Technical Report US states (FHWA, 2005). Table 8-1 provides unit costs (per lane mile) Rural Urban highway systems, distinguishes among three functional classes: interstates, freeways expressways; principal arterials; minor arterials collectors. Costs estimates provided following improvements:Reconstruction wideningReconstruct pavementResurface widen lanesResurface pavementImprove shouldersAdditional choices offered distinguish adding lane “normal” vs. “high cost”, also pavement realignment, also normal vs. high cost conditions. practical reasons, decided use “new construction” (also includes adding lanes) costs basis cost estimates, ignore categories reconstruction, resurfacing, realignment. construction costs include right way, construction, “small” allowance bridges support facilities.\ninfrastructure costs focus “urban” system, rural, also makes possible differentiate three size classes: Small Urban, Small Urbanized, Large Urbanized. numbers 2002 dollars; FHWA advises escalation current dollars using NHCCI, available online http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); report VERPAT escalates uses Index escalate 2010 values.\nparameter values file average values per lane mile, simplifying calculations highway costs just differentiate investments freeway vs. arterial functional class roads.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_veh_mpg_by_year.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.15 model_veh_mpg_by_year.csv","text":"Vehicle fuel economy (model_veh_mpg_by_year.csv): file contains estimates forecasts average fuel economy power economy miles per gallon autos, light trucks, heavy trucks (trucks) miles per kilowatt trains vehicle model year. Note fleet average year. average new vehicles sold year. fuel economy fuel types measured gasoline equivalent gallons (.e. energy content gallon gasoline). file used calculations fuel consumption.\nsnapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_phev_range_prop_mpg_mpkwh.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.16 model_phev_range_prop_mpg_mpkwh.csv","text":"Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_hev_prop_mpg.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.17 model_hev_prop_mpg.csv","text":"Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"model_ev_range_prop_mpkwh.csv-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.18 model_ev_range_prop_mpkwh.csv","text":"Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:Inputs Model Parameters Definitions","code":""},{"path":"verpat.html","id":"json-inputs-5","chapter":"12 VERPAT Model Details","heading":"12.2.8.19 JSON Inputs","text":"","code":""},{"path":"verpat.html","id":"annvmtinflator-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.20 AnnVmtInflator","text":"Annual VMT inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"basecostpermile-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.21 BaseCostPerMile","text":"Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"dvmtbudgetprop-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.22 DvmtBudgetProp","text":"Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"fuelcost-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.23 FuelCost","text":"Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"kwhcost-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.24 KwhCost","text":"Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"gastax-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.25 GasTax","text":"Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"lttruckprop-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.26 LtTruckProp","text":"Light Truck Proportions (LtTruckProp): proportion household vehicles light trucks (SUVs, pickup trucks) opposed autos. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"LtTruckProp\",\n    \"VALUE\": \"0.45\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"tranrevmiadjfactor-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.27 TranRevMiAdjFactor","text":"Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"truckvmtgrowthmultiplier-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.28 TruckVmtGrowthMultiplier","text":"Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:Inputs Model Parameters Definitions","code":"{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"workvmtprop-1","chapter":"12 VERPAT Model Details","heading":"12.2.8.29 WorkVmtProp","text":"Work VMT Proportion (WorkVmtProp): proportion household VMT takes place commute work purposes; used differentiate travel purposes use estimating overall VMT reductions targeted commute work. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"WorkVmtProp\",\n    \"VALUE\": \"0.25\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"modules-and-outputs-2","chapter":"12 VERPAT Model Details","heading":"12.3 Modules and Outputs","text":"VERPAT model compilation several packages, listed , inputs described respectively. inputs classified five categories:User input files: input files (model scenario specific) user recommended change.User input model parameters: input parameters (model scenario specific), defined model_parameters.json, user recommended change.Fixed input files: input parameters specific model fixed.Fixed input model parameters: input parameters specific model, defined model_parameters.json, fixed.Internal module inputs: inputs produced output modules.Top Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"createhouseholds","chapter":"12 VERPAT Model Details","heading":"12.3.1 CreateHouseholds","text":"module creates simulated households model using inputs population age group Azone year.","code":""},{"path":"verpat.html","id":"user-input-files-77","chapter":"12 VERPAT Model Details","heading":"12.3.1.1 User Input Files","text":"Household population (azone_hh_pop_by_age.csv): file contains population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:\n0-14\n15-19\n20-29\n30-54\n55-64\n65 Plus\nFuture year data must developed user; many regions population forecasts available regional state agencies /local academic sources. employment data inputs future data need county specific. Rather, regional totals age group can entered file value “region” entered county field.\nsnapshot file:\nGeo\nYear\nAge0to14\nAge15to19\nAge20to29\nAge30to54\nAge55to64\nAge65Plus\nMultnomah\n2005\n129869\n41133\n99664\n277854\n71658\n72648\nMultnomah\n2035\n169200\n48800\n144050\n327750\n116100\n162800\nHousehold population (azone_hh_pop_by_age.csv): file contains population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusFuture year data must developed user; many regions population forecasts available regional state agencies /local academic sources. employment data inputs future data need county specific. Rather, regional totals age group can entered file value “region” entered county field.snapshot file:Household size (azone_hhsize_targets.csv): file contains household specific targets. contain two household specific attributes:\nAveHhSize: Average household size households (non-group quarters)\nProp1PerHh: Proportion households (non-group quarters) one person\nsnapshot file:\nGeo\nYear\nAveHhSize\nProp1PerHh\nMultnomah\n2005\nNA\nNA\nMultnomah\n2035\nNA\nNA\nHousehold size (azone_hhsize_targets.csv): file contains household specific targets. contain two household specific attributes:AveHhSize: Average household size households (non-group quarters)Prop1PerHh: Proportion households (non-group quarters) one personHere snapshot file:Group quarter population (azone_gq_pop_by_age.csv): file contains group quarters population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:\n0-14\n15-19\n20-29\n30-54\n55-64\n65 Plus\nsnapshot file:\nGeo\nYear\nGrpAge0to14\nGrpAge15to19\nGrpAge20to29\nGrpAge30to54\nGrpAge55to64\nGrpAge65Plus\nMultnomah\n2005\n0\n0\n0\n1\n0\n0\nMultnomah\n2035\n0\n0\n0\n1\n0\n0\nGroup quarter population (azone_gq_pop_by_age.csv): file contains group quarters population estimates/forecasts county age cohort base future years. file format includes six age categories used population synthesis model:0-1415-1920-2930-5455-6465 PlusHere snapshot file:","code":""},{"path":"verpat.html","id":"module-outputs-77","chapter":"12 VERPAT Model Details","heading":"12.3.1.2 Module Outputs","text":"NumHh: Number households (non-group quarters)NumHh: Number households (non-group quarters)HhId: Unique household IDHhId: Unique household IDHhSize: Number personsHhSize: Number personsAge0to14: Persons 0 14 year old age groupAge0to14: Persons 0 14 year old age groupAge15to19: Persons 15 19 year old age groupAge15to19: Persons 15 19 year old age groupAge20to29: Persons 20 29 year old age groupAge20to29: Persons 20 29 year old age groupAge30to54: Persons 30 54 year old age groupAge30to54: Persons 30 54 year old age groupAge55to64: Persons 55 64 year old age groupAge55to64: Persons 55 64 year old age groupAge65Plus: Persons 65 older age groupAge65Plus: Persons 65 older age groupHhType: Coded household age composition (e.g. 2-1-0-2-0-0) Grp group quarters\nTop Definitions Inputs/OutputsHhType: Coded household age composition (e.g. 2-1-0-2-0-0) Grp group quartersTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"predictworkers","chapter":"12 VERPAT Model Details","heading":"12.3.2 PredictWorkers","text":"module assigns workers age households non-institutional group quarters population. simple model predicts workers function household type age composition. responsiveness jobs changes job market demographics might change worker age composition, user can exogenously adjust relative employment age group, Azone, year. values proportions persons age group workers relative proportions estimation year.","code":""},{"path":"verpat.html","id":"user-input-files-78","chapter":"12 VERPAT Model Details","heading":"12.3.2.1 User Input Files","text":"Relative employment (azone_relative_employment.csv): file contains ratio workers persons age cohort model year vs. estimation data year. file contains five age cohorts:\nRelEmp15to19: Ratio workers persons age 15 19 model year vs. estimation data year\nRelEmp20to29: Ratio workers persons age 20 29 model year vs. estimation data year\nRelEmp30to54: Ratio workers persons age 30 54 model year vs. estimation data year\nRelEmp55to64: Ratio workers persons age 55 64 model year vs. estimation data year\nRelEmp65Plus: Ratio workers persons age 65 older model year vs. estimation data year\nsnapshot file:\nGeo\nYear\nRelEmp15to19\nRelEmp20to29\nRelEmp30to54\nRelEmp55to64\nRelEmp65Plus\nMultnomah\n2005\n1\n1\n1\n1\n1\nMultnomah\n2035\n1\n1\n1\n1\n1\nRelative employment (azone_relative_employment.csv): file contains ratio workers persons age cohort model year vs. estimation data year. file contains five age cohorts:RelEmp15to19: Ratio workers persons age 15 19 model year vs. estimation data yearRelEmp20to29: Ratio workers persons age 20 29 model year vs. estimation data yearRelEmp30to54: Ratio workers persons age 30 54 model year vs. estimation data yearRelEmp55to64: Ratio workers persons age 55 64 model year vs. estimation data yearRelEmp65Plus: Ratio workers persons age 65 older model year vs. estimation data yearHere snapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-75","chapter":"12 VERPAT Model Details","heading":"12.3.2.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-78","chapter":"12 VERPAT Model Details","heading":"12.3.2.3 Module Outputs","text":"Wkr15to19: Workers 15 19 year old age groupWkr15to19: Workers 15 19 year old age groupWkr20to29: Workers 20 29 year old age groupWkr20to29: Workers 20 29 year old age groupWkr30to54: Workers 30 54 year old age groupWkr30to54: Workers 30 54 year old age groupWkr55to64: Workers 55 64 year old age groupWkr55to64: Workers 55 64 year old age groupWkr65Plus: Workers 65 older age groupWkr65Plus: Workers 65 older age groupWorkers: Total number workersWorkers: Total number workersNumWkr: Number workers residing zone\nTop Definitions Inputs/OutputsNumWkr: Number workers residing zoneTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"predictincome-1","chapter":"12 VERPAT Model Details","heading":"12.3.3 PredictIncome","text":"module predicts income simulated household given number workers age group average per capita income Azone household resides.","code":""},{"path":"verpat.html","id":"user-input-files-79","chapter":"12 VERPAT Model Details","heading":"12.3.3.1 User Input Files","text":"Regional income (azone_per_cap_inc.csv): file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2000 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2000 column labels current year. example, data obtained year 2005 dollars column labels file shown become HHIncomePC.2005 GQIncomePC.2005.\nsnapshot file:\nGeo\nYear\nHHIncomePC.2000\nGQIncomePC.2000\nMultnomah\n2005\n32515\n0\nMultnomah\n2035\n40000\n0\nRegional income (azone_per_cap_inc.csv): file contains information regional average per capita household (HHIncomePC) group quarters (GQIncomePC) income forecast year year 2000 dollars. data can obtained U.S. Department Commerce Bureau Economic Analysis current year regional state sources forecast years. order use current year dollars just replace 2000 column labels current year. example, data obtained year 2005 dollars column labels file shown become HHIncomePC.2005 GQIncomePC.2005.\nsnapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-76","chapter":"12 VERPAT Model Details","heading":"12.3.3.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-79","chapter":"12 VERPAT Model Details","heading":"12.3.3.3 Module Outputs","text":"Income: Total annual household (non-group & group quarters) income year 1999 dollars\nTop Definitions Inputs/OutputsIncome: Total annual household (non-group & group quarters) income year 1999 dollarsTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"createbasesyntheticfirms","chapter":"12 VERPAT Model Details","heading":"12.3.4 CreateBaseSyntheticFirms","text":"module creates set firms base year represents likely firm composition region, given County Business Pattern data firms size industry. firm described terms number employees industry.","code":""},{"path":"verpat.html","id":"user-input-files-80","chapter":"12 VERPAT Model Details","heading":"12.3.4.1 User Input Files","text":"Employment (azone_employment_by_naics.csv): file contains employment data counties make region. file derived County Business Pattern (CBP) data county. Industries categorized North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories :\nn1_4: 1- 4 employees\nn5_9: 5-9 employees\nn10_19: 10-19 employees\nn20_99: 20-99 employees\nn100_249: 100-249 employees\nn250_499: 250-499 employees\nn500_999: 500-999 employees\nn1000: 1,000 Employee Size Class\nn1000_1: 1,000-1,499 employees\nn1000_2: 1,500-2,499 employees\nn1000_3: 2,500 4, 999 Employees\nn1000_4: 5,000 employees\ncounty field required present, business synthesis process require meaningful value therefore users may simply enter ‘region’. consistency naming “region” maintained across files contains label “county” “Geo”. also necessary use detailed NAICS categories available; current business synthesis model subsequent models use level detail (although future versions model may) - minimum, number establishments employment types can provided size category. Regions significant employment industries government public administration covered CBP may need add records file cover type employment accurately match employment totals region. two additional fields contained file :\nemp: Total number employees\nest: Total number establishments\nsnapshot file:\ncounty\nyear\nnaics\nemp\nest\nn1_4\nn5_9\nn10_19\nn20_49\nn50_99\nn100_249\nn250_499\nn500_999\nn1000\nn1000_1\nn1000_2\nn1000_3\nn1000_4\nMultnomah\n2005\n113110\n0\n5\n2\n1\n0\n2\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n113310\n0\n3\n2\n0\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n114111\n0\n1\n0\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n114112\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n115114\n0\n1\n0\n0\n0\n0\n0\n0\n1\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n115210\n0\n4\n3\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n115310\n0\n5\n2\n0\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n212319\n0\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\n0\nMultnomah\n2005\n212321\n0\n4\n1\n1\n1\n1\n0\n0\n0\n0\n0\n0\n0\n0\n0\nEmployment (azone_employment_by_naics.csv): file contains employment data counties make region. file derived County Business Pattern (CBP) data county. Industries categorized North American Industrial Classification System (NAICS) 6 digit codes. Firm size categories :n1_4: 1- 4 employeesn5_9: 5-9 employeesn10_19: 10-19 employeesn20_99: 20-99 employeesn100_249: 100-249 employeesn250_499: 250-499 employeesn500_999: 500-999 employeesn1000: 1,000 Employee Size Classn1000_1: 1,000-1,499 employeesn1000_2: 1,500-2,499 employeesn1000_3: 2,500 4, 999 Employeesn1000_4: 5,000 employeesWhile county field required present, business synthesis process require meaningful value therefore users may simply enter ‘region’. consistency naming “region” maintained across files contains label “county” “Geo”. also necessary use detailed NAICS categories available; current business synthesis model subsequent models use level detail (although future versions model may) - minimum, number establishments employment types can provided size category. Regions significant employment industries government public administration covered CBP may need add records file cover type employment accurately match employment totals region. two additional fields contained file :emp: Total number employeesest: Total number establishmentsHere snapshot file:","code":""},{"path":"verpat.html","id":"module-outputs-80","chapter":"12 VERPAT Model Details","heading":"12.3.4.2 Module Outputs","text":"naics: six digit naics codenaics: six digit naics codeesizecat: employment size categoryesizecat: employment size categorynumbus: number businessesnumbus: number businessesemp: number employees business\nTop Definitions Inputs/Outputsemp: number employees businessTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"createfuturesyntheticfirms","chapter":"12 VERPAT Model Details","heading":"12.3.5 CreateFutureSyntheticFirms","text":"module creates set firms future year represents likely firm composition region, given County Business Pattern data firms size industry. firm described terms number employees industry.","code":""},{"path":"verpat.html","id":"user-input-parameters-4","chapter":"12 VERPAT Model Details","heading":"12.3.5.1 User Input Parameters","text":"Employment Growth (EmploymentGrowth): variable represents growth rate employment region base year future year. rate 1 indicates changes overall employment, value 1 indicates growth (e.g., 1.5 = 50% growth) value less 1 indicates decline employment. defined model_parameters.json follows:\n{\n    \"NAME\": \"EmploymentGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\": \"double\",\n    \"UNITS\": \"multiplier\",\n    \"PROHIBIT\": \"\",\n    \"ISELEMENTOF\": \"\"\n}Employment Growth (EmploymentGrowth): variable represents growth rate employment region base year future year. rate 1 indicates changes overall employment, value 1 indicates growth (e.g., 1.5 = 50% growth) value less 1 indicates decline employment. defined model_parameters.json follows:","code":"{\n    \"NAME\": \"EmploymentGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\": \"double\",\n    \"UNITS\": \"multiplier\",\n    \"PROHIBIT\": \"\",\n    \"ISELEMENTOF\": \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-77","chapter":"12 VERPAT Model Details","heading":"12.3.5.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-81","chapter":"12 VERPAT Model Details","heading":"12.3.5.3 Module Outputs","text":"naics: six digit naics codeesizecat: employment size categorynumbus: number businessesemp: number employees businessTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatebaseplacetypes","chapter":"12 VERPAT Model Details","heading":"12.3.6 CalculateBasePlaceTypes","text":"Population employment location characteristics important variables vehicle ownership, travel demand, accessibility models. four place types (urban core, Close-Community, suburban, rural five location categories (residential, commercial, mixed-use, transit-oriented development, Greenfield). module utilizes models households developed estimate location characteristics using National Household Travel Survey data base year. Firms currently allocated randomly fit employment allocation inputs since national datasets draw relationships.","code":""},{"path":"verpat.html","id":"user-input-files-81","chapter":"12 VERPAT Model Details","heading":"12.3.6.1 User Input Files","text":"Population Jobs Place Type (bzone_pop_emp_prop.csv): file contains distribution population employment among 13 place types base future year. column, year, must sum one (1). acceptable land use (.e. value 0) certain categories.\nyearly TAZ employment population totals summed 13 place type scaled total one employment population.\nsnapshot file:\nGeo\nYear\nPop\nEmp\nRur\n2005\n0.05\n0.1\nSub_R\n2005\n0.3\n0\nSub_E\n2005\n0\n0.2\nSub_M\n2005\n0.1\n0.1\nSub_T\n2005\n0\n0\nCIC_R\n2005\n0.15\n0\nCIC_E\n2005\n0\n0.2\nCIC_M\n2005\n0.1\n0.1\nCIC_T\n2005\n0\n0\nUC_R\n2005\n0.1\n0\nUC_E\n2005\n0\n0.1\nUC_M\n2005\n0.1\n0.1\nUC_T\n2005\n0.1\n0.1\nRur\n2035\n0.05\n0.1\nSub_R\n2035\n0.3\n0\nSub_E\n2035\n0\n0.2\nSub_M\n2035\n0.1\n0.1\nSub_T\n2035\n0\n0\nCIC_R\n2035\n0.15\n0\nCIC_E\n2035\n0\n0.2\nCIC_M\n2035\n0.1\n0.1\nCIC_T\n2035\n0\n0\nUC_R\n2035\n0.1\n0\nUC_E\n2035\n0\n0.1\nUC_M\n2035\n0.1\n0.1\nUC_T\n2035\n0.1\n0.1\nPopulation Jobs Place Type (bzone_pop_emp_prop.csv): file contains distribution population employment among 13 place types base future year. column, year, must sum one (1). acceptable land use (.e. value 0) certain categories.\nyearly TAZ employment population totals summed 13 place type scaled total one employment population.\nsnapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-78","chapter":"12 VERPAT Model Details","heading":"12.3.6.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-82","chapter":"12 VERPAT Model Details","heading":"12.3.6.3 Module Outputs","text":"outputs produced module base year.DrvLevels: number people household can drive classified three categories (“Drv1”, “Drv2”, “Drv3Plus”)HhPlaceTypes: place type assigned householdsEmpPlaceTypes: place types assigned businessesUrbanPop: Total population place typesUrbanEmp: Total employees place typesUrbanIncome: Total income place typesTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatefutureplacetypes","chapter":"12 VERPAT Model Details","heading":"12.3.7 CalculateFuturePlaceTypes","text":"module similar CalculateBasePlaceTypes module utilizes future year data assign population employment location characteristics.","code":""},{"path":"verpat.html","id":"user-input-files-82","chapter":"12 VERPAT Model Details","heading":"12.3.7.1 User Input Files","text":"Population Jobs Place Type (bzone_pop_emp_prop.csv): file used input CalculateBasePlaceTypes module.","code":""},{"path":"verpat.html","id":"internal-module-inputs-79","chapter":"12 VERPAT Model Details","heading":"12.3.7.2 Internal Module Inputs:","text":"","code":""},{"path":"verpat.html","id":"module-outputs-83","chapter":"12 VERPAT Model Details","heading":"12.3.7.3 Module Outputs","text":"outputs produced module future year.DrvLevels: number people household can drive classified three categories (“Drv1”, “Drv2”, “Drv3Plus”)HhPlaceTypes: place type assigned householdsEmpPlaceTypes: place types assigned businessesUrbanPop: Total population place typesUrbanEmp: Total employees place typesUrbanIncome: Total income place typesTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"createbaseaccessibility","chapter":"12 VERPAT Model Details","heading":"12.3.8 CreateBaseAccessibility","text":"module calculates freeway, arterial, public transit supply levels years using existing (base) data. number lane miles freeways arterials computed region based change inventories particular scenario. public transit, inputs specify change transit revenue miles relative base. Inputs area also specify revenue mile split electrified rail buses.","code":""},{"path":"verpat.html","id":"user-input-files-83","chapter":"12 VERPAT Model Details","heading":"12.3.8.1 User Input Files","text":"Road lane miles (marea_lane_miles.csv): file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:\nGeo\nYear\nFwyLaneMi\nArtLaneMi\nMultnomah\n2005\n250\n900\nMultnomah\n2035\n250\n900\nRoad lane miles (marea_lane_miles.csv): file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:Transit revenue miles (marea_rev_miles_pc.csv): file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:\nGeo\nYear\nBusRevMiPC\nRailRevMiPC\nMultnomah\n2005\n19\n4\nMultnomah\n2035\n19\n4\nTransit revenue miles (marea_rev_miles_pc.csv): file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-80","chapter":"12 VERPAT Model Details","heading":"12.3.8.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-84","chapter":"12 VERPAT Model Details","heading":"12.3.8.3 Module Outputs","text":"FwyLaneMiPC: Ratio urbanized area freeway expressway lane-miles urbanized area populationArtLaneMiPC: Ratio urbanized area arterial lane-miles urbanized area populationTranRevMiPC: Transit revenue miles per capita regionBusRevMi: Bus revenue miles regionRailRevMi: Rail revenue miles regionTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"createfutureaccessibility","chapter":"12 VERPAT Model Details","heading":"12.3.9 CreateFutureAccessibility","text":"module calculates freeway, arterial, public transit supply levels years using model estimation future data.","code":""},{"path":"verpat.html","id":"user-input-files-84","chapter":"12 VERPAT Model Details","heading":"12.3.9.1 User Input Files","text":"Road lane miles (marea_lane_miles.csv): file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:\nGeo\nYear\nFwyLaneMi\nArtLaneMi\nMultnomah\n2005\n250\n900\nMultnomah\n2035\n250\n900\nRoad lane miles (marea_lane_miles.csv): file contains amount transportation supply base year terms lane miles freeways arterial roadways region. base year data duplicated future year.\nFreeway Arterial total lane miles functional classes region. data can derived Federal Highway Administration’s (FHWA) Highway Statistics data.\nsnapshot file:Transit revenue miles (marea_rev_miles_pc.csv): file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:\nGeo\nYear\nBusRevMiPC\nRailRevMiPC\nMultnomah\n2005\n19\n4\nMultnomah\n2035\n19\n4\nTransit revenue miles (marea_rev_miles_pc.csv): file contains amount transportation supply base year terms revenue miles operating transit system region. base year data duplicated future year.\nBus Rail annual bus rail revenue miles per capita region. data can derived National Transit Database, annual database contains “service” table annual revenue mile data mode transit operator.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-5","chapter":"12 VERPAT Model Details","heading":"12.3.9.2 User Input Parameters","text":"FwyLaneMiGrowth: variable indicates percent increase supply freeways lane miles future year compared base year. default, transportation supply assumed grow line population increase; therefore value 1 indicates growth proportion population growth. value less 1 indicates less freeway lane mile supply, per person, future. value 1 indicates faster freeway expansion population growth. defined model_parameters.json follows:\n{\n    \"NAME\": \"FwyLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}FwyLaneMiGrowth: variable indicates percent increase supply freeways lane miles future year compared base year. default, transportation supply assumed grow line population increase; therefore value 1 indicates growth proportion population growth. value less 1 indicates less freeway lane mile supply, per person, future. value 1 indicates faster freeway expansion population growth. defined model_parameters.json follows:ArtLaneMiGrowth: variable indicates percent increase supply arterial lane miles future year compared base year. similar value freeway except measures arterial lane mile growth. also proportional population growth. defined model_parameters.json follows:\n{\n    \"NAME\" : \"ArtLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}ArtLaneMiGrowth: variable indicates percent increase supply arterial lane miles future year compared base year. similar value freeway except measures arterial lane mile growth. also proportional population growth. defined model_parameters.json follows:BusRevMiPCGrowth: percent increase transit revenue miles per capita bus. behaves similar way freeway rail values value 1 indicates per capita revenue miles stays constant. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BusRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}BusRevMiPCGrowth: percent increase transit revenue miles per capita bus. behaves similar way freeway rail values value 1 indicates per capita revenue miles stays constant. defined model_parameters.json follows:RailRevMiPCGrowth: percent increase transit revenue miles per capita rail. encompasses rail modes, light rail commuter rail. defined model_parameters.json follows:\n{\n    \"NAME\" : \"RailRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}RailRevMiPCGrowth: percent increase transit revenue miles per capita rail. encompasses rail modes, light rail commuter rail. defined model_parameters.json follows:","code":"{\n    \"NAME\": \"FwyLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"ArtLaneMiGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BusRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"RailRevMiPCGrowth\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-81","chapter":"12 VERPAT Model Details","heading":"12.3.9.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-85","chapter":"12 VERPAT Model Details","heading":"12.3.9.4 Module Outputs","text":"FwyLaneMiPCFuture: Ratio urbanized area freeway expressway lane-miles urbanized area population calculated using model estimation future dataArtLaneMiPCFuture: Ratio urbanized area arterial lane-miles urbanized area population calculated using model estimation future dataTranRevMiPCFuture: Transit revenue miles per capita region calculated using model estimation future dataBusRevMiFuture: Bus revenue miles region calculated using model estimation future dataRailRevMiFuture: Rail revenue miles region calculated using model estimation future dataTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"assignvehiclefeatures","chapter":"12 VERPAT Model Details","heading":"12.3.10 AssignVehicleFeatures","text":"module assigns household number vehicles likely based number persons driving age household, whether elderly persons live household, income household, population density household lives, freeway supply, transit supply, whether household located urban mixed-use area.","code":""},{"path":"verpat.html","id":"user-input-files-85","chapter":"12 VERPAT Model Details","heading":"12.3.10.1 User Input Files","text":"Vehicle fuel economy (model_veh_mpg_by_year.csv): file contains estimates forecasts average fuel economy power economy miles per gallon autos, light trucks, heavy trucks (trucks) miles per kilowatt trains vehicle model year. Note fleet average year. average new vehicles sold year. fuel economy fuel types measured gasoline equivalent gallons (.e., energy content gallon gasoline). file used calculations fuel consumption. file can used test alternative vehicle development scenarios, improved technology /fuel economy standards lead higher vehicle fuel economies.\nsnapshot file:\nModelYear\nAutoMpg\nLtTruckMpg\nTruckMpg\nBusMpg\nTrainMpg\n1975\n15.1\n12.7\n5.1\n4.2\n0.098266\n1976\n16.6\n13.2\n5.1\n4.1\n0.098266\n1977\n17.4\n14.1\n5.1\n4.1\n0.098266\n1978\n19.2\n13.7\n5.1\n4\n0.098266\n\n\n\n\n\n\n2046\n63.7\n41.1\n5.6\n4.8\n0.121191\n2047\n63.7\n41.1\n5.6\n4.8\n0.121191\n2048\n63.7\n41.1\n5.6\n4.8\n0.121191\n2049\n63.7\n41.1\n5.6\n4.8\n0.121191\n2050\n63.7\n41.1\n5.6\n4.8\n0.121191\nVehicle fuel economy (model_veh_mpg_by_year.csv): file contains estimates forecasts average fuel economy power economy miles per gallon autos, light trucks, heavy trucks (trucks) miles per kilowatt trains vehicle model year. Note fleet average year. average new vehicles sold year. fuel economy fuel types measured gasoline equivalent gallons (.e., energy content gallon gasoline). file used calculations fuel consumption. file can used test alternative vehicle development scenarios, improved technology /fuel economy standards lead higher vehicle fuel economies.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-6","chapter":"12 VERPAT Model Details","heading":"12.3.10.2 User Input Parameters","text":"Light Truck Proportions (LtTruckProp): proportion household vehicles light trucks (SUVs, pickup trucks) opposed autos. defined model_parameters.json follows:\n{\n    \"NAME\" : \"LtTruckProp\",\n    \"VALUE\": \"0.45\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light Truck Proportions (LtTruckProp): proportion household vehicles light trucks (SUVs, pickup trucks) opposed autos. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"LtTruckProp\",\n    \"VALUE\": \"0.45\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-82","chapter":"12 VERPAT Model Details","heading":"12.3.10.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-86","chapter":"12 VERPAT Model Details","heading":"12.3.10.4 Module Outputs","text":"VehId: Unique vehicle IDType: Vehicle body type: Auto = automobile, LtTrk = light trucks (.e. pickup, SUV, Van)Age: Vehicle age yearsMileage: Mileage vehicles (automobiles light truck)DvmtProp: Proportion average vehicle DVMTVehicles: Number automobiles light trucks owned leased householdNumLtTrk: Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAuto: Number automobiles (.e. 4-tire passenger vehicles light trucks) owned leased householdTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"assignvehiclefeaturesfuture","chapter":"12 VERPAT Model Details","heading":"12.3.11 AssignVehicleFeaturesFuture","text":"module similar AssignVehicleFeatures, uses model estimation future year data population transportation supply basis calculations.","code":""},{"path":"verpat.html","id":"internal-module-inputs-83","chapter":"12 VERPAT Model Details","heading":"12.3.11.1 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-87","chapter":"12 VERPAT Model Details","heading":"12.3.11.2 Module Outputs","text":"VehIdFuture: Unique vehicle IDVehIdFuture: Unique vehicle IDTypeFuture: Vehicle body type: Auto = automobile, LtTrk = light trucks (.e. pickup, SUV, Van)TypeFuture: Vehicle body type: Auto = automobile, LtTrk = light trucks (.e. pickup, SUV, Van)AgeFuture: Vehicle age yearsAgeFuture: Vehicle age yearsMileageFuture: Mileage vehicles (automobiles light truck)MileageFuture: Mileage vehicles (automobiles light truck)DvmtPropFuture: Proportion average vehicle DVMTDvmtPropFuture: Proportion average vehicle DVMTVehiclesFuture: Number automobiles light trucks owned leased householdVehiclesFuture: Number automobiles light trucks owned leased householdNumLtTrkFuture: Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumLtTrkFuture: Number light trucks (pickup, sport-utility vehicle, van) owned leased householdNumAutoFuture: Number automobiles (.e. 4-tire passenger vehicles light trucks) owned leased household\nTop](#contents) Definitions Inputs/OutputsNumAutoFuture: Number automobiles (.e. 4-tire passenger vehicles light trucks) owned leased householdTop](#contents) Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatetraveldemand","chapter":"12 VERPAT Model Details","heading":"12.3.12 CalculateTravelDemand","text":"module calculates average daily vehicle miles traveled, auto transit trips household modeled based household information determined previous modules base conditions. model sensitive household income, population density neighborhood household resides, number household vehicles, whether household owns vehicles, levels public transportation freeway supplies region, driving age population household, presence persons age 65, whether neighborhood characterized mixed-use development.\nalso calculates truck bus Vehicle Miles Traveled (VMT). Regional truck VMT calculated based changes regional household income. default, one--one relationship regional income growth truck VMT growth assumed. words, doubling total regional income result doubling truck VMT. Bus VMT calculated bus revenue miles factored total vehicle miles account miles driven non-revenue service.","code":""},{"path":"verpat.html","id":"user-input-files-86","chapter":"12 VERPAT Model Details","heading":"12.3.12.1 User Input Files","text":"Emission Rate (model_fuel_co2.csv): emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. Electricity optional fuel type displayed table. intensity power generation known can entered end row Fuel column containing word Electricity respective value next . file used convert fuel use CO2 equivalent emissions.\nsnapshot file:\nFuel\nIntensity\nULSD\n77.19\nBiodiesel\n76.81\nRFG\n75.65\nCARBOB\n75.65\nEthanol\n74.88\nCng\n62.14\nEmission Rate (model_fuel_co2.csv): emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. Electricity optional fuel type displayed table. intensity power generation known can entered end row Fuel column containing word Electricity respective value next . file used convert fuel use CO2 equivalent emissions.\nsnapshot file:Vehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.\nPropDiesel: proportion fleet uses diesel\nPropCng: proportion fleet uses CNG\nPropGas: proportion fleet uses gasoline\nsnapshot file:\nVehType\nPropDiesel\nPropCng\nPropGas\nAuto\n0.007\n0\n0.993\nLtTruck\n0.04\n0\n0.96\nBus\n0.995\n0.005\n0\nTruck\n0.945\n0.005\n0.05\nVehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.PropDiesel: proportion fleet uses dieselPropCng: proportion fleet uses CNGPropGas: proportion fleet uses gasolineHere snapshot file:Fuel composition (model_fuel_composition_prop.csv): file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :\nGasPropEth: average ethanol proportion gasoline sold\nDieselPropBio: average biodiesel proportion diesel sold\nsnapshot file:\nVehType\nGasPropEth\nDieselPropBio\nAuto\n0.1\n0.05\nLtTruck\n0.1\n0.05\nBus\n0.1\n0.05\nTruck\n0.1\n0.01\nFuel composition (model_fuel_composition_prop.csv): file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :GasPropEth: average ethanol proportion gasoline soldDieselPropBio: average biodiesel proportion diesel soldHere snapshot file:Truck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:\nType\nPropVmt\nFwy\nArt\n\nBusVmt\n0\n0.15\n0.591854\n0.258146\nTruckVmt\n0.08\n0.452028\n0.398645\n0.149327\nTruck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:\nModelYear\nAutoPhevRange\nAutoPropPhev\nAutoMpkwh\nAutoMpg\nLtTruckPhevRange\nLtTruckPropPhev\nLtTruckMpkwh\nLtTruckMpg\n1975\n0\n0\n0\n0\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n2045\n40\n0.66\n4.375\n74.5\n40\n0.586666667\n2.875\n58.2\n2046\n40\n0.708\n4.4\n74.9\n40\n0.629333333\n2.9\n58.5\n2047\n40\n0.756\n4.425\n75.3\n40\n0.672\n2.925\n58.8\n2048\n40\n0.816\n4.45\n75.6\n40\n0.725333333\n2.95\n59.1\n2049\n40\n0.864\n4.475\n76\n40\n0.768\n2.975\n59.3\n2050\n40\n0.9\n4.5\n76.4\n40\n\n\n\nPlugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:\nModelYear\nAutoPropHev\nAutoHevMpg\nLtTruckPropHev\nLtTruckHevMpg\n1975\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n1980\n0\n0\n0\n0\n\n\n\n\n\n2046\n0.981481481\n74.2\n0.736111111\n55.4\n2047\n0.981481481\n74.5\n0.736111111\n55.6\n2048\n1\n74.9\n0.75\n55.9\n2049\n1\n75.2\n0.75\n56.1\n2050\n1\n75.5\n0.75\n56.3\nHybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:\nModelYear\nAutoRange\nAutoPropEv\nAutoMpkwh\nLtTruckRange\nLtTruckPropEv\nLtTruckMpkwh\n1975\n0\n0\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n2046\n277.5\n0.72\n4.4\n185\n0.56\n2.9\n2047\n283.125\n0.75\n4.425\n188.75\n0.583333333\n2.925\n2048\n288.75\n0.795\n4.45\n192.5\n0.618333333\n2.95\n2049\n294.375\n0.855\n4.475\n196.25\n0.665\n2.975\n2050\n300\n0.9\n4.5\n200\n0.7\n3\nElectric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-7","chapter":"12 VERPAT Model Details","heading":"12.3.12.2 User Input Parameters","text":"Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:\n{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:Annual vmt inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:\n{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Annual vmt inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:\n{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:\n{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:\n{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:\n{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"fixed-input-parameters","chapter":"12 VERPAT Model Details","heading":"12.3.12.3 Fixed Input Parameters","text":"Carbon cost (CarbonCost): Average cost green house gas emissions. defined model_parameters.json follows:\n{\n    \"NAME\" : \"CarbonCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Carbon cost (CarbonCost): Average cost green house gas emissions. defined model_parameters.json follows:Vmt cost (VmtCost): Average cost vehicle miles traveled. defined model_parameters.json follows:\n{\n    \"NAME\" : \"VmtCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Vmt cost (VmtCost): Average cost vehicle miles traveled. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"CarbonCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"VmtCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-84","chapter":"12 VERPAT Model Details","heading":"12.3.12.4 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-88","chapter":"12 VERPAT Model Details","heading":"12.3.12.5 Module Outputs","text":"TruckDvmt: Average daily vehicle miles traveled trucksDvmt (bzones): Average daily vehicle miles traveled place typesDvmt (households): Average daily vehicle miles traveled householdDvmt (vehicles): Average daily vehicle miles traveled vehicleEvDvmt (bzones): Average daily electric vehicle miles traveled place typesEvDvmt (vehicles): Average daily electric vehicle miles traveled vehicleHcDvmt (bzones): Average daily vehicle (ICE) miles traveled place typesHcDvmt (vehicles): Average daily vehicle (ICE) miles traveled vehicleFuelGallons: Average daily fuel consumption gallons householdFuelCo2e: Average daily Co2 equivalent greenhouse gas emissions household due traditional fuel consumptionElecKwh: Average daily power consumption kilowatt-hours householdElecCo2e: Average daily Co2 equivalent greenhouse gas emissions household due power consumptionMpKwh: Power efficiency electric vehicles vehiclePowertrain: Powertrain vehicle.DailyParkingCost: Average daily parking cost householdFutureCostPerMile: Total cost per mile future year householdTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatetraveldemandfuture","chapter":"12 VERPAT Model Details","heading":"12.3.13 CalculateTravelDemandFuture","text":"module similar CalculateTravelDemand module uses future year (estimated) data transportation supply vehicles like number vehicles, mileage, type, etc.","code":""},{"path":"verpat.html","id":"user-input-files-87","chapter":"12 VERPAT Model Details","heading":"12.3.13.1 User Input Files","text":"Emission Rate (model_fuel_co2.csv): emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. file used convert fuel use CO2 equivalent emissions.\nsnapshot file:\nFuel\nIntensity\nULSD\n77.19\nBiodiesel\n76.81\nRFG\n75.65\nCARBOB\n75.65\nEthanol\n74.88\nCng\n62.14\nEmission Rate (model_fuel_co2.csv): emissions rate file contains information “pump--wheels” CO2 equivalent emissions fuel type grams per mega Joule fuel energy content. one row fuel type: ULSD, biodiesel, RFG (reformulated gasoline), CARBOB (gasoline formulated blended ethanol), ethanol, CNG. file used convert fuel use CO2 equivalent emissions.\nsnapshot file:Vehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.\nPropDiesel: proportion fleet uses diesel\nPropCng: proportion fleet uses CNG\nPropGas: proportion fleet uses gasoline\nsnapshot file:\nVehType\nPropDiesel\nPropCng\nPropGas\nAuto\n0.007\n0\n0.993\nLtTruck\n0.04\n0\n0.96\nBus\n0.995\n0.005\n0\nTruck\n0.945\n0.005\n0.05\nVehicle VMT proportion fuel (model_fuel_prop_by_veh.csv): file contains allocation VMT four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck) different fuel types (Diesel, CNG, Gasoline). file used calculations fuel consumption. file can used test alternative fuel scenarios varying shares non-gasoline fuels.PropDiesel: proportion fleet uses dieselPropCng: proportion fleet uses CNGPropGas: proportion fleet uses gasolineHere snapshot file:Fuel composition (model_fuel_composition_prop.csv): file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :\nGasPropEth: average ethanol proportion gasoline sold\nDieselPropBio: average biodiesel proportion diesel sold\nsnapshot file:\nVehType\nGasPropEth\nDieselPropBio\nAuto\n0.1\n0.05\nLtTruck\n0.1\n0.05\nBus\n0.1\n0.05\nTruck\n0.1\n0.01\nFuel composition (model_fuel_composition_prop.csv): file contains composition fuel used four road vehicle types VERPAT represents (auto, light truck, bus, heavy truck). file also used calculations fuel consumption along aforementioned file. column labels file :GasPropEth: average ethanol proportion gasoline soldDieselPropBio: average biodiesel proportion diesel soldHere snapshot file:Truck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:\nType\nPropVmt\nFwy\nArt\n\nBusVmt\n0\n0.15\n0.591854\n0.258146\nTruckVmt\n0.08\n0.452028\n0.398645\n0.149327\nTruck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:Plugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:\nModelYear\nAutoPhevRange\nAutoPropPhev\nAutoMpkwh\nAutoMpg\nLtTruckPhevRange\nLtTruckPropPhev\nLtTruckMpkwh\nLtTruckMpg\n1975\n0\n0\n0\n0\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n\n\n2045\n40\n0.66\n4.375\n74.5\n40\n0.586666667\n2.875\n58.2\n2046\n40\n0.708\n4.4\n74.9\n40\n0.629333333\n2.9\n58.5\n2047\n40\n0.756\n4.425\n75.3\n40\n0.672\n2.925\n58.8\n2048\n40\n0.816\n4.45\n75.6\n40\n0.725333333\n2.95\n59.1\n2049\n40\n0.864\n4.475\n76\n40\n0.768\n2.975\n59.3\n2050\n40\n0.9\n4.5\n76.4\n40\n\n\n\nPlugin hybrid electric vehicles characteristics (model_phev_range_prop_mpg_mpkwh.csv): file contains estimates forecasts range, fuel efficiency (mpg), power efficiency (mpkwh), proportions automobiles light trucks plugin hybrid electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification plugin hybrid electric electric vehicles. snapshot file:Hybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:\nModelYear\nAutoPropHev\nAutoHevMpg\nLtTruckPropHev\nLtTruckHevMpg\n1975\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n1980\n0\n0\n0\n0\n\n\n\n\n\n2046\n0.981481481\n74.2\n0.736111111\n55.4\n2047\n0.981481481\n74.5\n0.736111111\n55.6\n2048\n1\n74.9\n0.75\n55.9\n2049\n1\n75.2\n0.75\n56.1\n2050\n1\n75.5\n0.75\n56.3\nHybrid electric vehicles characteristics (model_hev_prop_mpg.csv): file contains estimates forecasts fuel efficiency (mpg), proportions automobiles light trucks hybrid electric vehicles (neither plugin hybrid electric vehicle) vehicle model year. Note fleet average year. average new vehicles sold year. file used identification hybrid electric plugin hybrid electric vehicles. snapshot file:Electric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:\nModelYear\nAutoRange\nAutoPropEv\nAutoMpkwh\nLtTruckRange\nLtTruckPropEv\nLtTruckMpkwh\n1975\n0\n0\n0\n0\n0\n0\n1976\n0\n0\n0\n0\n0\n0\n1977\n0\n0\n0\n0\n0\n0\n1978\n0\n0\n0\n0\n0\n0\n1979\n0\n0\n0\n0\n0\n0\n\n\n\n\n\n\n\n2046\n277.5\n0.72\n4.4\n185\n0.56\n2.9\n2047\n283.125\n0.75\n4.425\n188.75\n0.583333333\n2.925\n2048\n288.75\n0.795\n4.45\n192.5\n0.618333333\n2.95\n2049\n294.375\n0.855\n4.475\n196.25\n0.665\n2.975\n2050\n300\n0.9\n4.5\n200\n0.7\n3\nElectric vehicles characteristics (model_ev_range_prop_mpkwh.csv): file contains estimates forecasts range, power efficiency (mpkwh), proportions automobiles light trucks electric vehicles vehicle model year. Note fleet average year. average new vehicles sold year. file used identification electric vehicles. snapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-8","chapter":"12 VERPAT Model Details","heading":"12.3.13.2 User Input Parameters","text":"Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Base cost per mile (BaseCostPerMile): Base cost per mile dollars transportation costs used travel demand model initially represent travel close unconstrained transportation costs. transportation costs fully constrained later model travel reductions caused budget constraints estimated. defined model_parameters.json follows:Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:\n{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt budget proportion (DvmtBudgetProp): proportion household budget can allocated transportation spending. travel demand models includes constraint reduces household travel high proportion household spending spent transportation. defined model_parameters.json follows:Annual vmt inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:\n{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Annual vmt inflator (AnnVmtInflator): Factor convert VMT annual average daily amounts. defined model_parameters.json follows:Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:\n{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Fuel cost (FuelCost): Average cost per gallon fuel (taxes added). defined model_parameters.json follows:Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:\n{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Power cost (KwhCost): Average cost per kwh power consumption (taxes added). defined model_parameters.json follows:Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:\n{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Gas tax (GasTax): Average cost per gallon fuel gas taxes. defined model_parameters.json follows:Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:\n{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Truck vmt growth multiplier (TruckVmtGrowthMultiplier): Rate heavy truck VMT growth relation total regional household income growth region. value 1 indicates heavy truck VMT grows rate total regional household income. value less 1 means slower growth truck VMT, greater 1 means faster growth truck VMT total regional household income. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseCostPerMile\",\n    \"VALUE\": \"0.04\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"DvmtBudgetProp\",\n    \"VALUE\": \"0.1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"AnnVmtInflator\",\n    \"VALUE\": \"365\",\n    \"TYPE\" : \"integer\",\n    \"UNITS\" : \"DAYS\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"FuelCost\",\n    \"VALUE\": \"1.82\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"KwhCost\",\n    \"VALUE\": \"0.257\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/KWH\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"GasTax\",\n    \"VALUE\": \"0.424\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"TruckVmtGrowthMultiplier\",\n    \"VALUE\": \"1\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"fixed-input-parameters-1","chapter":"12 VERPAT Model Details","heading":"12.3.13.3 Fixed Input Parameters","text":"Carbon cost (CarbonCost): Average cost green house gas emissions. defined model_parameters.json follows:\n{\n    \"NAME\" : \"CarbonCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Carbon cost (CarbonCost): Average cost green house gas emissions. defined model_parameters.json follows:Vmt cost (VmtCost): Average cost vehicle miles traveled. defined model_parameters.json follows:\n{\n    \"NAME\" : \"VmtCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Vmt cost (VmtCost): Average cost vehicle miles traveled. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"CarbonCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"VmtCost\",\n    \"VALUE\": \"0\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/GAL\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-85","chapter":"12 VERPAT Model Details","heading":"12.3.13.4 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-89","chapter":"12 VERPAT Model Details","heading":"12.3.13.5 Module Outputs","text":"TruckDvmtFuture: Average daily vehicle miles traveled trucks estimated using model estimations future year dataTruckDvmtFuture: Average daily vehicle miles traveled trucks estimated using model estimations future year dataDvmtFuture (bzones): Average daily vehicle miles traveled place types estimated using model estimations future year dataDvmtFuture (bzones): Average daily vehicle miles traveled place types estimated using model estimations future year dataDvmtFuture (households): Average daily vehicle miles traveled household estimated using model estimations future year dataDvmtFuture (households): Average daily vehicle miles traveled household estimated using model estimations future year dataDvmtFuture (vehicles): Average daily vehicle miles traveled vehicle estimated using model estimations future year dataDvmtFuture (vehicles): Average daily vehicle miles traveled vehicle estimated using model estimations future year dataEvDvmtFuture (bzones): Average daily electric vehicle miles traveled place types estimated using model estimations future year dataEvDvmtFuture (bzones): Average daily electric vehicle miles traveled place types estimated using model estimations future year dataEvDvmtFuture (vehicles): Average daily electric vehicle miles traveled vehicle estimated using model estimations future year dataEvDvmtFuture (vehicles): Average daily electric vehicle miles traveled vehicle estimated using model estimations future year dataHcDvmtFuture (bzones): Average daily vehicle (ICE) miles traveled place types estimated using model estimations future year dataHcDvmtFuture (bzones): Average daily vehicle (ICE) miles traveled place types estimated using model estimations future year dataHcDvmtFuture (vehicles): Average daily vehicle (ICE) miles traveled vehicle estimated using model estimations future year dataHcDvmtFuture (vehicles): Average daily vehicle (ICE) miles traveled vehicle estimated using model estimations future year dataFuelGallonsFuture: Average daily fuel consumption gallons household estimated using model estimations future year dataFuelGallonsFuture: Average daily fuel consumption gallons household estimated using model estimations future year dataFuelCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions household due traditional fuel consumption estimated using model estimations future year dataFuelCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions household due traditional fuel consumption estimated using model estimations future year dataElecKwhFuture: Average daily power consumption kilowatt-hours household estimated using model estimations future year dataElecKwhFuture: Average daily power consumption kilowatt-hours household estimated using model estimations future year dataElecCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions household due power consumption estimated using model estimations future year dataElecCo2eFuture: Average daily Co2 equivalent greenhouse gas emissions household due power consumption estimated using model estimations future year dataMpKwhFuture: Power efficiency electric vehicles vehicle estimated using model estimations future year dataMpKwhFuture: Power efficiency electric vehicles vehicle estimated using model estimations future year dataPowertrainFuture: Powertrain vehicle estimated using model estimations future year dataPowertrainFuture: Powertrain vehicle estimated using model estimations future year dataDailyParkingCostFuture: Average daily parking cost household estimated using model estimations future year dataDailyParkingCostFuture: Average daily parking cost household estimated using model estimations future year dataFutureCostPerMileFuture: Total cost per mile future year household estimated using model estimations future year data\nTop](#contents) Definitions Inputs/OutputsFutureCostPerMileFuture: Total cost per mile future year household estimated using model estimations future year dataTop](#contents) Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatecongestionbase","chapter":"12 VERPAT Model Details","heading":"12.3.14 CalculateCongestionBase","text":"module calculates amount congestion using estimated data. Auto, light truck VMT, truck VMT bus VMT allocated freeways, arterials, roadways. Truck bus VMT allocated based mode-specific data, auto light truck VMT allocated based combination factors model sensitive relative supplies freeway arterial lane miles. System-wide ratios VMT lane miles freeways arterials used allocate VMT congestion levels using congestion levels defined Texas Transportation Institute Urban Mobility Report. freeway arterial congestion level associated average trip speed conditions include treatment incident management roadway. Overall average speeds congestion level calculated based input assumptions degree incident management. Speed vs. fuel efficiency relationships light vehicles, trucks, buses used adjust fleet fuel efficiency averages computed region.","code":""},{"path":"verpat.html","id":"user-input-files-88","chapter":"12 VERPAT Model Details","heading":"12.3.14.1 User Input Files","text":"Percent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:\nGeo\nYear\n\nMultnomah\n2005\n0\nMultnomah\n2035\n0\nPercent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:Truck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:\nType\nPropVmt\nFwy\nArt\n\nBusVmt\n0\n0.15\n0.591854\n0.258146\nTruckVmt\n0.08\n0.452028\n0.398645\n0.149327\nTruck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-9","chapter":"12 VERPAT Model Details","heading":"12.3.14.2 User Input Parameters","text":"Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:\n{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-86","chapter":"12 VERPAT Model Details","heading":"12.3.14.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-90","chapter":"12 VERPAT Model Details","heading":"12.3.14.4 Module Outputs","text":"LtVehDvmt: Daily vehicle miles travelled light vehicles regionLtVehDvmt: Daily vehicle miles travelled light vehicles regionBusDvmt: Daily vehicle miles travelled bus regionBusDvmt: Daily vehicle miles travelled bus regionMpgAdjLtVeh: Average fuel efficiency adjustment light vehicles regionMpgAdjLtVeh: Average fuel efficiency adjustment light vehicles regionMpgAdjBus: Average fuel efficiency adjustment buses regionMpgAdjBus: Average fuel efficiency adjustment buses regionMpgAdjTruck: Average fuel efficiency adjustment heavy trucks regionMpgAdjTruck: Average fuel efficiency adjustment heavy trucks regionMpKwhAdjLtVehEv: Average power efficiency adjustment electric light vehicles regionMpKwhAdjLtVehEv: Average power efficiency adjustment electric light vehicles regionMpKwhAdjLtVehHev: Average power efficiency adjustment hybrid electric light vehicles regionMpKwhAdjLtVehHev: Average power efficiency adjustment hybrid electric light vehicles regionMpKwhAdjBus: Average power efficiency adjustment buses regionMpKwhAdjBus: Average power efficiency adjustment buses regionMpKwhAdjTruck: Average power efficiency adjustment heavy trucks regionMpKwhAdjTruck: Average power efficiency adjustment heavy trucks regionVehHrLtVeh: Total vehicle travel time light vehicles regionVehHrLtVeh: Total vehicle travel time light vehicles regionVehHrBus: Total vehicle travel time buses regionVehHrBus: Total vehicle travel time buses regionVehHrTruck: Total vehicle travel time heavy trucks regionVehHrTruck: Total vehicle travel time heavy trucks regionAveSpeedLtVeh: Average speed light vehicles regionAveSpeedLtVeh: Average speed light vehicles regionAveSpeedBus: Average speed buses regionAveSpeedBus: Average speed buses regionAveSpeedTruck: Average speed heavy trucks regionAveSpeedTruck: Average speed heavy trucks regionFfVehHrLtVeh: Average free-flow travel time light vehicles regionFfVehHrLtVeh: Average free-flow travel time light vehicles regionFfVehHrBus: Average free-flow travel time buses regionFfVehHrBus: Average free-flow travel time buses regionFfVehHrTruck: Average free-flow travel time heavy trucks regionFfVehHrTruck: Average free-flow travel time heavy trucks regionDelayVehHrLtVeh: Total vehicle delay time light vehicles regionDelayVehHrLtVeh: Total vehicle delay time light vehicles regionDelayVehHrBus: Total vehicle delay time buses regionDelayVehHrBus: Total vehicle delay time buses regionDelayVehHrTruck: Total vehicle delay time heavy trucks regionDelayVehHrTruck: Total vehicle delay time heavy trucks regionMpgAdjHh: Average fuel efficiency adjustment households regionMpgAdjHh: Average fuel efficiency adjustment households regionMpKwhAdjEvHh: Average power efficiency adjustment electric vehicles households regionMpKwhAdjEvHh: Average power efficiency adjustment electric vehicles households regionMpKwhAdjHevHh: Average power efficiency adjustment hybrid electric vehicles households regionMpKwhAdjHevHh: Average power efficiency adjustment hybrid electric vehicles households regionLtVehDvmtFactor: Light vehicle Dvmt factor adjustment factor\nTop](#contents) Definitions Inputs/OutputsLtVehDvmtFactor: Light vehicle Dvmt factor adjustment factorTop](#contents) Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatecongestionfuture","chapter":"12 VERPAT Model Details","heading":"12.3.15 CalculateCongestionFuture","text":"module similar CalculateCongestionBase module uses model estimation future transportation supply basis calculations.","code":""},{"path":"verpat.html","id":"user-input-files-89","chapter":"12 VERPAT Model Details","heading":"12.3.15.1 User Input Files","text":"Percent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:\nGeo\nYear\n\nMultnomah\n2005\n0\nMultnomah\n2035\n0\nPercent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:Truck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:\nType\nPropVmt\nFwy\nArt\n\nBusVmt\n0\n0.15\n0.591854\n0.258146\nTruckVmt\n0.08\n0.452028\n0.398645\n0.149327\nTruck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-10","chapter":"12 VERPAT Model Details","heading":"12.3.15.2 User Input Parameters","text":"Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:\n{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-87","chapter":"12 VERPAT Model Details","heading":"12.3.15.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-91","chapter":"12 VERPAT Model Details","heading":"12.3.15.4 Module Outputs","text":"LtVehDvmtFuture: Daily vehicle miles travelled light vehicles region calculated using model estimation future dataBusDvmtFuture: Daily vehicle miles travelled bus region calculated using model estimation future dataMpgAdjLtVehFuture: Average fuel efficiency adjustment light vehicles region calculated using model estimation future dataMpgAdjBusFuture: Average fuel efficiency adjustment buses region calculated using model estimation future dataMpgAdjTruckFuture: Average fuel efficiency adjustment heavy trucks region calculated using model estimation future dataVehHrLtVehFuture: Total vehicle travel time light vehicles region calculated using model estimation future dataVehHrBusFuture: Total vehicle travel time buses region calculated using model estimation future dataVehHrTruckFuture: Total vehicle travel time heavy trucks region calculated using model estimation future dataAveSpeedLtVehFuture: Average speed light vehicles region calculated using model estimation future dataAveSpeedBusFuture: Average speed buses region calculated using model estimation future dataAveSpeedTruckFuture: Average speed heavy trucks region calculated using model estimation future dataFfVehHrLtVehFuture: Average free-flow travel time light vehicles region calculated using model estimation future dataFfVehHrBusFuture: Average free-flow travel time buses region calculated using model estimation future dataFfVehHrTruckFuture: Average free-flow travel time heavy trucks region calculated using model estimation future dataDelayVehHrLtVehFuture: Total vehicle delay time light vehicles region calculated using model estimation future dataDelayVehHrBusFuture: Total vehicle delay time buses region calculated using model estimation future dataDelayVehHrTruckFuture: Total vehicle delay time heavy trucks region calculated using model estimation future dataMpgAdjHhFuture: Average fuel efficiency adjustment households region calculated using model estimation future dataLtVehDvmtFactorFuture: Light vehicle Dvmt factor adjustment factor calculated using model estimation future dataTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculateinduceddemand","chapter":"12 VERPAT Model Details","heading":"12.3.16 CalculateInducedDemand","text":"Induced demand calculated changes roadway supply near term function speed, based potential mode route shifts produce changes VMT longer term include changes vehicle ownership, still function speed. model include induced demand result changes growth may occur part smart growth scenario evidence limited empirical evidence.","code":""},{"path":"verpat.html","id":"user-input-files-90","chapter":"12 VERPAT Model Details","heading":"12.3.16.1 User Input Files","text":"Auto transit trips per capita (region_trips_per_cap.csv): file contains regional averages auto transit trips per day base year.\nAuto regional average auto trips per capita, including drive alone shared ride travel. data can derived National Household Travel Survey region local household travel survey regional travel demand forecasting model.\nTransit regional average transit trips per capita, including walk drive access transit. data can derived National Transit Database annual database contains “service” table annual transit trip data transit operator local household travel survey regional travel demand forecasting model.\nsnapshot files:\nMode\nTrips\nAuto\n3.2\nTransit\n0.4\nAuto transit trips per capita (region_trips_per_cap.csv): file contains regional averages auto transit trips per day base year.Auto regional average auto trips per capita, including drive alone shared ride travel. data can derived National Household Travel Survey region local household travel survey regional travel demand forecasting model.Transit regional average transit trips per capita, including walk drive access transit. data can derived National Transit Database annual database contains “service” table annual transit trip data transit operator local household travel survey regional travel demand forecasting model.snapshot files:Place type adjustments travel demand (model_place_type_elasticities.csv): file contains elasticities four performance metrics:\nVMT – Following estimate travel demand incorporates induced demand, adjustment made travel demand accounts changes growth place types used model describe urban form. changes interpreted changes design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix). effect travel demand determined changes VMT urban form categories, shown table . elasticities shown table multiplied D values place type. D values proportion values place type relative regional average, set 1.0.\nVehicleTrips – change number vehicle trips calculated using set elasticities Index 4D Values (2001) pivots current number vehicle trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.\nTransitTrips – change number transit trips calculated using set elasticities Index 4D Values (2001) pivots current number transit trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.\nWalking – elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. product elasticity D value applied place type growth quantities scenario calculated percentage increase decrease walking new residents region relative current place type distribution.\nsnapshot file:\nParameters\nVMT\nVehicleTrips\nTransitTrips\nWalking\nDensity\n-0.04\n-0.043\n0.07\n0.07\nDiversity\n-0.09\n-0.051\n0.12\n0.15\nDesign\n-0.12\n-0.031\n0.23\n0.39\nRegional_Accessibility\n-0.2\n-0.036\n0\n0\nDistance_to_Transit\n-0.05\n0\n0.29\n0.15\nPlace type adjustments travel demand (model_place_type_elasticities.csv): file contains elasticities four performance metrics:VMT – Following estimate travel demand incorporates induced demand, adjustment made travel demand accounts changes growth place types used model describe urban form. changes interpreted changes design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix). effect travel demand determined changes VMT urban form categories, shown table . elasticities shown table multiplied D values place type. D values proportion values place type relative regional average, set 1.0.VehicleTrips – change number vehicle trips calculated using set elasticities Index 4D Values (2001) pivots current number vehicle trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.TransitTrips – change number transit trips calculated using set elasticities Index 4D Values (2001) pivots current number transit trips per capita based scenario’s allocation growth place type. elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. model reports additional number trips caused growth assumed scenario regional total.Walking – elasticities shown table applied D values, proportional values place type relative regional average D value set 1.0. product elasticity D value applied place type growth quantities scenario calculated percentage increase decrease walking new residents region relative current place type distribution.snapshot file:Place type adjustments travel demand (model_place_type_relative_values.csv): file contains D values, proportional values 13 place types (Bzones) relative regional average, five Ds used VERPAT - design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix).\nsnapshot file:\nGeo\nDensity\nDiversity\nDesign\nRegional_Accessibility\nDistance_to_Transit\nRur\n0.5\n0.5\n0.5\n0.5\n0.5\nSub_R\n0.75\n0.75\n0.75\n0.75\n0.75\nSub_E\n0.75\n0.75\n0.75\n0.75\n0.75\nSub_M\n1\n1\n1\n0.75\n0.75\nSub_T\n1\n1\n1\n1\n1\nCIC_R\n1.2\n1.2\n1.2\n1.2\n1\nCIC_E\n1.2\n1.2\n1.2\n1.2\n1\nCIC_M\n1.2\n1.2\n1.2\n1.2\n1\nCIC_T\n1.2\n1.2\n1.2\n1.2\n1.2\nUC_R\n1.5\n1.2\n1.5\n1.5\n1.2\nUC_E\n1.5\n1.2\n1.5\n1.5\n1.2\nUC_M\n1.5\n1.5\n1.5\n1.5\n1.2\nUC_T\n1.5\n1.5\n1.5\n1.5\n1.5\nPlace type adjustments travel demand (model_place_type_relative_values.csv): file contains D values, proportional values 13 place types (Bzones) relative regional average, five Ds used VERPAT - design (intersection street density), accessibility (job accessibility auto), distance transit (nearest transit stop), density (population density) diversity (land use mix).\nsnapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-88","chapter":"12 VERPAT Model Details","heading":"12.3.16.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-92","chapter":"12 VERPAT Model Details","heading":"12.3.16.3 Module Outputs","text":"DvmtFuture (households): Average daily vehicle miles traveled household estimated using model estimations future year dataDvmtFuture (bzones): Average daily vehicle miles traveled place types estimated using model estimations future year dataDvmtPtAdj: Dvmt adjustment place typesAccess: Growth job accessEquity: Growth equity income groupVehicleTrips: Policy adjusted vehicle tripsTransitTrips: Policy adjusted transit tripsWalking: Growth walkingTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatepolicyvmt","chapter":"12 VERPAT Model Details","heading":"12.3.17 CalculatePolicyVmt","text":"module calculates scenario travel demand. average daily VMT household can adjusted based changes growth patterns place type, changes auto operating cost, changes road lane miles transit revenue miles scenario. also series policy assumptions can contribute changes VMT: pricing VMT charges parking pricing, strategies freeways arterials, vanpool, telecommuting, ridesharing, transit pass programs. contribute shifts travel demand given scenario.","code":""},{"path":"verpat.html","id":"user-input-files-91","chapter":"12 VERPAT Model Details","heading":"12.3.17.1 User Input Files","text":"Percentage employees offered commute options (region_commute_options.csv): file contains assumptions availability participation work based travel demand management programs. policies ridesharing programs, transit pass programs, telecommuting alternative work schedule programs, vanpool programs. , user enters proportion workers participate (data items “Participation” suffix). one program, transit subsidy, user must also enter subsidy level dollars TransitSubsidyLevel data item.\nsnapshot file:\nTDMProgram\nDataItem\nDataValue\nRidesharing\nRidesharingParticipation\n0.05\nTransitSubsidy\nTransitSubsidyParticipation\n0.1\nTransitSubsidy\nTransitSubsidyLevel\n1.25\nWorkSchedule\nSchedule980Participation\n0.01\nWorkSchedule\nSchedule440Participation\n0.01\nWorkSchedule\nTelecommute1.5DaysParticipation\n0.01\nVanpooling\nLowLevelParticipation\n0.04\nVanpooling\nMediumLevelParticipation\n0.01\nVanpooling\nHighLevelParticipation\n0.01\nPercentage employees offered commute options (region_commute_options.csv): file contains assumptions availability participation work based travel demand management programs. policies ridesharing programs, transit pass programs, telecommuting alternative work schedule programs, vanpool programs. , user enters proportion workers participate (data items “Participation” suffix). one program, transit subsidy, user must also enter subsidy level dollars TransitSubsidyLevel data item.\nsnapshot file:Bicycling/light vehicles targets (region_light_vehicles.csv): file contains input data non-motorized vehicle model. VERPAT, non-motorized vehicles bicycles, also electric bicycles, segways, similar vehicles small, light-weight can travel bicycle speeds slightly higher. parameters follows:\nTargetProp: non-motorized vehicle ownership rate (average ratio non-motorized vehicles driver age population)\nThreshold: single-occupant vehicle (SOV) tour mileage threshold used SOV travel proportion model. upper limit tour lengths suitable reallocation non-motorized modes.\nPropSuitable: proportion SOV travel suitable non-motorized vehicle travel. variable describes proportion SOV tours within mileage threshold non-motorized vehicles might substituted. variable takes account factors weather trip purpose.\nnon-motorized vehicle model predicts ownership use non-motorized vehicles (non-motorized vehicles bicycles, also electric bicycles, segways similar vehicles small, light-weight can travel bicycle speeds slightly higher bicycle speeds). core concept model non-motorized vehicle usage primarily substitute short-distance SOV travel. Therefore, model estimates proportion household vehicle travel occurs short-distance SOV tours. model determines maximum potential household VMT diverted non-motorized vehicles, also dependent availability non-motorized vehicles.\nNote bike share programs (BSP) serve increase availability non-motorized vehicles can taken account increasing TargetProp variable. Use national estimates non-motorized ownership regional estimates non-motorized ownership available (unless region notably atypical levels bicycle usage). See Bicycle Ownership United States analysis regional differences.\nsnapshot file:\nDataItem\nDataValue\nTargetProp\n0.2\nThreshold\n2\nPropSuitable\n0.1\nBicycling/light vehicles targets (region_light_vehicles.csv): file contains input data non-motorized vehicle model. VERPAT, non-motorized vehicles bicycles, also electric bicycles, segways, similar vehicles small, light-weight can travel bicycle speeds slightly higher. parameters follows:TargetProp: non-motorized vehicle ownership rate (average ratio non-motorized vehicles driver age population)Threshold: single-occupant vehicle (SOV) tour mileage threshold used SOV travel proportion model. upper limit tour lengths suitable reallocation non-motorized modes.PropSuitable: proportion SOV travel suitable non-motorized vehicle travel. variable describes proportion SOV tours within mileage threshold non-motorized vehicles might substituted. variable takes account factors weather trip purpose.non-motorized vehicle model predicts ownership use non-motorized vehicles (non-motorized vehicles bicycles, also electric bicycles, segways similar vehicles small, light-weight can travel bicycle speeds slightly higher bicycle speeds). core concept model non-motorized vehicle usage primarily substitute short-distance SOV travel. Therefore, model estimates proportion household vehicle travel occurs short-distance SOV tours. model determines maximum potential household VMT diverted non-motorized vehicles, also dependent availability non-motorized vehicles.\nNote bike share programs (BSP) serve increase availability non-motorized vehicles can taken account increasing TargetProp variable. Use national estimates non-motorized ownership regional estimates non-motorized ownership available (unless region notably atypical levels bicycle usage). See Bicycle Ownership United States analysis regional differences.\nsnapshot file:Increase parking cost supply (marea_parking_growth.csv): file contains information allows effects policies workplace parking charges “cash-buy-back” programs tested. input parameters follows entered base future year:\nPropWrkPkg: proportion employees park work\nPropWrkChrgd: proportion employers charge parking\nPropCashOut: proportion employment parking converted free pay “cash-buy-back” type program\nPrkOthChrgd: proportion parking free\nPkgCost: average daily parking cost. variable average daily parking cost incur fee park. paid parking varies across region, “PkgCost” value reflect average parking fees, weighted supply – Center City, average heavily weighted toward price Center City.\nsnapshot file:\nGeo\nYear\nPropWorkParking\nPropWorkCharged\nPropCashOut\nPropOtherCharged\nParkingCost.2000\nMultnomah\n2005\n1\n0.1\n0\n0.05\n5\nMultnomah\n2035\n1\n0.1\n0\n0.05\n5\nIncrease parking cost supply (marea_parking_growth.csv): file contains information allows effects policies workplace parking charges “cash-buy-back” programs tested. input parameters follows entered base future year:PropWrkPkg: proportion employees park workPropWrkChrgd: proportion employers charge parkingPropCashOut: proportion employment parking converted free pay “cash-buy-back” type programPrkOthChrgd: proportion parking freePkgCost: average daily parking cost. variable average daily parking cost incur fee park. paid parking varies across region, “PkgCost” value reflect average parking fees, weighted supply – Center City, average heavily weighted toward price Center City.snapshot file:Travel Demand Management: Ridesharing (model_tdm_ridesharing.csv): ridesharing Travel Demand Management file contains parameters describing effectiveness ridersharing programs place type. proportion employees participating ridesharing program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. ridesharing submodel computes anticipated level VMT reduction resulting implementation ridesharing, based place type household lives , using effectiveness values shown parameter file. Previous studies determined level ridesharing participation less rural suburban areas, compared -urban areas. Typically, people carpool urbanized areas due presence parking charges, potential difficulties finding parking, disincentives typically present urbanized areas.\nsnapshot file:\nModelGeo\nEffectiveness\nRur\n0\nSub\n0.05\nCIC\n0.1\nUC\n0.15\nTravel Demand Management: Ridesharing (model_tdm_ridesharing.csv): ridesharing Travel Demand Management file contains parameters describing effectiveness ridersharing programs place type. proportion employees participating ridesharing program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. ridesharing submodel computes anticipated level VMT reduction resulting implementation ridesharing, based place type household lives , using effectiveness values shown parameter file. Previous studies determined level ridesharing participation less rural suburban areas, compared -urban areas. Typically, people carpool urbanized areas due presence parking charges, potential difficulties finding parking, disincentives typically present urbanized areas.\nsnapshot file:Travel Demand Management: Transit Fares (model_tdm_transit.csv): transit fare Travel Demand Management files parameters effectiveness (level VMT reduction) fare subsidy values employer. subsidized/discounted transit model begins evaluating level participation within region. Monte Carlo processes used identify households participate transit pass programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model allows selection one four potential subsidy levels (also policy inputs), influence level VMT reduction based level subsidy applied place type. anticipated level VMT reduction reduced account proportion work travel overall daily travel.\nsnapshot file:\nModelGeo\nSubsidy0\nSubsidy1\nSubsidy2\nSubsidy3\nSubsidy4\nRur\n0\n0\n0\n0\n0\nSub\n0\n0.02\n0.033\n0.079\n0.2\nCIC\n0\n0.034\n0.073\n0.164\n0.2\nUC\n0\n0.062\n0.129\n0.2\n0.2\nTravel Demand Management: Transit Fares (model_tdm_transit.csv): transit fare Travel Demand Management files parameters effectiveness (level VMT reduction) fare subsidy values employer. subsidized/discounted transit model begins evaluating level participation within region. Monte Carlo processes used identify households participate transit pass programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model allows selection one four potential subsidy levels (also policy inputs), influence level VMT reduction based level subsidy applied place type. anticipated level VMT reduction reduced account proportion work travel overall daily travel.\nsnapshot file:Travel Demand Management: Transit Subsidy Levels (model_tdm_transitlevels.csv): file contains dollar value match subsidy levels used model_tdm_transit.csv file.\nsnapshot file:\nSubsidyLevel\nSubsidyValue.2000\nSubsidy0\n0\nSubsidy1\n0.75\nSubsidy2\n1.49\nSubsidy3\n2.98\nSubsidy4\n5.96\nTravel Demand Management: Transit Subsidy Levels (model_tdm_transitlevels.csv): file contains dollar value match subsidy levels used model_tdm_transit.csv file.\nsnapshot file:Travel Demand Management: Vanpooling (model_tdm_vanpooling.csv): file contains parameters describing effectiveness terms VMT reductions vanpooling programs across three levels employee involvement.\nvanpool program submodel operates evaluating likely level participation. Monte Carlo processes used identify households participate vanpool programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. employers participate program categorized three levels involvement low medium high. level involvement reflects extent employer actively facilitate promote vanpooling. example, low level involvement might represent employer organizes minimal number vanpools. high level involvement represent employer extensive vanpooling program cover large number employees. Based level involvement, reduction VMT estimated basis values file.\nsnapshot file:\nVanpoolingParticipation\nVMTReduction\nLow\n0.003\nMedium\n0.0685\nHigh\n0.134\nTravel Demand Management: Vanpooling (model_tdm_vanpooling.csv): file contains parameters describing effectiveness terms VMT reductions vanpooling programs across three levels employee involvement.\nvanpool program submodel operates evaluating likely level participation. Monte Carlo processes used identify households participate vanpool programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. employers participate program categorized three levels involvement low medium high. level involvement reflects extent employer actively facilitate promote vanpooling. example, low level involvement might represent employer organizes minimal number vanpools. high level involvement represent employer extensive vanpooling program cover large number employees. Based level involvement, reduction VMT estimated basis values file.\nsnapshot file:Travel Demand Management: Work Schedule (model_tdm_workschedule.csv): file contains parameters describe effectiveness different participation levels three different telecommuting alternative work schedules.\ntelecommuting alternative work schedule model first evaluates likely level participation throughout region terms telecommuting alternatively-works schedules. Monte Carlo processes used identify households participate telecommuting programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model determines type programs might implemented. Three potential alternatives offered including:\n4/40 Schedule: 4 days per week 40 hours per week\n9/80 Schedule: working 4 days every week average 80 hours 2 weeks\nTelecommuting: Workers may work 1 2 days week remotely\noption identified level participation, estimated VMT determined basis parameters file.\nsnapshot file:\nWorkSchedulePolicy\nParticipation0\nParticipation1\nParticipation2\nParticipation3\nParticipation4\nParticipation5\nSchedule980\n0\n0.0007\n0.0021\n0.0035\n0.007\n0.0175\nSchedule440\n0\n0.0015\n0.0045\n0.007\n0.015\n0.0375\nTelecommuteoneandhalfDays\n0\n0.0022\n0.0066\n0.011\n0.022\n0.055\nTravel Demand Management: Work Schedule (model_tdm_workschedule.csv): file contains parameters describe effectiveness different participation levels three different telecommuting alternative work schedules.\ntelecommuting alternative work schedule model first evaluates likely level participation throughout region terms telecommuting alternatively-works schedules. Monte Carlo processes used identify households participate telecommuting programs. proportion employees participating program policy input. converted proportion working-age persons using assumed labor force participation rate (0.65) sample working-age persons households. model determines type programs might implemented. Three potential alternatives offered including:4/40 Schedule: 4 days per week 40 hours per week9/80 Schedule: working 4 days every week average 80 hours 2 weeksTelecommuting: Workers may work 1 2 days week remotelyOnce option identified level participation, estimated VMT determined basis parameters file.\nsnapshot file:Travel Demand Management: Work Schedule Participation Levels (model_tdm_workschedulelevels.csv): file describes proportion employees participating program corresponding participation levels used model_tdm_workschedule.csv file.\nsnapshot file:\nParticipationLevel\nParticipationValue\nParticipation0\n0\nParticipation1\n0.01\nParticipation2\n0.03\nParticipation3\n0.05\nParticipation4\n0.1\nParticipation5\n0.25\nTravel Demand Management: Work Schedule Participation Levels (model_tdm_workschedulelevels.csv): file describes proportion employees participating program corresponding participation levels used model_tdm_workschedule.csv file.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-11","chapter":"12 VERPAT Model Details","heading":"12.3.17.2 User Input Parameters:","text":"% Increase Auto Operating Cost (AutoCostGrowth): parameter reflects proportional increase auto operating cost. can used test different assumptions future gas prices effects increased gas taxes. value 1.5 multiplies base year operating costs 1.5 thus reflects 50% increase. defined model_parameters.json follows:\n{\n    \"NAME\" : \"AutoCostGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}% Increase Auto Operating Cost (AutoCostGrowth): parameter reflects proportional increase auto operating cost. can used test different assumptions future gas prices effects increased gas taxes. value 1.5 multiplies base year operating costs 1.5 thus reflects 50% increase. defined model_parameters.json follows:Auto Operating Surcharge Per VMT (VmtCharge): cost cents per mile levied auto users form VMT charge. defined model_parameters.json follows:\n{\n    \"NAME\" : \"VmtCharge\",\n    \"VALUE\": \"0.05\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Auto Operating Surcharge Per VMT (VmtCharge): cost cents per mile levied auto users form VMT charge. defined model_parameters.json follows:Work VMT Proportion (WorkVmtProp): proportion household VMT takes place commute work purposes; used differentiate travel purposes use estimating overall VMT reductions targeted commute work. defined model_parameters.json follows:\n{\n    \"NAME\" : \"WorkVmtProp\",\n    \"VALUE\": \"0.25\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Work VMT Proportion (WorkVmtProp): proportion household VMT takes place commute work purposes; used differentiate travel purposes use estimating overall VMT reductions targeted commute work. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"AutoCostGrowth\",\n    \"VALUE\": \"1.5\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"VmtCharge\",\n    \"VALUE\": \"0.05\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"USD/MI\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"WorkVmtProp\",\n    \"VALUE\": \"0.25\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-89","chapter":"12 VERPAT Model Details","heading":"12.3.17.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-93","chapter":"12 VERPAT Model Details","heading":"12.3.17.4 Module Outputs","text":"DvmtPolicy (bzones): Average daily vehicle miles traveled place types policy adjustmentsDvmtPolicy (households): Average daily vehicle miles traveled households policy adjustmentsDvmtPolicy (vehicles): Average daily vehicle miles traveled vehicles policy adjustmentsLtVehiclesPolicy: Number light vehicles households policy adjustmentsLtVehAdjFactorPolicy: Light vehicles adjustment factor householdsTdmLtVehAdjFactorPolicy: TDM Light vehicles adjustment factor householdsTdmAdjFactorPolicy: TDM adjustment factor householdsLtVehDvmtPolicy: Average daily vehicle miles traveled light vehicles households policy adjustmentsFutureCostPerMilePolicy: Total cost per mile future year household estimated making policy adjustmentsDailyParkingCostPolicy: Daily parking cost calculated making policy adjustmentsCashOutIncAdjPolicy: Adjustment income cash outIncomePolicy: Income households applying policyCostsPolicy: Various policy related energy costsTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"calculatecongestionpolicy","chapter":"12 VERPAT Model Details","heading":"12.3.18 CalculateCongestionPolicy","text":"module similar CalculateCongestionBase module uses model estimation future transportation supply adjusted policies basis calculations.","code":""},{"path":"verpat.html","id":"user-input-files-92","chapter":"12 VERPAT Model Details","heading":"12.3.18.1 User Input Files","text":"Percent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:\nGeo\nYear\n\nMultnomah\n2005\n0\nMultnomah\n2035\n0\nPercent road miles treatment (azone_its_prop.csv): file estimate proportion road miles improvements reduce incidents treatments base future years. Values entered 0 1, 1 indicating 100% road miles treated.\npolicy measures effects incident management supported . table used inform congestion model travel demand model. model uses mean speeds without incidents compute overall average speed road type congestion level providing simple level sensitivity potential effects incident management programs delay emissions.\ntreatments evaluated freeways arterials. treatments can evaluated analyst considers reduce non-recurring congestion due incidents. policy deal operational improvements signal coordination, temporary capacity increases allowing shoulder use peak.\nsnapshot file:Truck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:\nType\nPropVmt\nFwy\nArt\n\nBusVmt\n0\n0.15\n0.591854\n0.258146\nTruckVmt\n0.08\n0.452028\n0.398645\n0.149327\nTruck bus vmt (region_truck_bus_vmt.csv): file contains region’s proportion VMT truck bus well distribution VMT across functional classes (freeway, arterial, ). file includes one row bus VMT data one row Truck VMT data. noted necessary enter values PropVmt column BusVmt calculated using values transportation_supply.csv user input file. truck VMT proportion (PropVMT column, TruckVMT row) can obtained Highway Performance Monitoring System data local sources regional travel demand model one exists.\nproportions VMT functional class can derived Federal Highway Cost Allocation Study data transit operators. Federal Highway Cost Allocation Study (Table II-6, 1997 Federal Highway Cost Allocation Study Final Report, Chapter II used calculate average proportion truck VMT functional class. Data transit authorities used calculate proportions bus VMT urban area functional class.\nsnapshot file:","code":""},{"path":"verpat.html","id":"user-input-parameters-12","chapter":"12 VERPAT Model Details","heading":"12.3.18.2 User Input Parameters","text":"Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Light vehicle dvmt (BaseLtVehDvmt): Total light vehicle daily VMT base year thousands miles. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. Light vehicle daily VMT can estimated subtracting truck bus VMT total VMT provided Highway Performance Monitoring System (HPMS). Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:\n{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}Dvmt proportion functional class (BaseFwyArtProp): proportions daily VMT light vehicles takes place freeways arterials (.e., remainder VMT takes place lower functional class roads base year. data can derived combination Highway Performance Monitoring System data, Federal Highway Cost Allocation Study data, regional data. proportions light vehicle daily VMT freeways arterials can derived HPMS data. Regional travel demand model outputs can also used derive data. defined model_parameters.json follows:Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:\n{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}Transit revenue adjustment factor (TranRevMiAdjFactor): Factor convert transit revenue miles (.e. miles run service routes) total transit vehicle miles operated account vehicle miles run deadheading depots route endpoints. defined model_parameters.json follows:","code":"{\n    \"NAME\" : \"BaseLtVehDvmt\",\n    \"VALUE\": \"27244\",\n    \"TYPE\" : \"compound\",\n    \"UNITS\" : \"MI/DAY\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"BaseFwyArtProp\",\n    \"VALUE\": \"0.77\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"proportion\",\n    \"PROHIBIT\" : \"c('NA', '< 0', '> 1')\",\n    \"ISELEMENTOF\" : \"\"\n}{\n    \"NAME\" : \"TranRevMiAdjFactor\",\n    \"VALUE\": \"1.12\",\n    \"TYPE\" : \"double\",\n    \"UNITS\" : \"multiplier\",\n    \"PROHIBIT\" : \"c('NA', '< 0')\",\n    \"ISELEMENTOF\" : \"\"\n}"},{"path":"verpat.html","id":"internal-module-inputs-90","chapter":"12 VERPAT Model Details","heading":"12.3.18.3 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-94","chapter":"12 VERPAT Model Details","heading":"12.3.18.4 Module Outputs","text":"LtVehDvmtPolicy: Daily vehicle miles travelled light vehicles region calculated using model estimation future data adjusting policiesBusDvmtPolicy: Daily vehicle miles travelled bus region calculated using model estimation future data adjusting policiesMpgAdjLtVehPolicy: Average fuel efficiency adjustment light vehicles region calculated using model estimation future data adjusting policiesMpgAdjBusPolicy: Average fuel efficiency adjustment buses region calculated using model estimation future data adjusting policiesMpgAdjTruckPolicy: Average fuel efficiency adjustment heavy trucks region calculated using model estimation future data adjusting policiesVehHrLtVehPolicy: Total vehicle travel time light vehicles region calculated using model estimation future data adjusting policiesVehHrBusPolicy: Total vehicle travel time buses region calculated using model estimation future data adjusting policiesVehHrTruckPolicy: Total vehicle travel time heavy trucks region calculated using model estimation future data adjusting policiesAveSpeedLtVehPolicy: Average speed light vehicles region calculated using model estimation future data adjusting policiesAveSpeedBusPolicy: Average speed buses region calculated using model estimation future data adjusting policiesAveSpeedTruckPolicy: Average speed heavy trucks region calculated using model estimation future data adjusting policiesFfVehHrLtVehPolicy: Average free-flow travel time light vehicles region calculated using model estimation future data adjusting policiesFfVehHrBusPolicy: Average free-flow travel time buses region calculated using model estimation future data adjusting policiesFfVehHrTruckPolicy: Average free-flow travel time heavy trucks region calculated using model estimation future data adjusting policiesDelayVehHrLtVehPolicy: Total vehicle delay time light vehicles region calculated using model estimation future data adjusting policiesDelayVehHrBusPolicy: Total vehicle delay time buses region calculated using model estimation future data adjusting policiesDelayVehHrTruckPolicy: Total vehicle delay time heavy trucks region calculated using model estimation future data adjusting policiesMpgAdjHhPolicy: Average fuel efficiency adjustment households region calculated using model estimation future data adjusting policiesLtVehDvmtFactorPolicy: Light vehicle Dvmt factor adjustment factor calculated using model estimation future data adjusting policiesTop Definitions Inputs/Outputs","code":""},{"path":"verpat.html","id":"reportrpatmetrics","chapter":"12 VERPAT Model Details","heading":"12.3.19 ReportRPATMetrics","text":"module calculates performance metrics designed address variety impacts helpful decision-making. Following table summarizes various performance measures produced modules, details discussed VEReports.","code":""},{"path":"verpat.html","id":"user-input-files-93","chapter":"12 VERPAT Model Details","heading":"12.3.19.1 User Input Files","text":"Transportation Costs (model_transportation_costs.csv): file contains unit cost rates transportation infrastructure investments operating costs transit fare revenue. parameters used calculations transportation costs performance metrics.\nsource transit capital, operating costs, fare revenue NTD, particular National Transit Profile available NTDB website. Costs available variety index formats, e.g. cost per revenue mile hour; cost per passenger trip used VERPAT.\nsource highway infrastructure costs FHWA’s Highway Economic Requirements System model, . Information obtained Chapter 6 2005 Technical Report US states (FHWA, 2005). Table 8-1 provides unit costs (per lane mile) Rural Urban highway systems, distinguishes among three functional classes: interstates, freeways expressways; principal arterials; minor arterials collectors. Costs estimates provided following improvements:\nReconstruction widening\nReconstruct pavement\nResurface widen lanes\nResurface pavement\nImprove shoulders\nAdditional choices offered distinguish adding lane “normal” vs. “high cost”, also pavement realignment, also normal vs. high cost conditions. practical reasons, decided use “new construction” (also includes adding lanes) costs basis cost estimates, ignore categories reconstruction, resurfacing, realignment. construction costs include right way, construction, “small” allowance bridges support facilities.\ninfrastructure costs focus “urban” system, rural, also makes possible differentiate three size classes: Small Urban, Small Urbanized, Large Urbanized. numbers 2002 dollars; FHWA advises escalation current dollars using NHCCI, available online http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); report VERPAT escalates uses Index escalate 2010 values.\nparameter values file average values per lane mile, simplifying calculations highway costs just differentiate investments freeway vs. arterial functional class roads.\nsnapshot file:\nSupplyClass\nCapCosts.2000\nOpCosts.2000\nFare.2000\nFreeway\n17\n0\n0\nArterial\n7\n0\n0\nBus\n0.71\n3.4\n0.91\nRail\n5.11\n4.87\n2.19\nTransportation Costs (model_transportation_costs.csv): file contains unit cost rates transportation infrastructure investments operating costs transit fare revenue. parameters used calculations transportation costs performance metrics.\nsource transit capital, operating costs, fare revenue NTD, particular National Transit Profile available NTDB website. Costs available variety index formats, e.g. cost per revenue mile hour; cost per passenger trip used VERPAT.\nsource highway infrastructure costs FHWA’s Highway Economic Requirements System model, . Information obtained Chapter 6 2005 Technical Report US states (FHWA, 2005). Table 8-1 provides unit costs (per lane mile) Rural Urban highway systems, distinguishes among three functional classes: interstates, freeways expressways; principal arterials; minor arterials collectors. Costs estimates provided following improvements:Reconstruction wideningReconstruct pavementResurface widen lanesResurface pavementImprove shouldersAdditional choices offered distinguish adding lane “normal” vs. “high cost”, also pavement realignment, also normal vs. high cost conditions. practical reasons, decided use “new construction” (also includes adding lanes) costs basis cost estimates, ignore categories reconstruction, resurfacing, realignment. construction costs include right way, construction, “small” allowance bridges support facilities.\ninfrastructure costs focus “urban” system, rural, also makes possible differentiate three size classes: Small Urban, Small Urbanized, Large Urbanized. numbers 2002 dollars; FHWA advises escalation current dollars using NHCCI, available online http://www.fhwa.dot.gov/policyinformation/nhcci.cfm); report VERPAT escalates uses Index escalate 2010 values.\nparameter values file average values per lane mile, simplifying calculations highway costs just differentiate investments freeway vs. arterial functional class roads.\nsnapshot file:Accident Rates (model_accident_rates.csv): Road safety impacts calculated factoring amount VMT. following national average rates, Fatality Analysis Reporting System General Estimates System (2009) US Department Transportation, applied calculate number fatal injury accidents value property damage:\nFatal: 1.14 per 100 Million Miles Traveled\nInjury: 51.35 per 100 Million Miles Traveled\nProperty damage: 133.95 per 100 Million Miles Traveled\nsnapshot file:\nAccident\nRate\nFatal\n1.14\nInjury\n51.35\nProperty\n133.95\nAccident Rates (model_accident_rates.csv): Road safety impacts calculated factoring amount VMT. following national average rates, Fatality Analysis Reporting System General Estimates System (2009) US Department Transportation, applied calculate number fatal injury accidents value property damage:Fatal: 1.14 per 100 Million Miles TraveledInjury: 51.35 per 100 Million Miles TraveledProperty damage: 133.95 per 100 Million Miles TraveledHere snapshot file:","code":""},{"path":"verpat.html","id":"internal-module-inputs-91","chapter":"12 VERPAT Model Details","heading":"12.3.19.2 Internal Module Inputs","text":"","code":""},{"path":"verpat.html","id":"module-outputs-95","chapter":"12 VERPAT Model Details","heading":"12.3.19.3 Module Outputs","text":"EmissionsMetric: amount greenhouse gas emissions per day place-typesFuelMetric: amount fuel consumed per day place-typesCostsMetric: annual traveler cost (fuel + charges)FuelGallonsMetric: Average daily fuel consumption gallons policyFuelCo2eMetric: Average daily Co2 equivalent greenhouse gas emissions policyFutureCostPerMileMetric: Total fuel cost per mile policyTotalCostMetric: Total fuel cost policyRailPowerMetric: Annual power consumption railTruckFuelMetric: Annual truck fuel consumptionBusFuelMetric: Annual bus fuel consumptionTruckCo2eMetric: Annual greenhouse gas emissions truckBusCo2eMetric: Annual greenhouse gas emissions busRailCo2eMetric: Annual greenhouse gas emissions railHighwayCostMetric: Regional highway infrastructure costsTransitCapCostMetric: Regional transit infrastructure costsTransitOpCostMetric: Regional transit operating costsTransitRevenueMetric: Annual fare revenueFatalIncidentMetric: Number fatal incidentsInjuryIncidentMetric: Number incidents injuriesPropertyDamageMetric: Amount incidents property damageTruckConsumptionMetric: Annual truck fuel consumption fuel typeBusConsumptionMetric: Annual bus fuel consumption fuel typeTop Definitions Inputs/Outputs\n## Development InstallationThis section describes installation usage VERPAT.","code":""},{"path":"verpat.html","id":"installation-of-visioneval-and-verpat","chapter":"12 VERPAT Model Details","heading":"12.3.20 Installation of VisionEval and VERPAT","text":"VERPAT VisionEval framework implemented R, statistical programming language environment. R VERPAT open source freely available. installation VERPAT two-step process.Install RInstall VisionEval VERPATThese described [[Getting Started: Installation Setup | Getting-Started#installation--setup]].","code":""},{"path":"verpat.html","id":"running-the-verpat-model","chapter":"12 VERPAT Model Details","heading":"12.3.21 Running the VERPAT model","text":"VisionEval VERPAT installed, directory sample data Multnomah County, Oregon present ../VisionEval/sources/models/VERPAT. (Note .. refers parent directory installation directory).VERPAT directory serves dual purposes providing sample data serving template local modification locations.contains two subdirectories several files:defs directory contains five [[model definition files | VERPAT-Inputs--Parameters#model-definition-files]], also described Model System Design document. contain settings define model run.inputs directory contains number CSV JSON files provide inputs modules. module specifies input files needs. described [[Input Files | VERPAT-Inputs--Parameters#input-files]] Model System Design document.change conditions model, input files modified (see Modifying scenario).run_model.R file described Model System Design document consists calls modules make model.run file R, see instructions [[Getting Started: Running VE Models | Getting-Started#running-ve-models]]. page describes running VERPAT via R console using VEGUI.remaining files directory README.md, brief text file link [Getting Started], VERPAT.Rproj, file use RStudio (text editor integrated development environment R).","code":""},{"path":"verpat.html","id":"modifying-the-scenario","chapter":"12 VERPAT Model Details","heading":"12.3.21.1 Modifying the scenario","text":"described , VisionEval/sources/models/VERPAT directory contains sample input files Multnomah County, Oregon. can modified replaced investigate impacts policy changes model different region.modify scenario, appropriate input files edited. example, increase bicycle usage, file inputs/region_light_vehicles.csv modified Excel, LibreOffice, text editor change DataValue TargetProp 0.2 0.4:required input files described detail Model System Design document.","code":""},{"path":"verpat.html","id":"model-output","chapter":"12 VERPAT Model Details","heading":"12.3.21.2 Model output","text":"output data contained datastore, can either HDF5 file directory RData files. datastore described detail Model System Design document.case (), datastore directory RData files. hierarchical structure, directories year model run, plus Global folder output year specific.year directories contain subdirectories geographic level, containing RData files.Global directory contains data vary model run year model parameters geographic tables.Rda files contains single R vector called Dataset attributes describing data.","code":""},{"path":"verpat.html","id":"exporting-data-to-csv","chapter":"12 VERPAT Model Details","heading":"12.3.21.3 Exporting Data to CSV","text":"end model run, subset data automatically exported Datastore set CSV files. files placed model directory subfolder called outputs. export data manually, script located ../sources/models/export_output_to_csv.R can modified suit.","code":""},{"path":"ve-estimation.html","id":"ve-estimation","chapter":"13 Estimation in VisionEval","heading":"13 Estimation in VisionEval","text":"","code":""},{"path":"ve-estimation.html","id":"introduction","chapter":"13 Estimation in VisionEval","heading":"13.1 Introduction","text":"","code":""},{"path":"ve-estimation.html","id":"overview-and-content-of-this-chapter","chapter":"13 Estimation in VisionEval","heading":"13.1.1 Overview and Content of this Chapter","text":"Model estimation VisionEval, either statistical estimation model parameters (estimating linear regression logit models) tabulation external data produce model parameters, designed integrated VE modules take place build process modules packages.convenient, current process existing VE modules limitations:difficult replace models local updated data due complexity lack documentationSeveral modules obscure data parameters estimation portion package therefore require package rebuilds changes madeLegacy model estimation (.e., earlier work prior development VE framework conform current recommended code structure implementing modules VE) incorporated several modules, e.g., modules part RPAT modelThere data discontinuities preventing users estimating models , example, restricted confidential data used estimate model components (e.g., use restricted spatial data VETravelDemandMM) preventing data included model package.chapter forms element work improve ability applying VE incorporate newer publicly available datasets custom datasets develop locally relevant models use VE. work include defining process users make use latest NHTS data, local HTS data, local PUMS data, update models estimated using older versions NHTS PUMS data different states regions.chapter includes, section VE Estimation Classification, classification source data estimation approaches respect important might re-estimate models using localized /updated versions source information, whether estimation approach used packages forms barrier re-estimation. discussion intended provide input next step work, designed approaches improve flexibility usability estimation procedures VE.chapter includes, section VE Modules Estimation, detailed catalog estimated models VE modules lists underlying data used estimation process module.Finally, chapter includes, section VE Module Structure, complete discussion typical R package structure modules VE, include discussion location data used various types estimation ideal structure scripts used estimate models, apply estimated models, develop documentation. section can used reference model developers adjust models existing packages (particularly conform current VE structure support estimation package build process) set new modules.","code":""},{"path":"ve-estimation.html","id":"key-concepts","chapter":"13 Estimation in VisionEval","heading":"13.1.2 Key Concepts","text":"several key concepts referred discussions chapter, introduced :VE modules packages: VE model, VE-State, sequences models simulate population, landuse, travel region. element simulate comprised module simulates step, developing set households region. R package structure used house code data required estimate apply step model. R package structure described detail VE Module Structure.VE modules packages: VE model, VE-State, sequences models simulate population, landuse, travel region. element simulate comprised module simulates step, developing set households region. R package structure used house code data required estimate apply step model. R package structure described detail VE Module Structure.Model estimation model application: model estimation process either statistically estimating parameters models linear regression models dataset, creating set parameters another way deriving distribution tabulating dataset. parameters tabulation can used model application. model application process actually running model scenario region model system implemented.Model estimation model application: model estimation process either statistically estimating parameters models linear regression models dataset, creating set parameters another way deriving distribution tabulating dataset. parameters tabulation can used model application. model application process actually running model scenario region model system implemented.Package build process: R packages comprised R code, datasets, documentation, files. build process, details included VE Module Structure, standard R process package compiled form can installed loaded, making functions datasets included package available called R scripts model application. package built R code executed, provides opportunity run data processing model estimation code create data model objects available model applied. process supports typical workflow model developer module data data processing model estimation scripts can modified changes reflected module R package built, ready use model application. (noted , VE modules conform approach estimation updated build process).Package build process: R packages comprised R code, datasets, documentation, files. build process, details included VE Module Structure, standard R process package compiled form can installed loaded, making functions datasets included package available called R scripts model application. package built R code executed, provides opportunity run data processing model estimation code create data model objects available model applied. process supports typical workflow model developer module data data processing model estimation scripts can modified changes reflected module R package built, ready use model application. (noted , VE modules conform approach estimation updated build process).","code":""},{"path":"ve-estimation.html","id":"ve-estimation-classification","chapter":"13 Estimation in VisionEval","heading":"13.2 VE Estimation Classification","text":"several main estimation methods used current VE modules. characteristics discussed particular focus places methods already lend updates places current approach makes updates package users difficult. specific data sources approaches used module cataloged detail section VE Modules Estimation .","code":""},{"path":"ve-estimation.html","id":"modules-importing-data-from-venhts2001","chapter":"13 Estimation in VisionEval","heading":"13.2.1 Modules importing data from VENHTS2001","text":"VENHTS2001 module processes 2001 NHTS publicly available datasets create household dataset augmented public data transport supply. built VENHTS2001 package can used modules support model estimation. example, VEHouseholdTravel uses data output VENHTS2001 package estimate various travel demand models. instances second round dependencies, models estimated using data VENHTS2001 package used estimation additional models, example VEPowertrainsAndFuels module. complete build VE, packages built, order package building needs cognizant dependencies – packages functions, model objects, datasets required order estimate models need built first.general approach shown :sequential modularized approach, data processing contained one package, data used support estimation several modules, lends well incorporating updated datasets. case, alternative versions NHTS might substituted 2001 NHTS, local household travel survey used place NHTS, long output format currently used VENHTS2001 package conformed .development requirements :method select different household travel source data package build process.documented approach developing alternative household travel survey source data correct format.NHTS 2009 NHTS 2017 packages consistent NHTS 2001 package allow substitution newer versions NHTS.","code":"* VENHTS2001\n  + Make2001NHTSDataset: process NHTS data and add FHWA HPMS and FTA NTD\n  + Creates NHTS data frame on package build\n* VEHouseholdTravel\n  + CalculateAltModeTrips: estimates models of household transit trips, walk trips, and bike trips\n  + CalculateHouseholdDvmt: estimates models of household average daily vehicle miles traveled\n  + (other components in VEHouseholdTravel also estimate models with VENHTS2001)\n  + Creates estimated model objects on package build\n* VEHouseholdVehicles\n  + AssignDrivers: estimates model to assign drivers by age group to each household\n  + (other components in VEHouseholdVehicles also estimate models with VENHTS2001)\n  + Creates estimated model objects on package build\n* VEPowertrainsAndFuels\n  + AssignHhVehiclePowertrain: \n    - estimates model to assign a powertrain type to each household vehicle. \n    - uses the VEHouseholdTravel::DvmtModel_ls, which is based on VENHTS2001, for estimation\n    - Creates estimated model objects on package build\n  "},{"path":"ve-estimation.html","id":"modules-using-confidential-nhts-data","chapter":"13 Estimation in VisionEval","heading":"13.2.2 Modules using confidential NHTS data","text":"use publicly available data model estimation, data estimation scripts included modules freely available model users, attractive aspect VE.new package developed using NHTS 2009, VETravelDemandMM, doesn’t fully conform ideal. Estimation package incorporates neighborhood land use characteristics around NHTS households taken EPA’s Smart Location Database. However, connection NHTS SLD requires data item describing Census block group household, confidential data item provided researchers FHWA following completion non-disclosure process.case, estimated model objects can included package estimation data included, preventing easy re-estimation models developers.development requirements :Consider alternative methods attributing NHTS neighborhood land use variables might require confidentiality requirements.","code":""},{"path":"ve-estimation.html","id":"modules-imported-from-rpat","chapter":"13 Estimation in VisionEval","heading":"13.2.3 Modules imported from RPAT","text":"VERPAT VE implementation RPAT model, originally developed part SHRP 2 C16 project. RPAT model converted run set VE modules, modules incorporate model estimation package build. cases, RPAT used models imported GreenSTEP model, later incorporated VE form basis many models still used , example, VEHouseholdTravel module.VERPAT maintained, benefit re-establish connections back model estimation processes used modules VEHouseholdTravel VEHouseholdVehiclesThe development requirements :Identify specific connections VERPAT models locations models now estimated VE modules.Replace hardcoded models imported model objects currently used VERPAT modules references models estimated build VE. allow, example, connections updated NHTS data /local household travel survey data discussed .","code":""},{"path":"ve-estimation.html","id":"modules-estimated-with-local-data","chapter":"13 Estimation in VisionEval","heading":"13.2.4 Modules estimated with local data","text":"cases, locally specific data used develop model inputs estimate models incorporated modules. One example use Census Public User Microdata Sample (PUMS) Oregon, used estimate income models develop probability distributions used VESimHouseholds package.Ideally, implementation VE model another state replace Oregon data local dataset. data also 2001, ideally replaced recent version PUMS data, example American Community Survey (ACS) 5 year data alternative local data source.development requirements :Documentation approach replace 2001 Oregon data alternative data sourceConsider development separate package module VESimHouseholds process selected state region’s ACS data via automatic download API call source data.","code":""},{"path":"ve-estimation.html","id":"modules-estimated-with-other-types-of-data","chapter":"13 Estimation in VisionEval","heading":"13.2.5 Modules estimated with other types of data","text":"Several data sources used development modules, particularly deal vehicle operations congestion. generally reasonably well documented estimation process traceable data included modules estimation script final model object. estimation work considered updating model users local conditions sufficiently different covered original estimation date, time original estimation data aged superseded.development requirements :refine cataloging estimation work chapter clearly identify data source vintage.Identify public availability () data source whether recent data already available.","code":""},{"path":"ve-estimation.html","id":"ve-modules-with-estimation","chapter":"13 Estimation in VisionEval","heading":"13.3 VE Modules With Estimation","text":"table lists VE modules currently exist whether include estimation. Several modules, notably original recently developed household travel modules (VEHouseholdTravel VETravelDemandMM) contain high number estimated models. Several modules include estimation.section describes estimation takes places module.","code":""},{"path":"ve-estimation.html","id":"venhts2001","chapter":"13 Estimation in VisionEval","heading":"13.3.1 VENHTS2001","text":"2001 NHTS data package package processes 2001 NHTS publically available datasets create household dataset used model estimations. NHTS data augmented transportation service data.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"make2001nhtsdataset","chapter":"13 Estimation in VisionEval","heading":"13.3.1.1 Make2001NHTSDataset","text":"module creates data frame data publically available data 2001 National Household Travel Survey (NHTS) augmented data metropolitan area freeway supply transit supply. package produces data frame values household.Data sources include NHTS 2001, FHWA HPMS, FTA NTDModel types include Tabulation data householdEstimation uses following methods: Package buildDocumented R Script , md file producedThe models model step :Model name: Processed NHTS 2001 Dataset\nModel type: Tabulation data household\nEstimation data: inst/extdata/highway_statistics.csv, inst/extdata/uza_bus_eq_rev_mi.csv, NHTS data downloaded “https://raw.githubusercontent.com/gregorbj/NHTS2001/master/data” already present data-raw\nEstimation method: Package build\nEstimation script: R/Make2001NHTSDataset.r\nModel object: data-raw/Dt_df.rda, data-raw/Hh_df.rda, data-raw/Per_df.rda, data-raw/ToursByHh_df.Rda, data-raw/Veh_df.rda\nNotes: Original data housed another repository downloaded processed already done , checks presence processed files data-raw initiating new download. outputs module used estimation many modules (notes VE2001 Estimation data field)\nModel type: Tabulation data householdEstimation data: inst/extdata/highway_statistics.csv, inst/extdata/uza_bus_eq_rev_mi.csv, NHTS data downloaded “https://raw.githubusercontent.com/gregorbj/NHTS2001/master/data” already present data-rawEstimation method: Package buildEstimation script: R/Make2001NHTSDataset.rModel object: data-raw/Dt_df.rda, data-raw/Hh_df.rda, data-raw/Per_df.rda, data-raw/ToursByHh_df.Rda, data-raw/Veh_df.rdaNotes: Original data housed another repository downloaded processed already done , checks presence processed files data-raw initiating new download. outputs module used estimation many modules (notes VE2001 Estimation data field)","code":""},{"path":"ve-estimation.html","id":"vehouseholdtravel","chapter":"13 Estimation in VisionEval","heading":"13.3.2 VEHouseholdTravel","text":"VisionEval module calculating household vehicle travel travel modes (public transit, walk, bike)\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"applydvmtreductions","chapter":"13 Estimation in VisionEval","heading":"13.3.2.1 ApplyDvmtReductions","text":"module applies computed proportional reductions household DVMT due application travel demand management programs diversion single-occupant vehicle travel bicycles, electric bicycles, light-weight vehicles. also computes added bike trips due diversion.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculatealtmodetrips","chapter":"13 Estimation in VisionEval","heading":"13.3.2.2 CalculateAltModeTrips","text":"module calculates household transit trips, walk trips, bike trips. models sensitive household DVMT run household DVMT adjustments (e.g. account cost household DVMT) made.Data sources include NHTS 2001Model types include HurdleEstimation uses following methods: Package buildDocumented inst/module_docs/CalculateAltModeTrips.mdThe models model step :Model name: Metropolitan Walk Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Nonmetropolitan Walk Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Metropolitan Bike Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Nonmetropolitan Bike Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Metropolitan Transit Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Nonmetropolitan Transit Trip Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateAltModeTrips.R\nModel object: data/AltModeModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateAltModeTrips.RModel object: data/AltModeModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"calculatehouseholddvmt","chapter":"13 Estimation in VisionEval","heading":"13.3.2.3 CalculateHouseholdDvmt","text":"module models household average daily vehicle miles traveled function household characteristics, vehicle ownership, attributes neighborhood metropolitan area household residesData sources include NHTS 2001Model types include Linear regressionEstimation uses following methods: Package buildDocumented inst/module_docs/CalculateHouseholdDvmt.mdThe models model step :Model name: metropolitan household power-transformed simulated average DVMT linear model\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateHouseholdDvmt.R\nModel object: data/DvmtModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travel\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateHouseholdDvmt.RModel object: data/DvmtModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travelModel name: non-metropolitan household power-transformed simulated average DVMT linear model\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateHouseholdDvmt.R\nModel object: data/DvmtModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travel\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateHouseholdDvmt.RModel object: data/DvmtModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travelModel name: 95th percentile DVMT model metropolitan households\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateHouseholdDvmt.R\nModel object: data/DvmtModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travel\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateHouseholdDvmt.RModel object: data/DvmtModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travelModel name: 95th percentile DVMT model non-metropolitan households\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateHouseholdDvmt.R\nModel object: data/DvmtModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travel\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateHouseholdDvmt.RModel object: data/DvmtModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following multistep process estimates series models simulate annual travel survey day travel","code":""},{"path":"ve-estimation.html","id":"calculatevehicletrips","chapter":"13 Estimation in VisionEval","heading":"13.3.2.4 CalculateVehicleTrips","text":"module calculates average daily vehicle trips households consistent household DVMT. average trip length model applied estimate average length household trips reflecting characteristics household place live. average trip length divided average household DVMT get estimate average number daily vehicle trips.Data sources include NHTS 2001Model types include Linear regressionEstimation uses following methods: Package buildDocumented inst/module_docs/CalculateVehicleTrips.mdThe models model step :Model name: metropolitan model average vehicle trip length\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateVehicleTrips.R\nModel object: data/VehTrpLenModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step process\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateVehicleTrips.RModel object: data/VehTrpLenModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step processModel name: non-metropolitan model average vehicle trip length\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateVehicleTrips.R\nModel object: data/VehTrpLenModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step process\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateVehicleTrips.RModel object: data/VehTrpLenModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step process","code":""},{"path":"ve-estimation.html","id":"divertsovtravel","chapter":"13 Estimation in VisionEval","heading":"13.3.2.5 DivertSovTravel","text":"module reduces household single-occupant vehicle (SOV) travel achieve goals inputs model. purpose module enable users ‘’ analysis potential light-weight vehicles (e.g. bicycles, electric bikes, electric scooters) infrastructure support use reduce SOV travelData sources include NHTS 2001Model types include Linear regressionEstimation uses following methods: Package buildDocumented inst/module_docs/DivertSovTravel.mdThe models model step :Model name: Model Proportion DVMT Qualifying SOV Tours\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/DivertSovTravel.R\nModel object: data/SovModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step process\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/DivertSovTravel.RModel object: data/SovModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package. final linear regression model estimated following two step processModel name: Metropolitan Area Model Average Length Trips Qualifying SOV Tours\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/DivertSovTravel.R\nModel object: data/SovModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/DivertSovTravel.RModel object: data/SovModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Non-Metropolitan Area Model Average Length Trips Qualifying SOV Tours\nModel type: Linear regression\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/DivertSovTravel.R\nModel object: data/SovModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Linear regressionEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/DivertSovTravel.RModel object: data/SovModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"calculateinduceddemand-1","chapter":"13 Estimation in VisionEval","heading":"13.3.2.6 CalculateInducedDemand","text":"module calculates average daily vehicle miles traveld households. also calculates average DVMT, daily consumption fuel (gallons), average daily Co2 equivalent greenhouse emissions vehicles.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculatepolicyvmt-1","chapter":"13 Estimation in VisionEval","heading":"13.3.2.7 CalculatePolicyVmt","text":"module models adjusts VMT policies entered scenario. outputs form module contains ‘Policy’ suffix namesData sources include NHTS 2001Model types include Linear regressionEstimation uses following methods: Parameters hardcoded scriptDocumented R Script , md file producedThe models model step :Model name: Metropolitan light vehicle ownership model\nModel type: Linear regression\nEstimation data: NA\nEstimation method: Parameters hardcoded script\nEstimation script: R/CalculatePolicyVmt.R\nModel object: data/LtVehOwnModels_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData\nModel type: Linear regressionEstimation data: NAEstimation method: Parameters hardcoded scriptEstimation script: R/CalculatePolicyVmt.RModel object: data/LtVehOwnModels_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RDataModel name: Non-Metropolitan light vehicle ownership model\nModel type: Linear regression\nEstimation data: NA\nEstimation method: Parameters hardcoded script\nEstimation script: R/CalculatePolicyVmt.R\nModel object: data/LtVehOwnModels_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData\nModel type: Linear regressionEstimation data: NAEstimation method: Parameters hardcoded scriptEstimation script: R/CalculatePolicyVmt.RModel object: data/LtVehOwnModels_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RDataModel name: Average single-occupant vehicle (SOV) travel proportion model\nModel type: Linear regression\nEstimation data: NA\nEstimation method: Parameters hardcoded script\nEstimation script: R/CalculatePolicyVmt.R\nModel object: data/AveSovPropModels_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData\nModel type: Linear regressionEstimation data: NAEstimation method: Parameters hardcoded scriptEstimation script: R/CalculatePolicyVmt.RModel object: data/AveSovPropModels_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData","code":""},{"path":"ve-estimation.html","id":"calculatetraveldemand-1","chapter":"13 Estimation in VisionEval","heading":"13.3.2.8 CalculateTravelDemand","text":"module calculates average daily vehicle miles traveld households. also calculates average DVMT, daily consumption fuel (gallons), average daily Co2 equivalent greenhouse emissions vehicles.Data sources include NHTS 2001 ?Model types include Linear regression Tabulation data vehicle vintageEstimation uses following methods: Parameters hardcoded script Data file data-raw/PhevModelData_ls.rdaDocumented R Script , md file producedThe models model step :Model name: DVMT assignment models metropolitan households (Ave DVMT, 95th percentile DVMT, max DVMT)\nModel type: Linear regression\nEstimation data: NA\nEstimation method: Parameters hardcoded script\nEstimation script: R/CalculateTravelDemand.R\nModel object: data/DvmtLmModels_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData\nModel type: Linear regressionEstimation data: NAEstimation method: Parameters hardcoded scriptEstimation script: R/CalculateTravelDemand.RModel object: data/DvmtLmModels_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RDataModel name: DVMT assignment models non-metropolitan households (Ave DVMT, 95th percentile DVMT, max DVMT)\nModel type: Linear regression\nEstimation data: NA\nEstimation method: Parameters hardcoded script\nEstimation script: R/CalculateTravelDemand.R\nModel object: data/DvmtLmModels_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RData\nModel type: Linear regressionEstimation data: NAEstimation method: Parameters hardcoded scriptEstimation script: R/CalculateTravelDemand.RModel object: data/DvmtLmModels_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models generally GreenSTEP models estimated NHTS 2001 data, See inst/extdata/GreenSTEP_.RDataModel name: PHEV/HEV model: fixed characteristics files PHEVs HEVs RPAT model\nModel type: Tabulation data vehicle vintage\nEstimation data: data-raw/PhevModelData_ls.rda\nEstimation method: Data file data-raw/PhevModelData_ls.rda\nEstimation script: R/CalculateTravelDemand.R\nModel object: data/PhevModelData_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Data file scenario input GreenSTEP\nModel type: Tabulation data vehicle vintageEstimation data: data-raw/PhevModelData_ls.rdaEstimation method: Data file data-raw/PhevModelData_ls.rdaEstimation script: R/CalculateTravelDemand.RModel object: data/PhevModelData_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Data file scenario input GreenSTEP","code":""},{"path":"ve-estimation.html","id":"calculatetraveldemandfuture-1","chapter":"13 Estimation in VisionEval","heading":"13.3.2.9 CalculateTravelDemandFuture","text":"module calculates average daily vehicle miles traveld households. also calculates average DVMT, daily consumption fuel (gallons), average daily Co2 equivalent greenhouse emissions vehicles.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"initialize","chapter":"13 Estimation in VisionEval","heading":"13.3.2.10 Initialize","text":"module processes optional roadway DVMT operations inputs. optional roadway DVMT inputs allow users specify base year roadway DVMT vehicle type DVMT type splits across road classes. data provided, model calculates values based default data.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"loaddefaultvalues","chapter":"13 Estimation in VisionEval","heading":"13.3.2.11 LoadDefaultValues","text":"module processes default carbon intensity electricity consumption countiesData sources include ?Model types include Tabulation dataEstimation uses following methods: Data file inst/extdata/power_co2.csvDocumented R Script , md file producedThe models model step :Model name: C02 Electricity\nModel type: Tabulation data\nEstimation data: inst/extdata/power_co2.csv\nEstimation method: Data file inst/extdata/power_co2.csv\nEstimation script: R/LoadDefaultValues.R\nModel object: data/TravelDemandDefaults_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Uses deafult Power data, included inst/extdata fold\nModel type: Tabulation dataEstimation data: inst/extdata/power_co2.csvEstimation method: Data file inst/extdata/power_co2.csvEstimation script: R/LoadDefaultValues.RModel object: data/TravelDemandDefaults_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Uses deafult Power data, included inst/extdata fold","code":""},{"path":"ve-estimation.html","id":"vehouseholdvehicles","chapter":"13 Estimation in VisionEval","heading":"13.3.3 VEHouseholdVehicles","text":"Vehicle ownership simulation package VisionEval package contains modules work VisionEval framework calculate vehicle ownership adjust ownership based participation carsharing programs\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"assigndrivers","chapter":"13 Estimation in VisionEval","heading":"13.3.3.1 AssignDrivers","text":"module assigns drivers age group household function numbers persons workers age group, household income, land use characteristics, public transit availability. Users may specify relative driver licensing rate relative model estimation data year order account observed projected changes licensing rates.Data sources include NHTS 2001Model types include Binary LogitEstimation uses following methods: Package buildDocumented inst/module_docs/AssignDrivers.mdThe models model step :Model name: Metropolitan Driver (license) Binary Model\nModel type: Binary Logit\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/AssignDrivers.R\nModel object: data/DriverModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Binary LogitEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/AssignDrivers.RModel object: data/DriverModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Non-metropolitan Driver (license) Binary Model\nModel type: Binary Logit\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/AssignDrivers.R\nModel object: data/DriverModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Binary LogitEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/AssignDrivers.RModel object: data/DriverModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"assignvehicleage","chapter":"13 Estimation in VisionEval","heading":"13.3.3.2 AssignVehicleAge","text":"module assigns vehicle ages household vehicle. Vehicle age assigned function vehicle type (auto light truck), household income, assumed mean vehicle age vehicle type Azone. Car service vehicles assigned age based input assumptions distinction vehicle type.Data sources include NHTS 2001Model types include Joint Probability DistributionsEstimation uses following methods: Package buildDocumented inst/module_docs/AssignVehicleAge.mdThe models model step :Model name: Joint probability distribution\nModel type: Joint Probability Distributions\nEstimation data: VE2001NHTS::Hh_df\nVE2001NHTS::Veh_df\nEstimation method: Package build\nEstimation script: R/AssignVehicleAge.R\nModel object: data/VehicleAgeModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Joint Probability DistributionsEstimation data: VE2001NHTS::Hh_df\nVE2001NHTS::Veh_dfEstimation method: Package buildEstimation script: R/AssignVehicleAge.RModel object: data/VehicleAgeModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"assignvehicleownership","chapter":"13 Estimation in VisionEval","heading":"13.3.3.3 AssignVehicleOwnership","text":"module determines number vehicles owned leased household function household characteristics, land use characteristics, transportation system characteristics.Data sources include NHTS 2001Model types include HurdleEstimation uses following methods: Package buildDocumented inst/module_docs/AssignVehicleOwnership.mdThe models model step :Model name: Metropolitan Binary Logit Vehicle Ownership Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/AssignVehicleOwnership.R\nModel object: data/AutoOwnModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/AssignVehicleOwnership.RModel object: data/AutoOwnModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.Model name: Non-metropolitan Binary Logit Vehicle Ownership Model\nModel type: Hurdle\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/AssignVehicleOwnership.R\nModel object: data/AutoOwnModels_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: HurdleEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/AssignVehicleOwnership.RModel object: data/AutoOwnModels_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"assignvehicletype","chapter":"13 Estimation in VisionEval","heading":"13.3.3.4 AssignVehicleType","text":"module identifies many household vehicles light trucks many automobiles. Light trucks include pickup trucks, sport utility vehicles, vans, vehicle classified passenger car. Automobiles vehicles classified passenger cars.Data sources include NHTS 2001Model types include Binary LogitEstimation uses following methods: Package buildDocumented inst/module_docs/AssignVehicleType.mdThe models model step :Model name: Truck Car binary logit\nModel type: Binary Logit\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/AssignVehicleType.R\nModel object: data/VehicleTypeModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Binary LogitEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/AssignVehicleType.RModel object: data/VehicleTypeModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"calculatevehicleowncost","chapter":"13 Estimation in VisionEval","heading":"13.3.3.5 CalculateVehicleOwnCost","text":"module calculates average vehicle ownership cost vehicle based vehicle type age using data American Automobile Association (AAA).Data sources include AAA CostsModel types include Log-Linear DepreciationEstimation uses following methods: Package buildDocumented inst/module_docs/CalculateVehicleOwnCost.mdThe models model step :Model name: (log) Linear Age-Depreciation model\nModel type: Log-Linear Depreciation\nEstimation data: inst/extdata/aaa_vehicle_ownership_costs.txt\nEstimation method: Package build\nEstimation script: R/CalculateVehicleOwnCost.R\nModel object: data/VehOwnCost_ls.rda\nNotes: Uses AAA car ownership depreciation model data\nModel type: Log-Linear DepreciationEstimation data: inst/extdata/aaa_vehicle_ownership_costs.txtEstimation method: Package buildEstimation script: R/CalculateVehicleOwnCost.RModel object: data/VehOwnCost_ls.rdaNotes: Uses AAA car ownership depreciation model data","code":""},{"path":"ve-estimation.html","id":"createvehicletable","chapter":"13 Estimation in VisionEval","heading":"13.3.3.6 CreateVehicleTable","text":"module creates vehicle table populates household ID geography fields.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"adjustvehicleownership","chapter":"13 Estimation in VisionEval","heading":"13.3.3.7 AdjustVehicleOwnership","text":"module adjusts household vehicle ownership based comparison cost owning vehicle per mile travel compared cost per mile using car service level service high. determination whether car services substituted ownership also depends input assumptions regarding average likelihood owner substitute car services household vehicle.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"velanduse","chapter":"13 Estimation in VisionEval","heading":"13.3.4 VELandUse","text":"Land Use simulation package VisionEval package contains number modules work VisionEval framework calculate land use characteristics.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"assigncarsvcavailability","chapter":"13 Estimation in VisionEval","heading":"13.3.4.1 AssignCarSvcAvailability","text":"module reads user specified data assigns car service availability Bzones.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"assigndemandmanagement","chapter":"13 Estimation in VisionEval","heading":"13.3.4.2 AssignDemandManagement","text":"module assigns demand management program participation households workers.Data sources include NHTS 2001 default data specified CSVModel types include ProportionsEstimation uses following methods: Package buildDocumented inst/module_docs/AssignDemandManagement.mdThe models model step :Model name: Proportional VMT Reduction Estimation\nModel type: Proportions\nEstimation data: VE2001NHTS::Hh_df\nVE2001NHTS::HhTours_df\ninst/extdata/tdm_parameters.csv\nEstimation method: Package build\nEstimation script: R/AssignDemandManagement.R\nModel object: data/TdmModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package default user specifications\nModel type: ProportionsEstimation data: VE2001NHTS::Hh_df\nVE2001NHTS::HhTours_df\ninst/extdata/tdm_parameters.csvEstimation method: Package buildEstimation script: R/AssignDemandManagement.RModel object: data/TdmModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package default user specifications","code":""},{"path":"ve-estimation.html","id":"assigndevtypes","chapter":"13 Estimation in VisionEval","heading":"13.3.4.3 AssignDevTypes","text":"module assigns households development types: Urban (located within urbanized area boundary) Rural (located outside urbanized area boundary).module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"assignloctypes","chapter":"13 Estimation in VisionEval","heading":"13.3.4.4 AssignLocTypes","text":"module assigns households location types: Urban (located within urbanized area boundary), Town (located smaller urban area enough population qualify urbanized area), Rural (located area characterized low density dispersed development).module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"assignparkingrestrictions","chapter":"13 Estimation in VisionEval","heading":"13.3.4.5 AssignParkingRestrictions","text":"module identifies parking restrictions prices affecting households residences, workplaces, places likely visit urban area.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculate4dmeasures","chapter":"13 Estimation in VisionEval","heading":"13.3.4.6 Calculate4DMeasures","text":"module calculates several 4D measures Bzone including density, diversity (.e. mixing land uses), transportation network design, destination accessibilityThis module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculateurbanmixmeasures","chapter":"13 Estimation in VisionEval","heading":"13.3.4.7 CalculateUrbanMixMeasures","text":"module calculates urban mixed-use measure based 2001 National Household Travel Survey measure tract level urban/rural indicatorData sources include NHTS 2001Model types include Binary LogitEstimation uses following methods: Package buildDocumented inst/module_docs/CalculateUrbanMixMeasure.mdThe models model step :Model name: Probability household urban mixed-use (binary logit)\nModel type: Binary Logit\nEstimation data: VE2001NHTS::Hh_df\nEstimation method: Package build\nEstimation script: R/CalculateUrbanMixMeasure.R\nModel object: data/UrbanMixModel_ls.rda\nNotes: Sources estimation data VE NHTS 2001 package.\nModel type: Binary LogitEstimation data: VE2001NHTS::Hh_dfEstimation method: Package buildEstimation script: R/CalculateUrbanMixMeasure.RModel object: data/UrbanMixModel_ls.rdaNotes: Sources estimation data VE NHTS 2001 package.","code":""},{"path":"ve-estimation.html","id":"locateemployment","chapter":"13 Estimation in VisionEval","heading":"13.3.4.8 LocateEmployment","text":"module places employment Bzones based input assumptions employment type BzoneThis module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"predicthousing","chapter":"13 Estimation in VisionEval","heading":"13.3.4.9 PredictHousing","text":"module assigns housing type, either single-family (SF) multifamily (MF) regular households based respective supplies SF MF dwelling units housing market household assigned (.e. Azone household assigned ) household characteristics.Data sources include PUMS (processed VESimHouseholds)Model types include Binomial Logit & IPFEstimation uses following methods: Package buildDocumented inst/module_docs/PredictHousing.mdThe models model step :Model name: Binary logit single family multifamily dwelling IPF balance results\nModel type: Binomial Logit & IPF\nEstimation data: VESimHouseholds::Hh_df\nEstimation method: Package build\nEstimation script: R/PredictHousing.R\nModel object: data/HouseTypeModel_ls.rda\nNotes: Sources estimation Census PUMS prepared VESimHousehold package\nModel type: Binomial Logit & IPFEstimation data: VESimHouseholds::Hh_dfEstimation method: Package buildEstimation script: R/PredictHousing.RModel object: data/HouseTypeModel_ls.rdaNotes: Sources estimation Census PUMS prepared VESimHousehold package","code":""},{"path":"ve-estimation.html","id":"calculatebaseplacetypes-1","chapter":"13 Estimation in VisionEval","heading":"13.3.4.10 CalculateBasePlaceTypes","text":"module calculates place types households firms base year.Data sources include NHTS 2001Model types include Multinomial LogitEstimation uses following methods: Data file data-raw/HhAllocationModelCoeff.rdaDocumented R Script , md file producedThe models model step :Model name: MNL model household allocation place types based household structures income\nModel type: Multinomial Logit\nEstimation data: data-raw/HhAllocationModelCoeff.rda\nEstimation method: Data file data-raw/HhAllocationModelCoeff.rda\nEstimation script: R/CalculateBasePlaceTypes.R\nModel object: data/HhAllocationModelCoeff_df.rda\nNotes: module estimated model parameters, model estimated development RPAT transferred model object saved data-raw.\nModel type: Multinomial LogitEstimation data: data-raw/HhAllocationModelCoeff.rdaEstimation method: Data file data-raw/HhAllocationModelCoeff.rdaEstimation script: R/CalculateBasePlaceTypes.RModel object: data/HhAllocationModelCoeff_df.rdaNotes: module estimated model parameters, model estimated development RPAT transferred model object saved data-raw.","code":""},{"path":"ve-estimation.html","id":"calculatefutureplacetypes-1","chapter":"13 Estimation in VisionEval","heading":"13.3.4.11 CalculateFuturePlaceTypes","text":"module calculates place types households firms future year.Data sources include NHTS 2001Model types include Multinomial LogitEstimation uses following methods: Data file data-raw/HhAllocationModelCoeff.rdaDocumented R Script , md file producedThe models model step :Model name: MNL model household allocation place types based household structures income\nModel type: Multinomial Logit\nEstimation data: data-raw/HhAllocationModelCoeff.rda\nEstimation method: Data file data-raw/HhAllocationModelCoeff.rda\nEstimation script: R/CalculateFuturePlaceTypes.R\nModel object: data/HhAllocationModelCoeff_df.rda\nNotes: module estimated model parameters, model estimated development RPAT transferred model object saved data-raw.\nModel type: Multinomial LogitEstimation data: data-raw/HhAllocationModelCoeff.rdaEstimation method: Data file data-raw/HhAllocationModelCoeff.rdaEstimation script: R/CalculateFuturePlaceTypes.RModel object: data/HhAllocationModelCoeff_df.rdaNotes: module estimated model parameters, model estimated development RPAT transferred model object saved data-raw.","code":""},{"path":"ve-estimation.html","id":"vepowertrainsandfuels","chapter":"13 Estimation in VisionEval","heading":"13.3.5 VEPowertrainsAndFuels","text":"VisionEval module calculating energy consumption emissions transportation. Includes modules inputting energy consumption characteristics different vehicle technologies, carbon intensities different fuels, functions calculating energy consumption emissions household, commercial, public transit travel.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"assignhhvehiclepowertrain","chapter":"13 Estimation in VisionEval","heading":"13.3.5.1 AssignHhVehiclePowertrain","text":"module assigns powertrain type household vehicle. powertrain types internal combustion engine vehicle (ICEV), hybrid electric vehicle (HEV), plug-hybrid electric vehicle (PHEV), battery electric vehicles (BEV). module also assigns related characteristics household vehiclesData sources include NHTS 2001Model types include lookup tablesEstimation uses following methods: Package buildDocumented inst/module_docs/AssignHhVehiclePowertrain.mdThe models model step :Model name: calculate proportions PHEV vehicle travel powered electricity vs. fuel\nModel type: lookup tables\nEstimation data: VEHouseholdTravel::DvmtModel_ls\nEstimation method: Package build\nEstimation script: R/AssignHhVehiclePowertrain.R\nModel object: data/PhevElecProp_ls.rda\nNotes: Sources models estimated VEHouseholdTravel module estimated using data VE NHTS 2001 package\nModel type: lookup tablesEstimation data: VEHouseholdTravel::DvmtModel_lsEstimation method: Package buildEstimation script: R/AssignHhVehiclePowertrain.RModel object: data/PhevElecProp_ls.rdaNotes: Sources models estimated VEHouseholdTravel module estimated using data VE NHTS 2001 package","code":""},{"path":"ve-estimation.html","id":"calculatecarbonintensity","chapter":"13 Estimation in VisionEval","heading":"13.3.5.2 CalculateCarbonIntensity","text":"module calculates average carbon intensity fuels (grams CO2e per megajoule) transportation mode vehicle type.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"initialize-1","chapter":"13 Estimation in VisionEval","heading":"13.3.5.3 Initialize","text":"module processes vehicle fuel characteristics files model users may optionally supply. files supplied, modules package compute carbon intensities vehicle travel use user-supplied data instead datasets part package (see LoadDefaultValues.R script)module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"loaddefaultvalues-1","chapter":"13 Estimation in VisionEval","heading":"13.3.5.4 LoadDefaultValues","text":"Powertrain fuels data complex datasets used VisionEval models develop. simplify matters user, default datasets included package processed package built. user can work simpler set input files develop scenarios.Data sources include Described text files inst/extdataModel types include Tabulation dataEstimation uses following methods: Data files inst/extdata/power_co2.csvDocumented inst/module_docs/LoadDefaultValues.mdThe models model step :Model name: Default data powertrain fuels data\nModel type: Tabulation data\nEstimation data: NA\nEstimation method: Data files inst/extdata/power_co2.csv\nEstimation script: R/LoadDefaultValues.R\nModel object: data/PowertrainFuelDefaults_ls.rda\nNotes: Processes large set default data set model inputs\nModel type: Tabulation dataEstimation data: NAEstimation method: Data files inst/extdata/power_co2.csvEstimation script: R/LoadDefaultValues.RModel object: data/PowertrainFuelDefaults_ls.rdaNotes: Processes large set default data set model inputs","code":""},{"path":"ve-estimation.html","id":"vesimhouseholds","chapter":"13 Estimation in VisionEval","heading":"13.3.6 VESimHouseholds","text":"Household simulation package VisionEval package contain number modules work VisionEval framework simulate households characteristics.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"assignlifecycle","chapter":"13 Estimation in VisionEval","heading":"13.3.6.1 AssignLifeCycle","text":"module assigns life cycle category household. life cycle categories similar, , established NHTS. module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"createhouseholds-1","chapter":"13 Estimation in VisionEval","heading":"13.3.6.2 CreateHouseholds","text":"module creates  Household table datastore populates table datasets characterizing simulated households.Data sources include Census PUMS, 2000 Census data included packageModel types include Tabulation dataEstimation uses following methods: Package BuildDocumented inst/module_docs/CreateHouseholds.mdThe models model step :Model name: Probability matrix person age group one several hundred regular household types\nModel type: Tabulation data\nEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csv\nEstimation method: Package Build\nEstimation script: R/CreateHouseholds.R, R/CreateEstimationDatasets.R\nModel object: data/HtProb_HtAp.rda\nNotes: module develops table probabilities processed two scripts Census PUMS data. data package Oregon.\nModel type: Tabulation dataEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csvEstimation method: Package BuildEstimation script: R/CreateHouseholds.R, R/CreateEstimationDatasets.RModel object: data/HtProb_HtAp.rdaNotes: module develops table probabilities processed two scripts Census PUMS data. data package Oregon.","code":""},{"path":"ve-estimation.html","id":"predictincome-2","chapter":"13 Estimation in VisionEval","heading":"13.3.6.3 PredictIncome","text":"module predicts income simulated household given number workers age group average per capita income Azone household resides.Data sources include Census PUMS, 2000 Census data included packageModel types include Linear regressionEstimation uses following methods: Package BuildDocumented inst/module_docs/PredictIncome.mdThe models model step :Model name: Household income linear model\nModel type: Linear regression\nEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csv\nEstimation method: Package Build\nEstimation script: R/PredictIncome.R, R/CreateEstimationDatasets.R\nModel object: data/HHIncModel_ls.rda\nNotes: module develops regression models using data processed separate module script Census PUMS data. data package Oregon.\nModel type: Linear regressionEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csvEstimation method: Package BuildEstimation script: R/PredictIncome.R, R/CreateEstimationDatasets.RModel object: data/HHIncModel_ls.rdaNotes: module develops regression models using data processed separate module script Census PUMS data. data package Oregon.Model name: Group Quarters households income linear model\nModel type: Linear regression\nEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csv\nEstimation method: Package Build\nEstimation script: R/PredictIncome.R, R/CreateEstimationDatasets.R\nModel object: data/GQIncModel_ls.rda\nNotes: module develops regression models using data processed separate module script Census PUMS data. data package Oregon.\nModel type: Linear regressionEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csvEstimation method: Package BuildEstimation script: R/PredictIncome.R, R/CreateEstimationDatasets.RModel object: data/GQIncModel_ls.rdaNotes: module develops regression models using data processed separate module script Census PUMS data. data package Oregon.","code":""},{"path":"ve-estimation.html","id":"predictworkers-1","chapter":"13 Estimation in VisionEval","heading":"13.3.6.4 PredictWorkers","text":"module assigns workers age households noninstitutional group quarters population. simple model predicts workers function age composition household members.Data sources include Census PUMS, 2000 Census data included packageModel types include Tabulation dataEstimation uses following methods: Package BuildDocumented inst/module_docs/PredictWorkers.mdThe models model step :Model name: Probability matrix person age group specified household type worker\nModel type: Tabulation data\nEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csv\nEstimation method: Package Build\nEstimation script: R/PredictWokers.R, R/CreateEstimationDatasets.R\nModel object: data/PropHhWkr_HtAg.rda\nNotes: module develops table probabilities processed two scripts Census PUMS data. data package Oregon.\nModel type: Tabulation dataEstimation data: inst/extdata/pums_households.csv, inst/extdata/pums_persons.csvEstimation method: Package BuildEstimation script: R/PredictWokers.R, R/CreateEstimationDatasets.RModel object: data/PropHhWkr_HtAg.rdaNotes: module develops table probabilities processed two scripts Census PUMS data. data package Oregon.","code":""},{"path":"ve-estimation.html","id":"vesimlanduse","chapter":"13 Estimation in VisionEval","heading":"13.3.7 VESimLandUse","text":"module simulates various land use characteristics\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"assigncarsvcavailability-1","chapter":"13 Estimation in VisionEval","heading":"13.3.7.1 AssignCarSvcAvailability","text":"module assigns car service availability levels (Low, High) Bzones households.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"assigndemandmanagement-1","chapter":"13 Estimation in VisionEval","heading":"13.3.7.2 AssignDemandManagement","text":"module assigns demand management program participation households workers.Data sources include NHTS 2001Model types include ProportionsEstimation uses following methods: Imports VELandUseDocumented inst/module_docs/AssignDemandManagement.mdThe models model step :Model name: Proportional VMT Reduction Estimation\nModel type: Proportions\nEstimation data: VELandUse::TdmModel_ls\nEstimation method: Imports VELandUse\nEstimation script: R/AssignDemandManagement.R\nModel object: NA\nNotes: module estimated model parameters. loads model estimated VELandUse module\nModel type: ProportionsEstimation data: VELandUse::TdmModel_lsEstimation method: Imports VELandUseEstimation script: R/AssignDemandManagement.RModel object: NANotes: module estimated model parameters. loads model estimated VELandUse module","code":""},{"path":"ve-estimation.html","id":"assignparkingrestrictions-1","chapter":"13 Estimation in VisionEval","heading":"13.3.7.3 AssignParkingRestrictions","text":"module identifies parking restrictions prices affecting households residences, workplaces, places likely visit urban area.Data sources include noneModel types include noneEstimation uses following methods: noneDocumented inst/module_docs/AssignParkingRestrictions.mdThe models model step :Model name: Proportional/Average assignment\nModel type: NA\nEstimation data: NA\nEstimation method: NA\nEstimation script: R/AssignParkingRestrictions.R\nModel object: NA\nNotes: module estimated model parameters. Function appplied model deterministic.\nModel type: NAEstimation data: NAEstimation method: NAEstimation script: R/AssignParkingRestrictions.RModel object: NANotes: module estimated model parameters. Function appplied model deterministic.","code":""},{"path":"ve-estimation.html","id":"createsimbzonemodels","chapter":"13 Estimation in VisionEval","heading":"13.3.7.4 CreateSimBzoneModels","text":"module estimates models synthesizing Bzones land use attributes function Azone characteristics well data derived US Environmental Protection Agency’s Smart Location Database (SLD) augmented US Census housing household income data, data National Transit Database.Data sources include VESimLandUseDataModel types include DistributionsEstimation uses following methods: Package buildDocumented inst/module_docs/CreateSimBzoneModels.mdThe models model step :Model name: Distribution profiles\nModel type: Distributions\nEstimation data: VESimLandUseData::SimLandUseData_df\nEstimation method: Package build\nEstimation script: R/CreateSimBzoneModels.R\nModel object: data/SimBzone_ls.rda\ndata/UsaBlkGrpTypes_df.rda\nNotes: modules estimates system models synthesize Bzones attributes funciton Azone characteristics data VESimLandUseData pacakge\nModel type: DistributionsEstimation data: VESimLandUseData::SimLandUseData_dfEstimation method: Package buildEstimation script: R/CreateSimBzoneModels.RModel object: data/SimBzone_ls.rda\ndata/UsaBlkGrpTypes_df.rdaNotes: modules estimates system models synthesize Bzones attributes funciton Azone characteristics data VESimLandUseData pacakge","code":""},{"path":"ve-estimation.html","id":"createsimbzones","chapter":"13 Estimation in VisionEval","heading":"13.3.7.5 CreateSimBzones","text":"module synthesizes Bzones land use attributes function Azone characteristics well data derived US Environmental Protection Agency’s Smart Location Database (SLD) augmented US Census housing household income data, data National Transit Database.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"initialize-2","chapter":"13 Estimation in VisionEval","heading":"13.3.7.6 Initialize","text":"Initialization data checkThis module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"simulate4dmeasures","chapter":"13 Estimation in VisionEval","heading":"13.3.7.7 Simulate4DMeasures","text":"module calculates several 4D measures SimBzone including density, diversity (.e. mixing land uses), pedestrian-orientedn transportation network design.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"simulateemployment","chapter":"13 Estimation in VisionEval","heading":"13.3.7.8 SimulateEmployment","text":"module assign workers SimBzone work locations. worker table created identifies unique worker ID, household ID worker part , SimBzone, Azone, Marea worker job location.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"simulate-housing","chapter":"13 Estimation in VisionEval","heading":"13.3.7.9 Simulate Housing","text":"module assigns housing type, either single-family (SF) multifamily (MF)  regular households based respective supplies SF MF dwelling units housing market household assigned (.e. Azone household assigned ) household characteristics. Data sources include PUMS (processed VESimHouseholds)Model types include Binary search algorithmEstimation uses following methods: Imports VELandUseDocumented inst/module_docs/SimulateHousing.mdThe models model step :Model name: housing choice model estimated ‘PredictHousing’ module ‘VELandUse’ package.\nModel type: Binary search algorithm\nEstimation data: VELandUse::HouseTypeModel_ls\nEstimation method: Imports VELandUse\nEstimation script: R/SimulateHousing.R\nModel object: data/HouseTypeModel_ls.rda\nNotes: Sources models estimated VELandUse module estimated using PUMS data processed VESimHouseholds package\nModel type: Binary search algorithmEstimation data: VELandUse::HouseTypeModel_lsEstimation method: Imports VELandUseEstimation script: R/SimulateHousing.RModel object: data/HouseTypeModel_ls.rdaNotes: Sources models estimated VELandUse module estimated using PUMS data processed VESimHouseholds package","code":""},{"path":"ve-estimation.html","id":"simulateurbanmixmeasure","chapter":"13 Estimation in VisionEval","heading":"13.3.7.10 SimulateUrbanMixMeasure","text":"module simulates urban mixed-use measure based 2001 National Household Travel Survey measure tract level urban/rural indicator.Data sources include NHTS 2001Model types include Binary LogitEstimation uses following methods: Imports VELandUseDocumented inst/module_docs/SimulateUrbanMixMeasure.mdThe models model step :Model name: binary logit model estimated CalculateUrbanMixMeasure module VELandUse package\nModel type: Binary Logit\nEstimation data: VELandUse::UrbanMixModel_ls\nEstimation method: Imports VELandUse\nEstimation script: R/SimulateUrbanMixMeasure.R\nModel object: data/UrbanMixModelSim_ls.rda\nNotes: Sources models estimated VELandUse module estimated using PUMS data processed VESimHouseholds package\nModel type: Binary LogitEstimation data: VELandUse::UrbanMixModel_lsEstimation method: Imports VELandUseEstimation script: R/SimulateUrbanMixMeasure.RModel object: data/UrbanMixModelSim_ls.rdaNotes: Sources models estimated VELandUse module estimated using PUMS data processed VESimHouseholds package","code":""},{"path":"ve-estimation.html","id":"vesimlandusedata","chapter":"13 Estimation in VisionEval","heading":"13.3.8 VESimLandUseData","text":"package processes data several sources produce dataset used estimate several models synthesizing Bzones likely land use attributes.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"makesimbzoneestdataset","chapter":"13 Estimation in VisionEval","heading":"13.3.8.1 MakeSimBzoneEstDataset","text":"script combines data US Census, EPA Smart Location Database (SLD), National Transit DatabaseData sources include US Census Housing Household Income Data, Smart Location Database, National Transit DatabaseModel types include Tabulation data householdEstimation uses following methods: Package buildDocumented inst/module_docs/MakeSimBzoneEstDataset.mdThe models model step :Model name: Processed Dataset\nModel type: Tabulation data household\nEstimation data: data-raw/2010_Service.csv\ndata-raw/2010_transit_uza_data.csv\ndata-raw/2010_Agency_Information.csv\nEstimation method: Package build\nEstimation script: R/MakeSimBzoneEstDataset.R\nModel object: data/SimLandUseData_df.rda\nNotes: module processes data use VESimLandUse module\nModel type: Tabulation data householdEstimation data: data-raw/2010_Service.csv\ndata-raw/2010_transit_uza_data.csv\ndata-raw/2010_Agency_Information.csvEstimation method: Package buildEstimation script: R/MakeSimBzoneEstDataset.RModel object: data/SimLandUseData_df.rdaNotes: module processes data use VESimLandUse module","code":""},{"path":"ve-estimation.html","id":"vesimtransportsupply","chapter":"13 Estimation in VisionEval","heading":"13.3.9 VESimTransportSupply","text":"package contains modules work VisionEval framework simulate transportation supply characteristics including roadway supply public transit supply.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"simulateroadmiles","chapter":"13 Estimation in VisionEval","heading":"13.3.9.1 SimulateRoadMiles","text":"module assigns freeway arterial lane-miles metropolitan areas (Marea) calculates freeway lane-miles per capita.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"simulatetransitservice","chapter":"13 Estimation in VisionEval","heading":"13.3.9.2 SimulateTransitService","text":"module assigns transit service level urbanized portion Marea neighborhoods (SimBzones) within urbanized area.Data sources include VESimLandUseDataModel types include DistributionsEstimation uses following methods: Imports VELandUseDocumented R Script , md file producedThe models model step :Model name: Models estimated VESimLandUse modules\nModel type: Distributions\nEstimation data: VESimLandUse::SimBzone_ls\nEstimation method: Imports VELandUse\nEstimation script: R/SimulateTransitService.R\nModel object: data/D4cModels_ls.rda\nNotes: Sources models estimated VELandUse module.\nModel type: DistributionsEstimation data: VESimLandUse::SimBzone_lsEstimation method: Imports VELandUseEstimation script: R/SimulateTransitService.RModel object: data/D4cModels_ls.rdaNotes: Sources models estimated VELandUse module.","code":""},{"path":"ve-estimation.html","id":"vesyntheticfirms","chapter":"13 Estimation in VisionEval","heading":"13.3.10 VESyntheticFirms","text":"VisionEval Synthetic Firms module\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"createbasesyntheticfirms-1","chapter":"13 Estimation in VisionEval","heading":"13.3.10.1 CreateBaseSyntheticFirms","text":"Creates list base year synthetic firmsThis module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"createfuturesyntheticfirms-1","chapter":"13 Estimation in VisionEval","heading":"13.3.10.2 CreateFutureSyntheticFirms","text":"Creates list future year synthetic firmsThis module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"vetransportsupply","chapter":"13 Estimation in VisionEval","heading":"13.3.11 VETransportSupply","text":"package contains number modules work VisionEval framework calculate transportation supply characteristics including roadway supply public transit supply.\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"simulateroadmiles-1","chapter":"13 Estimation in VisionEval","heading":"13.3.11.1 SimulateRoadMiles","text":"module assigns freeway arterial lane-miles metropolitan areas (Marea) calculates freeway lane-miles per capita.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"simulatetransitservice-1","chapter":"13 Estimation in VisionEval","heading":"13.3.11.2 SimulateTransitService","text":"module assigns transit service level urbanized portion Marea neighborhoods (SimBzones) within urbanized area.Data sources include FTA NTDModel types include FactorsEstimation uses following methods: Package buildDocumented inst/module_docs/AssignTransitService.mdThe models model step :Model name: Factors convert revenue mules, develop bus equivalency factors, compare vehicle miles mode\nModel type: Factors\nEstimation data: inst/extdata/2015_Agency_information.csv, inst/extdata/2015_Service.csv\nEstimation method: Package build\nEstimation script: R/AssignTransitService.R\nModel object: data/BusEquivalents_df.rda, data/VehMiFactors_df.rda, data/UZABusEqRevMile_df.rda\nNotes: module develops factors based FTA NTD data\nModel type: FactorsEstimation data: inst/extdata/2015_Agency_information.csv, inst/extdata/2015_Service.csvEstimation method: Package buildEstimation script: R/AssignTransitService.RModel object: data/BusEquivalents_df.rda, data/VehMiFactors_df.rda, data/UZABusEqRevMile_df.rdaNotes: module develops factors based FTA NTD data","code":""},{"path":"ve-estimation.html","id":"vetransportsupplyuse","chapter":"13 Estimation in VisionEval","heading":"13.3.12 VETransportSupplyUse","text":"VisionEval module roadway speeds, delay, congestion costs using run year data\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"calculatecongestionbase-1","chapter":"13 Estimation in VisionEval","heading":"13.3.12.1 CalculateCongestionBase","text":"module calculates amount congestion base year - automobile, light truck, truck, bus vmt allocated freeways, arterials, roadways.Data sources include 2009 Urban Mobility StudyModel types include lookup tablesEstimation uses following methods: Data files inst/extdataDocumented R Script , md file producedThe models model step :Model name: Speed estimated demand vs lane-mile supply\nModel type: lookup tables\nEstimation data: inst/extdata/CongModel_ls.RData\nEstimation method: Data files inst/extdata\nEstimation script: R/CalculateCongestionBase.R\nModel object: data/CongModel_ls.rda\nNotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.\nModel type: lookup tablesEstimation data: inst/extdata/CongModel_ls.RDataEstimation method: Data files inst/extdataEstimation script: R/CalculateCongestionBase.RModel object: data/CongModel_ls.rdaNotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.","code":""},{"path":"ve-estimation.html","id":"calculatecongestionfuture-1","chapter":"13 Estimation in VisionEval","heading":"13.3.12.2 CalculateCongestionFuture","text":"module calculates amount congestion future year - automobile, light truck, truck, bus vmt allocated freeways, arterials, roadways.Data sources include 2009 Urban Mobility StudyModel types include lookup tablesEstimation uses following methods: Data files inst/extdataDocumented R Script , md file producedThe models model step :Model name: Speed estimated demand vs lane-mile supply\nModel type: lookup tables\nEstimation data: inst/extdata/CongModel_ls.RData\nEstimation method: Data files inst/extdata\nEstimation script: R/CalculateCongestionFuture.R\nModel object: NA\nNotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.\nModel type: lookup tablesEstimation data: inst/extdata/CongModel_ls.RDataEstimation method: Data files inst/extdataEstimation script: R/CalculateCongestionFuture.RModel object: NANotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.","code":""},{"path":"ve-estimation.html","id":"calculatecongestionpolicy-1","chapter":"13 Estimation in VisionEval","heading":"13.3.12.3 CalculateCongestionPolicy","text":"module calculates amount congestion - automobile, light truck, truck, bus vmt allocated freeways, arterials, roadways adjusted policy applied selected scenario.Data sources include 2009 Urban Mobility StudyModel types include lookup tablesEstimation uses following methods: Data files inst/extdataDocumented R Script , md file producedThe models model step :Model name: Speed estimated demand vs lane-mile supply, adjusted intervention policy\nModel type: lookup tables\nEstimation data: inst/extdata/CongModel_ls.RData\nEstimation method: Data files inst/extdata\nEstimation script: R/CalculateCongestionPolicy.R\nModel object: NA\nNotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.\nModel type: lookup tablesEstimation data: inst/extdata/CongModel_ls.RDataEstimation method: Data files inst/extdataEstimation script: R/CalculateCongestionPolicy.RModel object: NANotes: module estimated model parameters, derived RPAT scripts. Original source models GreenSTEP models.","code":""},{"path":"ve-estimation.html","id":"vetraveldemandmm","chapter":"13 Estimation in VisionEval","heading":"13.3.13 VETravelDemandMM","text":"package contains module VisionEval framework simulates multi-modal travel demand individual households\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"calculatealtmodetrips-1","chapter":"13 Estimation in VisionEval","heading":"13.3.13.1 CalculateAltModeTrips","text":"Predicts transit, bike, walk PMT tripsData sources include NHTS 2009, FHWA HPMS, FTA NTD, EPA SLDModel types include Hurdle Linear regressionEstimation uses following methods: Pre-estimated, saved objects data-raw/estimatedDocumented inst/module_docs/CalculateAltModeTrips.mdThe models model step :Model name: Bike PMT metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikePMTModel_df.R\nModel object: data/BikePMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikePMTModel_df.RModel object: data/BikePMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Bike PMT non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikePMTModel_df.R\nModel object: data/BikePMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikePMTModel_df.RModel object: data/BikePMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Bike trip freqiency metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikeTFLModel_df.R\nModel object: data/BikeTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikeTFLModel_df.RModel object: data/BikeTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Bike trip freqiency non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikeTFLModel_df.R\nModel object: data/BikeTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikeTFLModel_df.RModel object: data/BikeTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Bike trip average distance metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikeTFLModel_df.R\nModel object: data/BikeTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikeTFLModel_df.RModel object: data/BikeTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Bike trip average distance non-metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/BikeTFLModel_df.R\nModel object: data/BikeTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/BikeTFLModel_df.RModel object: data/BikeTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit PMT metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitPMTModel_df.R\nModel object: data/TransitPMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitPMTModel_df.RModel object: data/TransitPMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit PMT non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitPMTModel_df.R\nModel object: data/TransitPMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitPMTModel_df.RModel object: data/TransitPMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit trip freqiency metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitTFLModel_df.R\nModel object: data/TransitTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitTFLModel_df.RModel object: data/TransitTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit trip freqiency non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitTFLModel_df.R\nModel object: data/TransitTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitTFLModel_df.RModel object: data/TransitTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit trip average distance metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitTFLModel_df.R\nModel object: data/TransitTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitTFLModel_df.RModel object: data/TransitTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Transit trip average distance non-metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/TransitTFLModel_df.R\nModel object: data/TransitTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/TransitTFLModel_df.RModel object: data/TransitTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk PMT metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkPMTModel_df.R\nModel object: data/WalkPMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkPMTModel_df.RModel object: data/WalkPMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk PMT non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkPMTModel_df.R\nModel object: data/WalkPMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkPMTModel_df.RModel object: data/WalkPMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk trip freqiency metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkTFLModel_df.R\nModel object: data/WalkTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkTFLModel_df.RModel object: data/WalkTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk trip freqiency non-metropolitan households\nModel type: Hurdle\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkTFLModel_df.R\nModel object: data/WalkTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: HurdleEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkTFLModel_df.RModel object: data/WalkTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk trip average distance metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkTFLModel_df.R\nModel object: data/WalkTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkTFLModel_df.RModel object: data/WalkTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Walk trip average distance non-metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/WalkTFLModel_df.R\nModel object: data/WalkTFLModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/WalkTFLModel_df.RModel object: data/WalkTFLModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.","code":""},{"path":"ve-estimation.html","id":"calculatehouseholddvmt-1","chapter":"13 Estimation in VisionEval","heading":"13.3.13.2 CalculateHouseholdDvmt","text":"module predicts AADVMT households. uses model object data/AADVMTModel_df.rda variables coefficients therein predict AADVMT.Data sources include NHTS 2009, FHWA HPMS, FTA NTD, EPA SLD NHTS 2001Model types include Linear regressionEstimation uses following methods: Pre-estimated, saved objects data-raw/estimatedDocumented inst/module_docs/CalculateHouseholdDVMT.md inst/module_docs/HouseholdDvmtQuantileEstimation.mdThe models model step :Model name: Household Dvmt metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/AADVMTModel_df.R\nModel object: data/AADVMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/AADVMTModel_df.RModel object: data/AADVMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: Household Dvmt non-metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/AADVMTModel_df.R\nModel object: data/AADVMTModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/AADVMTModel_df.RModel object: data/AADVMTModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.Model name: 95th percentile DVMT model metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/HouseholdDvmtQuantileEstimation.R\nModel object: data/DvmtModel_ls.rda\nNotes: models estimation scripts included package transferred VEHouseholdTravel module\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/HouseholdDvmtQuantileEstimation.RModel object: data/DvmtModel_ls.rdaNotes: models estimation scripts included package transferred VEHouseholdTravel moduleModel name: 95th percentile DVMT model non-metropolitan households\nModel type: Linear regression\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/HouseholdDvmtQuantileEstimation.R\nModel object: data/DvmtModel_ls.rda\nNotes: models estimation scripts included package transferred VEHouseholdTravel module\nModel type: Linear regressionEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/HouseholdDvmtQuantileEstimation.RModel object: data/DvmtModel_ls.rdaNotes: models estimation scripts included package transferred VEHouseholdTravel module","code":""},{"path":"ve-estimation.html","id":"predictdrivers","chapter":"13 Estimation in VisionEval","heading":"13.3.13.3 PredictDrivers","text":"module predicts number licensed drivers households. uses model object data/DriversModel_df.rda (ordered logit model default) variables coefficients therein predict Drivers.Data sources include NHTS 2009, FHWA HPMS, FTA NTD, EPA SLDModel types include Ordered logitEstimation uses following methods: Pre-estimated, saved objects data-raw/estimatedDocumented inst/module_docs/PredictDrivers.mdThe models model step :Model name: Drivers household\nModel type: Ordered logit\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/DriversModel_df.R\nModel object: data/DriversModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Ordered logitEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/DriversModel_df.RModel object: data/DriversModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.","code":""},{"path":"ve-estimation.html","id":"predictvehicles","chapter":"13 Estimation in VisionEval","heading":"13.3.13.4 PredictVehicles","text":"module predicts number light-duty vehicles households. uses model object data/VehiclesModel_df.rda (ordered logit model default) variables coefficients therein predict number vehicles.Data sources include NHTS 2009, FHWA HPMS, FTA NTD, EPA SLDModel types include Ordered logitEstimation uses following methods: Pre-estimated, saved objects data-raw/estimatedDocumented inst/module_docs/PredictVehicles.mdThe models model step :Model name: Number light duty vehicles\nModel type: Ordered logit\nEstimation data: inst/extdata/sources.md, confidential data included package\nEstimation method: Pre-estimated, saved objects data-raw/estimated\nEstimation script: data-raw/VehiclesModel_df.R\nModel object: data/VehiclesModel_df.rda\nNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.\nModel type: Ordered logitEstimation data: inst/extdata/sources.md, confidential data included packageEstimation method: Pre-estimated, saved objects data-raw/estimatedEstimation script: data-raw/VehiclesModel_df.RModel object: data/VehiclesModel_df.rdaNotes: model uses confidential spatial elements NHTS 2009 data link EPA Smart Location Database. estimated models included package estimation dataset.","code":""},{"path":"ve-estimation.html","id":"vetravelperformance","chapter":"13 Estimation in VisionEval","heading":"13.3.14 VETravelPerformance","text":"Travel performance metrics\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"adjusthhvehiclempgmpkwh","chapter":"13 Estimation in VisionEval","heading":"13.3.14.1 AdjustHhVehicleMpgMpkwh","text":"module adjusts fuel economy (MPG) power efficiency (MPKWH) household vehicles reflect effects congestion, speed smoothing, eco-driving calculated CalculateMpgMpkwhAdjustments module.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"balanceroadcostsandrevenues","chapter":"13 Estimation in VisionEval","heading":"13.3.14.2 BalanceRoadCostsAndRevenues","text":"module calculates extra mileage tax ($ per vehicle mile traveled) household vehicles needed make difference cost constructing, maintaining, operating roadways revenues fuel, VMT, congestion taxes.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"budgethouseholddvmt","chapter":"13 Estimation in VisionEval","heading":"13.3.14.3 BudgetHouseholdDvmt","text":"module adjusts average household DVMT keep quantity within limit household vehicle operating cost budget. Data sources include US BEA CESModel types include Linear regressionEstimation uses following methods: Package BuildDocumented inst/module_docs/BudgetHouseholdDvmt.mdThe models model step :Model name: model calculate maximum proportion household income household willing pay operate vehicles used household\nModel type: Linear regression\nEstimation data: inst/extdata/ces_vehicle_op-cost.csv\nEstimation method: Package Build\nEstimation script: R/BudgetHouseholdDvmt.R\nModel object: data/OpPropModel_ls.rda\nNotes: Estimated model uses CES data, script inst/extdata/ces.R processes data format estimation input dataset\nModel type: Linear regressionEstimation data: inst/extdata/ces_vehicle_op-cost.csvEstimation method: Package BuildEstimation script: R/BudgetHouseholdDvmt.RModel object: data/OpPropModel_ls.rdaNotes: Estimated model uses CES data, script inst/extdata/ces.R processes data format estimation input dataset","code":""},{"path":"ve-estimation.html","id":"calculatecomenergyandemissions","chapter":"13 Estimation in VisionEval","heading":"13.3.14.4 CalculateComEnergyAndEmissions","text":"module calculates energy consumption carbon emissions heavy trucks light-duty commercial service vehicles. module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculatempgmpkwhadjustments","chapter":"13 Estimation in VisionEval","heading":"13.3.14.5 CalculateMpgMpkwhAdjustments","text":"module calculates adjustments fuel economy electric energy efficiency (plug-vehicles) resulting traffic congestion, speed smoothing (.e. active traffic management reduces speed variation), eco-driving. Eco-driving practice driving ways increase fuel economy reduce carbon emissions.Data sources include Outputs EPA PERE modelModel types include Tabulation dataEstimation uses following methods: Package BuildDocumented inst/module_docs/CalculateMpgMpkwhAdjustments.mdThe models model step :Model name: Model Effects Speed Fuel Economy\nModel type: Tabulation data\nEstimation data: vehicle_fuel_speed_curves.csv\nEstimation method: Package Build\nEstimation script: R/CalculateMpgMpkwhAdjustments.R\nModel object: data/MpgMpkwhAdj_ls.rda\nNotes: Model based outputs EPA’s PERE model, estimation limited tabulation simple processing\nModel type: Tabulation dataEstimation data: vehicle_fuel_speed_curves.csvEstimation method: Package BuildEstimation script: R/CalculateMpgMpkwhAdjustments.RModel object: data/MpgMpkwhAdj_ls.rdaNotes: Model based outputs EPA’s PERE model, estimation limited tabulation simple processingModel name: Speed Smoothing Eco-driving Model\nModel type: Tabulation data\nEstimation data: max_smooth_improve.csv\nEstimation method: Package Build\nEstimation script: R/CalculateMpgMpkwhAdjustments.R\nModel object: data/MpgMpkwhAdj_ls.rda\nNotes: Model based outputs EPA’s PERE model, estimation limited tabulation simple processing\nModel type: Tabulation dataEstimation data: max_smooth_improve.csvEstimation method: Package BuildEstimation script: R/CalculateMpgMpkwhAdjustments.RModel object: data/MpgMpkwhAdj_ls.rdaNotes: Model based outputs EPA’s PERE model, estimation limited tabulation simple processing","code":""},{"path":"ve-estimation.html","id":"calculateptranenergyandemissions","chapter":"13 Estimation in VisionEval","heading":"13.3.14.6 CalculatePtranEnergyAndEmissions","text":"module calculates energy consumption carbon emissions public transportation vehicles urbanized areas. Note fuel consumption emissions car services (e.g. taxi, Uber, Lyft) calculated conjunction calculation household vehicle emissions attributed household.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculateroaddvmt","chapter":"13 Estimation in VisionEval","heading":"13.3.14.7 CalculateRoadDvmt","text":"module computes several factors used computing roadway DVMT including factors calculating commercial service vehicle travel heavy truck travel. module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculateroadperformance","chapter":"13 Estimation in VisionEval","heading":"13.3.14.8 CalculateRoadPerformance","text":"module calculates freeway arterial congestion level amounts DVMT congestion level. also calculates average speed delay congestion level. addition, splits light-duty vehicle (LDV) DVMT freeways arterials function relative speeds congestion pricesData sources include 2009 Urban Mobility Study NHTS 2017 research Bigazzi Clifton NHTS 2017Model types include lookup tables Lookup tables equation Linear regression Lookup tables equationEstimation uses following methods: Package BuildDocumented inst/module_docs/CalculateRoadPerformance.mdThe models model step :Model name: Model Congestion Function Daily Demand\nModel type: lookup tables\nEstimation data: inst/extdata/ums_2009.csv\nEstimation method: Package Build\nEstimation script: R/CalculateRoadPerformance.R\nModel object: data/CongestedProportions_ls.rda\nNotes: module estimates models using Urban mobility study data\nModel type: lookup tablesEstimation data: inst/extdata/ums_2009.csvEstimation method: Package BuildEstimation script: R/CalculateRoadPerformance.RModel object: data/CongestedProportions_ls.rdaNotes: module estimates models using Urban mobility study dataModel name: Model Congested Speeds Effects Operations Programs (e.g. ramp metering, signal coordination)\nModel type: lookup tables\nEstimation data: inst/extdata/base_speeds.csv, ramp_metering.csv, incident_management.csv, signal_coordination.csv, access_management.csv\nEstimation method: Package Build\nEstimation script: R/CalculateRoadPerformance.R, CalculateSpeeds.R\nModel object: data/BaseSpeeds_df.rda, data/Delay_df.rda, data/Ramp_df.rda, data/Incident_df.rda, data/Signal_df.rda, data/Access_df.rda\nNotes: module estimates models based research documented package\nModel type: lookup tablesEstimation data: inst/extdata/base_speeds.csv, ramp_metering.csv, incident_management.csv, signal_coordination.csv, access_management.csvEstimation method: Package BuildEstimation script: R/CalculateRoadPerformance.R, CalculateSpeeds.RModel object: data/BaseSpeeds_df.rda, data/Delay_df.rda, data/Ramp_df.rda, data/Incident_df.rda, data/Signal_df.rda, data/Access_df.rdaNotes: module estimates models based research documented packageModel name: Model Split Light-duty Vehicle (LDV) DVMT Freeways Arterials\nModel type: Linear regression\nEstimation data: inst/extdata/ums_2009.csv\nEstimation method: Package Build\nEstimation script: R/CalculateRoadPerformance.R\nModel object: data/DvmtSplit_LM.rda\nNotes: module estimates models using Urban mobility study data\nModel type: Linear regressionEstimation data: inst/extdata/ums_2009.csvEstimation method: Package BuildEstimation script: R/CalculateRoadPerformance.RModel object: data/DvmtSplit_LM.rdaNotes: module estimates models using Urban mobility study dataModel name: Model Calculate Average Non-urban Road Speed Average Urban Road Speed\nModel type: Lookup tables equation\nEstimation data: inst/extdata/urban_rural_trip_length_duration.csv\nEstimation method: Package Build\nEstimation script: R/CalculateRoadPerformance.R\nModel object: data/UrbanRuralAveSpeed_ls.rda\nNotes: module estimates models using NHTS 2017 data tabulated included package\nModel type: Lookup tables equationEstimation data: inst/extdata/urban_rural_trip_length_duration.csvEstimation method: Package BuildEstimation script: R/CalculateRoadPerformance.RModel object: data/UrbanRuralAveSpeed_ls.rdaNotes: module estimates models using NHTS 2017 data tabulated included package","code":""},{"path":"ve-estimation.html","id":"calculatesafetymeasures","chapter":"13 Estimation in VisionEval","heading":"13.3.14.9 CalculateSafetyMeasures","text":"module aims calculate safety measures model area. uses fatality injury crash rates different modes rates per miles traveled. Therefore module simply uses calculated VMT model estimate fatality injury rates Marea.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"calculatehhvehicleoperatingcosts","chapter":"13 Estimation in VisionEval","heading":"13.3.14.10 CalculateHhVehicleOperatingCosts","text":"module calculates vehicle operating costs per mile travel uses costs determine proportional split DVMT among household vehicles. module also calculates average --pocket costs per mile vehicle travel household, well cost social environmental impacts, road use taxes per mile vehicle travel.Data sources include ? data American Automobile Association Bureau Labor StatisticsModel types include Cobb-Douglas utility function Products ratesEstimation uses following methods: Package BuildDocumented inst/module_docs/CalculateVehicleOperatingCost.mdThe models model step :Model name: model splitting household DVMT among household vehicles function unit cost using vehicle\nModel type: Cobb-Douglas utility function\nEstimation data: ?\nEstimation method: Package Build\nEstimation script: R/CalculateVehicleOperatingCost.R\nModel object: data/OpCosts_ls.rda\nNotes: Missing estimation script data model?\nModel type: Cobb-Douglas utility functionEstimation data: ?Estimation method: Package BuildEstimation script: R/CalculateVehicleOperatingCost.RModel object: data/OpCosts_ls.rdaNotes: Missing estimation script data model?Model name: Models Calculating --pocket Costs\nModel type: Products rates\nEstimation data: deflators.csv, aa_vehicle_operating_costs.csv\nEstimation method: Package Build\nEstimation script: R/CalculateVehicleOperatingCost.R\nModel object: data/OpCosts_ls.rda\nNotes: module estimates models using BLS AAA data\nModel type: Products ratesEstimation data: deflators.csv, aa_vehicle_operating_costs.csvEstimation method: Package BuildEstimation script: R/CalculateVehicleOperatingCost.RModel object: data/OpCosts_ls.rdaNotes: module estimates models using BLS AAA data","code":""},{"path":"ve-estimation.html","id":"loaddefaultroaddvmtvalues","chapter":"13 Estimation in VisionEval","heading":"13.3.14.11 LoadDefaultRoadDvmtValues","text":"script calculates default values base year roadway DVMT vehicle type (light-duty, heavy truck, bus), distribution roadway DVMT vehicle type roadway classes (freeway, arterial, ), ratio commercial service light-duty vehicle travel household vehicle travel.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"traveltimereliability","chapter":"13 Estimation in VisionEval","heading":"13.3.14.12 TravelTimeReliability","text":"module calculates travel time reliability measures model area. Average speeds different congestion levels (None, Mod, Hvy, Sev, Ext) freeways arterials marea calculated CalculateRoadPerformance Module used inputs calculate travel time index.module step estimated parameters model types derived data.","code":""},{"path":"ve-estimation.html","id":"vereports","chapter":"13 Estimation in VisionEval","heading":"13.3.15 VEReports","text":"module calculates reports various performance metrics\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"reportrpatmetrics-1","chapter":"13 Estimation in VisionEval","heading":"13.3.15.1 ReportRPATMetrics","text":"module calculates reports various performance metrics. performance metrics include environment energey impacts, financial economic impacts, community impacts.Data sources include ?Model types include Tabulation dataEstimation uses following methods: Data file inst/extdata/TruckBusAgeDist_.RdataDocumented R Script , md file producedThe models model step :Model name: Truck Bus age distribution data\nModel type: Tabulation data\nEstimation data: inst/extdata/TruckBusAgeDist_.RData\nEstimation method: Data file inst/extdata/TruckBusAgeDist_.Rdata\nEstimation script: R/ReportRPATMetrics.R\nModel object: data/TruckBusAgeDist_mx.rda\nNotes: module estimated model parameters, derived RPAT scripts. Data file model input GreenSTEP\nModel type: Tabulation dataEstimation data: inst/extdata/TruckBusAgeDist_.RDataEstimation method: Data file inst/extdata/TruckBusAgeDist_.RdataEstimation script: R/ReportRPATMetrics.RModel object: data/TruckBusAgeDist_mx.rdaNotes: module estimated model parameters, derived RPAT scripts. Data file model input GreenSTEP","code":""},{"path":"ve-estimation.html","id":"vescenario","chapter":"13 Estimation in VisionEval","heading":"13.3.16 VEScenario","text":"Scenario management VE models\nmodule contains following step(s):","code":""},{"path":"ve-estimation.html","id":"verpatresults","chapter":"13 Estimation in VisionEval","heading":"13.3.16.1 VERPATResults","text":"module gathers output scenario runs data.table returns listData sources include Hardcoded configurationModel types include config fileEstimation uses following methods: Package BuildDocumented R Script , md file producedThe models model step :Model name: VERPAT OUTPUT config file\nModel type: config file\nEstimation data: Hardcoded configuration\nEstimation method: Package Build\nEstimation script: R/VERPATResults.R\nModel object: data/VERPATOutputConfig.rda\nNotes: module creates scenario configuration file package build\nModel type: config fileEstimation data: Hardcoded configurationEstimation method: Package BuildEstimation script: R/VERPATResults.RModel object: data/VERPATOutputConfig.rdaNotes: module creates scenario configuration file package build","code":""},{"path":"ve-estimation.html","id":"verspmresults","chapter":"13 Estimation in VisionEval","heading":"13.3.16.2 VERSPMResults","text":"module gathers output scenario runs data.table returns listData sources include Hardcoded configurationModel types include config fileEstimation uses following methods: Package BuildDocumented R Script , md file producedThe models model step :Model name: VERSPM OUTPUT config file\nModel type: config file\nEstimation data: Hardcoded configuration\nEstimation method: Package Build\nEstimation script: R/VERSPMResults.R\nModel object: data/VERSPMOutputConfig.rda\nNotes: module creates scenario configuration file package build\nModel type: config fileEstimation data: Hardcoded configurationEstimation method: Package BuildEstimation script: R/VERSPMResults.RModel object: data/VERSPMOutputConfig.rdaNotes: module creates scenario configuration file package build","code":""},{"path":"ve-estimation.html","id":"ve-module-structure","chapter":"13 Estimation in VisionEval","heading":"13.4 VE Module Structure","text":"modules made available form standard R packages meet framework specifications. Packages may source form installed form. following presentation refers source form VisionEval packages. package installed (built) R system runs scripts R directory saves functions defined within datasets saved script. structure installed package covered document exception module_docs directory installed package. module developer follows guidelines module documentation, module_docs directory included installed package. include module documentation form markdown documents.package may contain one module. package organization follows standard organization R packages. structure shown following diagram. components described order presented diagram. file names examples.DESCRIPTION NAMESPACE files standard files required R package system. good sources available describing required contents files (R Packages), done . entries files can produced automatically annotations R scripts described next, using freely available tools devtools RStudio. LICENSE file contains text Apache 2 license open source license used VisionEval packages. accompanying Apache 2 NOTICE file inst directory.","code":"VESimHouseholds\n|   DESCRIPTION\n|   NAMESPACE\n|   LICENSE\n|     \n|\n|____R\n|    |   CreateHouseholds.R  \n|    |   PredictWorkers.R\n|    |   CreateEstimationDatasets.R\n|    |   ...\n|\n|\n|____inst  \n|    |    NOTICE\n|    |____extdata  \n|         |   pums_households.csv\n|         |   pums_households.txt\n|         |   pums_persons.csv\n|         |   pums_persons.txt\n|         |   ...\n|         \n|\n|____data-raw\n|    |    some_processed_model_dataset.rda\n|    |    ...\n|    \n|\n|____tests\n     |____scripts\n     |    |   test.R\n     |    |   test_functions.R\n     |    |   verspm_test.R \n     |    |   vestate_test.R    \n     |\n     |____verspm\n     |    |   logs\n     |    |   |   Log_CreateHouseholds.txt\n     |    |   |   ...\n     |    |\n     |    |   ModelState.Rda\n     |    \n     |____vestate\n     |    |   ...\n     |\n     |    ...\n"},{"path":"ve-estimation.html","id":"the-r-directory","chapter":"13 Estimation in VisionEval","heading":"13.4.1 The R Directory","text":"R directory R scripts placed define modules included package. module defined single R script name module (.R file extension). module script 4 things:\n1) specifies model estimates model parameters. Model estimation datasets may processed script may loaded sources (see ).\n2) defines specifications data module depends .\n3) defines functions implement submodel.\n4) includes test code used module developmentWhen binary (installed) package built source package, R script run; estimation datasets processed, model parameters saved, module specifications saved, functions parsed efficient form. Following section describe structure module R script detail. example AssignTransitService module script VETransportSupply package included Appendix E.convention, module script organized 4 sections reflecting list . Following sections 8.1.1 8.1.4 explain module script section detail. Section 8.1.1 explains model specification estimation handled. Subsection 8.1.1.1 focuses handling model estimation data , cases, may use specialized scripts. Section 8.1.2 explains write module specifications tell framework module run, input data processed, data retrieved datastore, data saved datastore. Subsection 8.1.2.1 focuses OPTIONAL specification module developers can use enable optional model inputs. Subsection 8.1.2.2 focuses CALL specification enables modules call modules perform calculation services. Section 8.1.3 describes write main function supporting functions implement module. Section 8.1.4 explains test code commonly included module assist module developer module development process. Finally, Section 8.1.5 explains special module named Initialize may included package. purpose module enable module developers include specialized input data checks preparation.","code":""},{"path":"ve-estimation.html","id":"model-specification-and-estimation","chapter":"13 Estimation in VisionEval","heading":"13.4.1.1 Model Specification and Estimation","text":"name suggests, section script handles tasks related processing model estimation data, model specification, model parameter estimation. done manner enables others understand structure model, data based , parameters estimated. enable others replicate process test modifications. Typically, model specification estimation code 4 things: loading data used, defining functions carry key specification estimation procedures, applying functions produce objects define model(s), saving model objects.Models vary complexity. modules model may simply algorithm decision rules asserted parameters. case, need fill section script. example, AssignLifeCycle module VESimHouseholds package assigns lifecycle codes households using rules regarding numbers adults, children, workers household. cases like , model estimation specification section empty. cases, models quite complex section script extensive. example, “CalculateHouseholdDvmt” module following process building models comprises hundreds lines code:\n- Estimate binomial logit model probability household DVMT\n- Estimate linear model amount household DVMT given household DVMT\n- Estimate dispersion factor linear model variance modeled DVMT matches observed variance\n- Simulate household DVMT 1000 times stochastically applying binomial linear models\n- Calculate quantiles simulated DVMT\n- Estimate linear model average DVMT using simulation data\n- Estimate models DVMT quantiles function average DVMTModel estimation data preparation may also extensive. Whether , documenting data used building model making data available key making models reproducible extensible. Moreover, modules important model users able model parameters reflect conditions region. example, CreateHouseholds, PredictWorkers, PredictIncome modules use Census public use microdata sample data region estimate parameters. several ways model estimation data can handled VisionEval model system. described detail Section 8.1.1.1.model estimation code also save objects use documenting modules :\n1. Model summary statistics produced model object (linear model estimated using lm function) processed summary function;\n2. Data frames, tables, matrices; ,\n3. Graphs static data visualizations.first two saved objects just like object saved implement model. suggested documentation objects stored list along model document. example, follow portion PredictIncome.R script saves (documents) list contains household income model including documentation summary statistics model.Summary component list shows summary statistics model. explained module documentation section , can automatically inserted module documentation. recommended capture.output function used rather print function capture model summary statistics print function insert line numbers. method can used save text can inserted module documentation. example also shows objects documented saved.can also useful save data frames, tables, matrices use model documentation. can saved like data object inserted described module documentation section.Graphs visualizations saved different manner. saved image file “png” format, can inserted module documentation. must saved “data” directory . Following example:many ways module developer can code model specification parameter estimation procedures. However done, code well organized commented understandable reviewers. code follow VisionEval coding guidelines. addition, highly recommended code grouped functions aid understandability reduce unnecessary code repetition can lead errors. Complex functions well documented. Function documentation done using Roxygen syntax. Following example code estimates housing choice model (single-family vs. multifamily) PredictHousing module VELandUse package.can seen example, code defines documents function estimates binomial choice model given estimation dataset list model variable names. function number things including transforming estimation data, creating model formulation list independent variables, estimating variables, returning list model components. function defined, applied using model estimation data specified list independent variables. approach model specification estimation makes easy module developer try different model specifications, measuring relative performance, documenting results.approach used example takes advantage helper functions framework software. makeModelFormulaString function takes R model formula object converts string representation. model applied module, string parsed evaluated data frame independent variables. provides compact way store model fast way apply . Several framework functions assist applying models form. applyBinomialModel applies binomial logit model. applyLinearModel applies linear regression model. functions enable models self calibrate match input target. example, PredictHousing module adjusts constant model proportions households single-family vs. multifamily dwelling units matches housing supply area. applyBinomialModel efficiently calling binarySearch function implements binary search algorithm.Module developers limited using previous approach specifying implementing model. R functions estimate models also companion prediction functions apply estimated model new set data. often simplest best way apply model. One drawback approach, however, object returned model estimation function used making prediction often large includes copy estimation data datasets used calculate model statistics. model estimation datasets large, pose problem keeping module package central repository. case, module code needs remove parts model object necessary prediction. example, AssignVehicleOwnership module VEHouseholdVehicles package uses ordered logit model predict household auto ownership households owning one vehicles. model estimated using data 2001 NHTS model object returned estimation function (clm ordinal package) large. Portions model object needed corresponding prediction function removed. often matter trial error find much can removed model object without adversely affecting prediction function.model estimated, model objects embody model need saved part package. standard way illustrated following example saving model PredictHousing module. housing prediction model object list called ‘HouseTypeModel_ls’. list saved ‘data’ directory package. saving model object ‘data’ directory, can addressed directly module function applies model. Note documentation handled.use_data function usethis package saves data documentation correctly package simplifies procedure .Although model estimation code usually included module script, instances may understandable estimate models several modules one script. done CreateSimBzoneModels.R script VESimLandUse package. script estimates models modules package. Model estimation handled way model estimation dataset used models models build upon . Including model estimations one file makes easier code easier review.","code":"#Save the household income model\n#-------------------------------\n#' Household income model\n#'\n#' A list containing the income model equation and other information needed to\n#' implement the household income model.\n#'\n#' @format A list having the following components:\n#' \\describe{\n#'   \\item{Type}{a string identifying the type of model (\"linear\")}\n#'   \\item{Formula}{makeModelFormulaString(IncModel_LM)}\n#'   \\item{PrepFun}{a function that prepares inputs to be applied in the linear model}\n#'   \\item{OutFun}{a function that transforms the result of applying the linear model}\n#'   \\item{Summary}{the summary of the linear model estimation results}\n#'   \\item{SearchRange}{a two-element vector specifying the range of search values}\n#' }\n#' @source PredictIncome.R script.\n\"HHIncModel_ls\"\nusethis::use_data(HHIncModel_ls, overwrite = TRUE)#Plot comparison of observed and estimated income distributions\npng(\n  filename = \"data/reg-hh-inc_obs-vs-est_distributions.png\",\n  width = 480,\n  height = 480\n)\nplot(\n  density(IncObs_),\n  xlim = c(0, 200000),\n  xlab = \"Annual Dollars ($2000)\",\n  main = \"Distributions of Observed and Predicted Household Income \\nRegular Households\"\n  )\nlines(density(IncEst_), lty = 2)\nlegend(\"topright\", legend = c(\"Observed\", \"Predicted\"), lty = c(1,2))\ndev.off()#Define a function to estimate housing choice model\n#--------------------------------------------------\n#' Estimate housing choice model\n#'\n#' \\code{estimateHousingModel} estimates a binomial logit model for choosing\n#' between single family and multifamily housing\n#'\n#' This function estimates a binomial logit model for predicting housing choice\n#' (single family or multifamily) as a function of the supply of housing of\n#' these types and the demographic and income characteristics of the household.\n#'\n#' @param Data_df A data frame containing estimation data.\n#' @param StartTerms_ A character vector of the terms of the model to be\n#' tested in the model.\n#' @return A list which has the following components:\n#' Type: a string identifying the type of model (\"binomial\"),\n#' Formula: a string representation of the model equation,\n#' PrepFun: a function that prepares inputs to be applied in the binomial model,\n#' OutFun: a function that transforms the result of applying the binomial model.\n#' Summary: the summary of the binomial model estimation results.\n#' @import visioneval stats\n#Define function to estimate the income model\nestimateHousingModel <- function(Data_df, StartTerms_) {\n  #Define function to prepare inputs for estimating model\n  prepIndepVar <-\n    function(In_df) {\n      Ah <-\n        c(\"Age15to19\",\n          \"Age20to29\",\n          \"Age30to54\",\n          \"Age55to64\",\n          \"Age65Plus\")\n      Out_df <-\n        data.frame(t(apply(In_df[, Ah], 1, function(x) {\n          AgeLvl_ <- 1:5 #Age levels\n          HhAgeLvl_ <- rep(AgeLvl_, x)\n          HeadOfHh_ <- numeric(5)\n          if (max(HhAgeLvl_) < 5) {\n            HeadOfHh_[max(HhAgeLvl_)] <- 1\n          } else {\n            if (all(HhAgeLvl_ == 5)) {\n              HeadOfHh_[5] <- 1\n            } else {\n              NumMidAge <- sum(HhAgeLvl_ %in% c(3, 4))\n              NumElderly <- sum(HhAgeLvl_ == 5)\n              if (NumMidAge > NumElderly) {\n                HeadOfHh_[max(HhAgeLvl_[HhAgeLvl_ < 5])] <- 1\n              } else {\n                HeadOfHh_[5] <- 1\n              }\n            }\n          }\n          HeadOfHh_\n        })))\n      names(Out_df) <- paste0(\"Head\", Ah)\n      Out_df$HhSize <- In_df$HhSize\n      Out_df$Income <- In_df$Income\n      Out_df$RelLogIncome <- log1p(In_df$Income) / mean(log1p(In_df$Income))\n      Out_df$Intercept <- 1\n      Out_df\n    }\n  EstData_df <- prepIndepVar(Data_df)\n  EstData_df$SingleFamily <- as.numeric(Data_df$HouseType == \"SF\")\n  #Define function to make the model formula\n  makeFormula <-\n    function(StartTerms_) {\n      FormulaString <-\n        paste(\"SingleFamily ~ \", paste(StartTerms_, collapse = \"+\"))\n      as.formula(FormulaString)\n    }\n  #Estimate model\n  HouseTypeModel <-\n    glm(makeFormula(StartTerms_), family = binomial, data = EstData_df)\n  #Return model\n  list(\n    Type = \"binomial\",\n    Formula = makeModelFormulaString(HouseTypeModel),\n    Choices = c(\"SF\", \"MF\"),\n    PrepFun = prepIndepVar,\n    Summary = summary(HouseTypeModel)\n  )\n}\n\n#Estimate the binomial logit model\n#---------------------------------\n#Load the household estimation data\nHh_df <- VESimHouseholds::Hh_df\n#Select regular households\nHh_df <- Hh_df[Hh_df$HhType == \"Reg\",]\nHh_df$Income[Hh_df$Income == 0] <- 1\n#Estimate the housing model\nHouseTypeModelTerms_ <-\n  c(\n    \"HeadAge20to29\",\n    \"HeadAge30to54\",\n    \"HeadAge55to64\",\n    \"HeadAge65Plus\",\n    \"RelLogIncome\",\n    \"HhSize\",\n    \"RelLogIncome:HhSize\"\n  )\nHouseTypeModel_ls <- estimateHousingModel(Hh_df, HouseTypeModelTerms_)\nrm(HouseTypeModelTerms_)#Model number of vehicles of non-zero vehicle households\nEstData_df <- EstData_df[EstData_df$ZeroVeh == 0,]\nEstData_df$VehOrd <- EstData_df$NumVeh\nEstData_df$VehOrd[EstData_df$VehOrd > 6] <- 6\nEstData_df$VehOrd <- ordered(EstData_df$VehOrd)\nAutoOwnModels_ls$Metro$Count <-\n  clm(\n    VehOrd ~ Workers + LogIncome + DrvAgePop + HhSize + OnlyElderly + IsSF +\n      IsUrbanMixNbrhd + LogDensity + TranRevMiPC,\n    data = EstData_df,\n    threshold = \"equidistant\"\n  )\n#Trim down model\nAutoOwnModels_ls$Metro$Count[c(\"fitted.values\", \"model\", \"y\")] <- NULL#Save the housing choice model\n#-----------------------------\n#' Housing choice model\n#'\n#' A list containing the housing choice model equation and other information\n#' needed to implement the housing choice model.\n#'\n#' @format A list having the following components:\n#' \\describe{\n#'   \\item{Type}{a string identifying the type of model (\"binomial\")}\n#'   \\item{Formula}{makeModelFormulaString(HouseTypeModel)}\n#'   \\item{PrepFun}{a function that prepares inputs to be applied in the model}\n#'   \\item{Summary}{the summary of the binomial logit model estimation results}\n#'   \\item{SearchRange}{a two-element vector specifying the range of search values}\n#' }\n#' @source PredictHousing.R script.\n\"HouseTypeModel_ls\"\nusethis::use_data(HouseTypeModel_ls, overwrite = TRUE)\n"},{"path":"ve-estimation.html","id":"model-estimation-datasets","chapter":"13 Estimation in VisionEval","heading":"13.4.1.2 Model Estimation Datasets","text":"Model estimation datasets may read several sources. model estimation data large used multiple modules located different packages, may housed package. case 2001 NHTS data VE2001NHTS package. estimation data package can directly addressed model estimation code using standard ‘PackageName::DatasetName’ notation shown following example:estimation data retrieved another package case, DESCRIPTION file package must list package data retrieved Imports section. example, Imports section VEHouseholdTravel package reads follows. VE2001NHTS package listed packages package relies .estimation data shared among several modules within package, data preparation can done one script run first package built. approach used VESimHouseholds package. CreateEstimationDatasets.R script loads processes Census public use microdata sample dataset used estimating models 3 modules package (CreateHouseholds, PredictWorkers, PredictIncome). , case, separate script used prepare estimation data several modules package, data saved data directory package scripts load dataset directory. following extracts shows processed PUMS household dataset (data frame named Hh_df) saved CreateEstimationDatasets.R script. lines starting #' data documentation roxygen2 form. Although data documentation can tedious, especially large datasets, always done important aspect VisionEval model system.case, one script processes estimation data use several modules, important data processing script run prior scripts package built. Otherwise processed estimation data available module packages need . Managing order package script processing handled Collate section package DESCRIPTION file. Following example VESimHouseholds package:best way establish proper collation (.e. ordering) script execution carry model estimation definition invocation function, 1 statement lists estimation data processing script function documentation using Roxygen syntax. package documentation compiled, Collate section package DESCRIPTION file filled properly. Following example function documentation containing 2 statement CreateHouseholds.R module script VESimHouseholds package:model estimation data used single module, processing code included module script.several places model estimation datasets may located depending size datasets, whether datasets preprocessed using tools scripts, whether intention module developer enable model users customize model estimation reflect data region model applied.modules, desirable model parameters estimated reflect data region model applied. case CreateHouseholds, PredictWorkers, PredictIncome modules VESimHouseholds package household worker age compositions income distributions likely vary region. modules like , estimation data included ‘inst/extdata’ directory package form CSV-formatted text files. data files accompanied text files names ‘.txt’ extension rather ‘.csv’ extension. purpose text files document corresponding data files model users know obtain prepare datasets region can used model estimation. example, ‘inst/extdata’ directory VESimHouseholds package contains following files: ‘pums_households.csv’, ‘pums_households.txt’, ‘pums_persons.csv’, ‘pums_persons.txt’.module’s estimation datasets loaded ‘csv’ files ‘inst/extdata’ directory, module code include procedures check data correctness assure model parameters estimated correctly. framework includes function, processEstimationInputs, assist task. processEstimationInputs function 3 arguments: Inp_ls, FileName, ModuleName. ModuleName name module processing. sole purpose argument identify module error messages written log. FileName name file ‘inst/extdata’ directory processed. Inp_ls list data specifications used checking correctness data. explained detail . processEstimationInputs function returns data frame contains data specified file, data errors. Following example processEstimationInputs function used:estimation data may checked, script must describe specifications data. structure specifications best described using example. following code snippet CreateEstimationDatasets.R script:meanings specifications follows:\n- NAME name(s) data column file. name must character string (.e. surrounded quotation marks). multiple columns file specifications except names, can listed first item example. method avoids lot redundant specifications. Note order specifications need order columns file. Also note OK file contains columns specified, long contains columns specified. Columns listed ignored.\n- TYPE data type data contained column. Allowable types 4 primitive types recognized R language (integer, double, character, logical), complex types listed section 6.4, ‘compound’. type must character string.\n- PROHIBIT character vector identifies prohibited data conditions. example, specification “PERSONS” data column example c(“NA”, “< 0”). means values undefined (NA) less 0. symbols may used PROHIBIT specification : NA, ==, !=, <, <=, >, >= (.e. undefined, equal , equal , less , less equal , greater , greater equal ). Note prohibited conditions must represented character strings. one prohibited condition, example, conditions must entered R vector using ‘c()’ function, shown example. absence prohibited conditions represented empty character string (.e. ““).\n- ISELEMENTOF vector specifies set allowed values. used input values must elements set discrete values. vector describing set must type specified input data. Vectors elements entered using ‘c()’ function. example, entries column data values ‘urban’ ‘rural’, specification written c(”urban”, “rural”). absence specification represented empty character string.\n- UNLIKELY vector conditions prohibited, likely occur. conditions identified PROHIBIT ISELEMENTOF specifications produce error met (thereby stopping calculation parameters), conditions identified UNLIKELY specification produce warning message. Vectors conditions entered using ‘c()’ function.\n- TOTAL specifies required total value column data. useful data represents proportions percentages must add 1 100. absence specification represented empty character string.instances impractical include model estimation data files ‘inst/extdata’ directory, necessary model users provide regional model estimation data. , example, source data confidential elements, may necessary preprocess data anonymize including package; source data may large include text file package. cases, source data may processed outside package processed datasets included package datasets R binary files. done, binary data files placed directory named ‘data-raw’ package.large datasets, also possible stored remotely module code retrieve remote storage. done Make2001NHTSDataset.r script VE2001NHTS package. Zip archives public use datasets 2001 National Household Travel Survey stored GitHub repository (https://github.com/VisionEval/NHTS2001). 4 zip archive files stored ‘data’ directory repository: DAYPUB.zip, HHPUB.zip, PERPUB.zip, VEHPUB.zip. zip archive contains compressed ‘csv’ formatted text file containing data interest. process downloading unzipping files takes appreciable amount time, script checks whether already done (presence file ‘data-raw’ directory). done, script calls function handles downloading, unzipping, reading file. also cleans temporary files created zip archive downloaded unzipped.module download datafiles remote storage, module developer need write R code handle requisite tasks. framework build functionality . coding complicated following example commented snippets code Make2001NHTSDataset.r script illustrate. first section code identifies address data repository. second section defines function handles downloading, unzipping, reading dataset stored repository, cleaning temporary files created process. third section applies handler function download NHTS public use household data (HHPUB), selects relevant data fields, saves data R binary file ‘data-raw’ directory. R binary file already exists, data downloaded repository loaded saved file instead.","code":"Hh_df <- VE2001NHTS::Hh_dfImports:\n    visioneval,\n    devtools,\n    VE2001NHTS,\n    data.table#' Household data from Census PUMS\n#'\n#' A household dataset containing the data used for estimating the\n#' CreateHouseholds, PredictWorkers, PredictLifeCycle, PredictIncome, and\n#' PredictHouseType modules derived from from year 2000 PUMS data for Oregon.\n#'\n#' @format A data frame with 65988 rows and 17 variables (there may be a\n#' different number of rows if PUMS datasets are used for different areas):\n#' \\describe{\n#'   \\item{Age0to14}{number of persons in 0 to 14 age group}\n#'   \\item{Age15to19}{number of persons in 15 to 19 age group}\n#'   \\item{Age20to29}{number of persons in 20 to 29 age group}\n#'   \\item{Age30to54}{number of persons in 30 to 54 age group}\n#'   \\item{Age55to64}{number of persons in 55 to 64 age group}\n#'   \\item{Age65Plus}{number of persons 65 years or older}\n#'   \\item{Wkr15to19}{number of workers in 15 to 19 age group}\n#'   \\item{Wkr20to29}{number of workers in 20 to 29 age group}\n#'   \\item{Wkr30to54}{number of workers in 30 to 54 age group}\n#'   \\item{Wkr55to64}{number of workers in 55 to 64 age group}\n#'   \\item{Wkr65Plus}{number of workers 65 years or older}\n#'   \\item{AvePerCapInc}{average per capita income of PUMA, nominal $}\n#'   \\item{HouseType}{housing type (SF = single family, MF = multifamily)}\n#'   \\item{Income}{annual household income, nominal 1999$}\n#'   \\item{HhSize}{number of persons in household}\n#'   \\item{HhType}{household type (Reg = regular household, Grp = group quarters)}\n#'   \\item{HhWeight}{household sample weight}\n#' }\n#' @source CreateEstimationDatasets.R script.\n\"Hh_df\"\ndevtools::use_data(Hh_df, overwrite = TRUE)\nrm(Hh_df)Collate: \n    'CreateEstimationDatasets.R'\n    'CreateHouseholds.R'\n    'PredictWorkers.R'\n    'PredictIncome.R'\n    'AssignLifeCycle.R'#Define a function to estimate household size proportion parameters\n#------------------------------------------------------------------\n#' Calculate proportions of households by household size\n#'\n#' \\code{calcHhAgeTypes} creates a matrix of household types and age\n#' probabilities.\n#'\n#' This function produces a matrix of probabilities that a person in one of six\n#' age groups is in one of many household types where each household type is\n#' determined by the number of persons in each age category.\n#'\n#' @param HhData_df A dataframe of household estimation data as produced by the\n#' CreateEstimationDatasets.R script.\n#' @param Threshold A number between 0 and 1 identifying the percentile\n#' cutoff for determining the most prevalent households.\n#' @return A matrix where the rows are the household types and the columns are\n#' the age categories and the values are the number of persons.\n#' @include CreateEstimationDatasets.R\n#' @exportHh_df <- processEstimationInputs(\n    Inp_ls = PumsHhInp_ls,\n    FileName = \"pums_households.csv\",\n    ModuleName = \"CreateEstimationDatasets\")PumsHhInp_ls <- items(\n  item(\n    NAME =\n      items(\"SERIALNO\",\n            \"PUMA5\",\n            \"HWEIGHT\",\n            \"UNITTYPE\",\n            \"PERSONS\"),\n    TYPE = \"integer\",\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  ),\n  item(\n    NAME = \"BLDGSZ\",\n    TYPE = \"integer\",\n    PROHIBIT = c(\"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  ),\n  item(\n    NAME = \"HINC\",\n    TYPE = \"double\",\n    PROHIBIT = c(\"NA\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  )\n)#Identify the code repository. Note that in order to access data\n#files from a GitHub repository, the beginning of the address must \n#be 'raw.githubusercontent.com' not 'github.com'\nNhts2001Repo <-\n  \"https://github.com/VisionEval/NHTS2001/blob/master/data\"\n  \n#Define a function to handle retrieving a zipped dataset from the\n#repository, unzipping it, reading the unzipped file, and cleaning\n#up temporary files\ngetZipDatasetFromRepo <- function(Repo, DatasetName) {\n  ZipArchiveFileName <- paste0(DatasetName, \".zip\")\n  CsvFileName <- paste0(DatasetName, \".csv\")\n  download.file(paste0(file.path(Repo, ZipArchiveFileName),\"?raw=true\"), ZipArchiveFileName)\n  Data_df <- read.csv(unzip(ZipArchiveFileName), as.is = TRUE)\n  file.remove(ZipArchiveFileName, CsvFileName)\n  Data_df\n}\n\n#Download NHTS 2001 public use household data from repository and \n#process if it has not already been done\nif (!file.exists(\"data-raw/Hh_df.rda\")) {\n  Hh_df <- getZipDatasetFromRepo(Nhts2001Repo, \"HHPUB\")\n  Keep_ <- c(\"HOUSEID\", \"AGE_P1\", \"AGE_P2\", \"AGE_P3\", \"AGE_P4\", \"AGE_P5\", \"AGE_P6\",\n             \"AGE_P7\", \"AGE_P8\", \"AGE_P9\", \"AGE_P10\", \"AGE_P11\", \"AGE_P12\", \"AGE_P13\",\n             \"AGE_P14\", \"CENSUS_D\", \"CENSUS_R\", \"DRVRCNT\", \"EXPFLHHN\", \"EXPFLLHH\",\n             \"FLGFINCM\", \"HBHRESDN\", \"HBHUR\", \"HBPPOPDN\", \"HHC_MSA\", \"HHFAMINC\",\n             \"HHINCTTL\", \"HHNUMBIK\", \"HHR_AGE\", \"HHR_DRVR\", \"HHR_RACE\", \"HHR_SEX\",\n             \"HHSIZE\", \"HHVEHCNT\", \"HOMETYPE\", \"HTEEMPDN\", \"HTHRESDN\", \"HTHUR\",\n             \"HTPPOPDN\", \"LIF_CYC\", \"MSACAT\", \"MSASIZE\", \"RAIL\", \"RATIO16V\",\n             \"URBAN\", \"URBRUR\", \"WRKCOUNT\", \"CNTTDHH\")\n  Hh_df <- Hh_df[, Keep_]\n  save(Hh_df, file = \"data-raw/Hh_df.rda\", compress = TRUE)\n} else {\n  load(\"data-raw/Hh_df.rda\")\n}"},{"path":"ve-estimation.html","id":"module-specifications","chapter":"13 Estimation in VisionEval","heading":"13.4.1.3 Module Specifications","text":"module specifications section module script provides specifications used framework number ways. specifications:\n- Identify level geography model run ;\n- Describe data loaded input files enable unit conversions;\n- Describe data module needs datastore order run;\n- Describe data module produces needs saved datastore;\n- Identify modules module needs call order calculations;\n- Allow framework check load input files modules run;\n- Allow framework check modules compatible one another terms data produce consume;\n- Allow sequence model steps (module calls) simulated check whether module data needs run; ,\n- Provide detailed documentation data produced model run.specifications declared list similar list specifying model estimation data described Section 8.1.1.1. full example shown Appendix E. Following skeleton module specifications list module whose name MyModule. name specifications list must concatenation module name Specifications, example name MyModuleSpecifications. Note functions items item aliases R list function. purpose make specifications easier read.Following detailed descriptions examples component specifications list.RunBy component specifies level geography model run . example, congestion submodel GreenSTEP RSPM models runs Marea level. specification used software framework determine index data read datastore data written datastore. Acceptable values “Region”, “Azone”, “Bzone”, “Marea”. RunBy specification looks like following example:NewInpTable NewSetTable components specify new tables need created datastore accommodate input data data produced module respectively. following specifications required new table created.\n- TABLE: name table created; ,\n- GROUP: type group table put . 3 group types: Global, BaseYear, Year. Global, table created global group datastore. BaseYear table created year group base year year group. example, model base year 2010, table created 2010 group. Year, table created group every model run year. example, run years 2010 2040, table created 2010 group 2040 group.\nFollowing example NewSetTable specification creating Vehicle table model run year group.Inp component specifies model inputs module requires. item list describes one data fields input file. item must following attributes (except OPTIONAL attribute):\n- NAME: names one data fields input file, names used datasets loaded datastore. names must match corresponding column names exception column names input files may contain year multiplier modifiers described Section 6.4.;\n- FILE: name file contains data fields;\n- TABLE: name datastore table datasets put ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- NAVALUE: value used represent NA (.e. missing value) datastore;\n- SIZE: maximum number characters character data (0 numeric data);\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation);\n- UNLIKELY: data conditions unlikely “” applicable (see Section 8.1.1.1 explanation);\n- TOTAL: total values (e.g. 1) “” applicable;\n- DESCRIPTION: descriptions data corresponding names NAME attribute; ,\n- OPTIONAL: optional specification identifies whether dataset optional (see section 8.1.2.1)\nFollowing example Inp component PredictHousingSpecifications VELandUse package. Inp specifications include two items. item lists one field names (.e. column names input file) NAME attribute. Multiple field names can listed item attributes except DESCRIPTION fields. descriptions DESCRIPTION attribute must correspond order dataset names NAME attribute order stored correctly datastore. values may entered TYPE UNITS attributes described Section 6.3. noted UNITS attribute must include ‘year’ (‘currency’ type) ‘multiplier’ information. information part input file field names instead (relevant). explained detail Section 6.4. framework uses information Inp read input files, check whether data correct, save data correct location datastore.Get component contains one items identify data module need retrieved datastore. Note Get component must identify datasets module requires (included package), including specified Inp component. datasets identified Inp component automatically made available module. item Get component specifies attributes one related datasets follows:\n- NAME: names one datasets loaded;\n- TABLE: name table datasets located ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation); ,\n- OPTIONAL: optional specification identifies whether dataset optional (see section 8.1.2.1)\nUnlike ‘Inp’ specifications, ‘Get’ specifications UNITS must include ‘year’ information ‘currency’ types. necessary order framework convert currency data requested datastore year denomination module needs. UNITS attribute may also include multiplier specification module needs values modified way. example, module needs VMT thousands miles, UNITS specification ‘MI.1e3’. Section 6.3 provides information ‘year’ ‘multiplier’ options added UNITS specification. Following example Get component AssignRoadMilesSpecifications VETransportSupply package.Set component contains one items describing datasets saved datastore. item Set component specifies attributes one related datasets follows:\n- NAME: names one datasets saved;\n- TABLE: name table datasets saved ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- NAVALUE: value used represent NA datastore;\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation);\n- SIZE: maximum number characters character data (0 numeric data); ,\n- DESCRIPTION: descriptions data corresponding names NAME attribute\nrequirements UNITS attribute described Get component items. Following example Set component AssignRoadMilesSpecifications VETransportSupply package.noted may possible prespecify SIZE attribute dataset. example, unique household ID assigned, SIZE attribute depend number households must calculated module run. circumstance, SIZE attribute omitted item module function must calculate include calculated value attribute output dataset. following code snippet CreateHouseholds module code VESimHouseholds package shows done. example, list data module function returns named Out_ls. household ID (HhId) dataset Household table Year group. R attributes function called set SIZE attribute HhId dataset equal maximum number characters entries dataset.last component module specifications list Call component. optional component module specifications included module calls modules module may called modules. Following Call component examples. first example module may called. second example module calls another module. Section 8.1.2.2 explains module calling detail.","code":"MyModuleSpecifications <- list(\n  RunBy = ...,\n  NewInpTable = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  NewSetTable = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Inp = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Get = items(\n     item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Set = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Call = items(\n     item(\n      ...\n    ),\n    item(\n      ...\n    )\n  )\n)RunBy = \"Marea\",NewSetTable = items(\n  item(\n    TABLE = \"Vehicle\",\n    GROUP = \"Year\"\n  )\n),Inp = items(\n  item(\n    NAME =\n      items(\n        \"SFDU\",\n        \"MFDU\",\n        \"GQDU\"),\n    FILE = \"bzone_dwelling_units.csv\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"integer\",\n    UNITS = \"DU\",\n    NAVALUE = -1,\n    SIZE = 0,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\",\n    DESCRIPTION =\n      items(\n        \"Number of single family dwelling units (PUMS codes 01 - 03) in zone\",\n        \"Number of multi-family dwelling units (PUMS codes 04 - 09) in zone\",\n        \"Number of qroup quarters population accommodations in zone\"\n      )\n  ),\n  item(\n    NAME = items(\n      \"HhPropIncQ1\",\n      \"HhPropIncQ2\",\n      \"HhPropIncQ3\",\n      \"HhPropIncQ4\"),\n    FILE = \"bzone_hh_inc_qrtl_prop.csv\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"double\",\n    UNITS = \"NA\",\n    NAVALUE = -1,\n    SIZE = 0,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\",\n    DESCRIPTION =\n      items(\n        \"Proportion of Bzone households (non-group quarters) in 1st quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 2nd quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 3rd quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 4th quartile of Azone household income\"\n      )\n  )\n),Get = items(\n  item(\n    NAME = \"Marea\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"character\",\n    UNITS = \"ID\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME =\n      items(\n        \"FwyLaneMi\",\n        \"ArtLaneMi\"),\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"distance\",\n    UNITS = \"MI\",\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME = \"Marea\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"character\",\n    UNITS = \"ID\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME = \"UrbanPop\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"people\",\n    UNITS = \"PRSN\",\n    PROHIBIT = c(\"NA\", \"<= 0\"),\n    ISELEMENTOF = \"\"\n  )\n),Set = items(\n  item(\n    NAME = \"FwyLaneMiPC\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"compound\",\n    UNITS = \"MI/PRSN\",\n    NAVALUE = -1,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    SIZE = 0,\n    DESCRIPTION = \"Ratio of urbanized area freeway and expressway lane-miles to urbanized area population\"\n  )\n)attributes(Out_ls$Year$Household$HhId)$SIZE <- max(nchar(Out_ls$Year$Household$HhId))  #Call component for a module that may be called\nCall = TRUE\n\n#Call component for a module that calls another module\nCall = items(\n  CalcDvmt = \"VEHouseholdTravel::CalculateHouseholdDvmt\"\n)"},{"path":"ve-estimation.html","id":"optional-attribute","chapter":"13 Estimation in VisionEval","heading":"13.4.1.4 OPTIONAL Attribute","text":"Module developers can use OPTIONAL attribute identify optional inputs data retrieved datastore. enables modules written respond optional inputs. example, GreenSTEP RSPM models, users may provide inputs average carbon intensity fuels (grams CO2e per megajoule) model run year. allows users model scenario state regulations require average carbon intensity fuels reduced time. user supplies data, models calculate carbon emissions using inputs. , model calculates emissions using data carbon intensities different fuel types mix fuel types.OPTIONAL attribute item missing, item optional. OPTIONAL attribute missing set equal FALSE item optional well. OPTIONAL attribute present set equal TRUE framework regard item optional (OPTIONAL = TRUE).input (Inp) item identified optional, framework checks whether identified input file present. file present, framework process data load datastore. Otherwise item ignored. Note optional inputs can’t combined non-optional inputs file. cause error. Also since framework automatically supply inputs module, must optional Get items corresponding optional Inp items. framework sees optional Get item, checks datastore see whether optional dataset(s) present. , retrieves .","code":""},{"path":"ve-estimation.html","id":"call-specification","chapter":"13 Estimation in VisionEval","heading":"13.4.1.5 CALL Specification","text":"calculation code needs executed number times, best define function encapsulate code call function whenever calculation needs carried . reduces errors code maintenance hassles. Likewise, module code duplication reduced VisionEval model system allowing modules call modules calculation services. example, BudgetHouseholdDvmt module VETravelPerformance package calls CalculateAltModeTrips module VEHouseholdTravel package recalculate trips alternate modes (walk, bike, transit) reflect budget-adjusted household DVMT. Calling module involved just calling function carries module’s calculations module function work unless supplied datasets identified Get specifications. course calling module include specifications specifications, create significant potential coding errors maintenance problems (e.g. called module module modified later time). reason software design includes functionality calling modules simple manner leaves data management details framework behind scenes.module’s call status specified Call component module specifications. 3 possibilities module’s call status. First, module may called modules. case specification Call = TRUE. Second, module may call modules. case call specification list identifies modules called, assigning reference module alias (.e. alias = module) shown following example:alias name called module referred calling module code. module name called module. VisionEval framework software identifies package module resides ModulesByPackage_df table ModelState_ls list. also possible hard code package name call definition. example CalcDvmt alias assign VEHouseholdTravel::CalculateHouseholdDvmt. discouraged, however, limits ability maintain different versions packages module modifications.third possibility module may called calls modules. case Call component included module specifications.important restrictions module calling. First, module may called call another module. restriction exist, deeply nested module calls make debugging understanding model works difficult. Second, module may called inputs (.e. Inp component). reason restriction function called modules provide calculation services hidden model users. Unless called module also called directly model run script, way model user know supply input files without diving details module calling.framework following module run calls one modules. modules called, framework:\n1) Reads ‘Get’ specifications called module, gets datasets datastore, puts standard list structure, adds list returned calling module component whose name assigned alias. example , retrieved datasets component named “CalcDvmt”.\n2) Creates list holds values called module functions. called module function component list whose name assigned alias. example , function list one component named “CalcDvmt” contains value CalculateHouseholdDVMT function.\n3) framework passes two lists calling module run. Thus calling module function must written accept two arguments rather one.calling module code invokes called module calling function list framework passes passing data needs data list. Following example , data list called ‘L’ function list called ‘M’, CalculateHouseholdDVMT module function called AssignHhVehiclePowertrain module follows:","code":"Call = items(\n  CalcDvmt = \"CalculateHouseholdDvmt\",\n  ReduceDvmt = \"ApplyDvmtReductions\",\n  CalcVehTrips = \"CalculateVehicleTrips\",\n  CalcAltTrips = \"CalculateAltModeTrips\"\n)Call = items(\n  CalcDvmt = \"VEHouseholdTravel::CalculateHouseholdDvmt\"\n)M$CalcDvmt(L$CalcDvmt)"},{"path":"ve-estimation.html","id":"module-function","chapter":"13 Estimation in VisionEval","heading":"13.4.1.6 Module Function","text":"function definitions section module script used define functions used implement module. One functions main function called software framework run module. function must name module name. example, main function CreateHouseholds module named CreateHouseholds well. function must written accept one argument, list, convention named L module calls modules, two arguments (explained previous section) module calls modules. list contains datasets identified Get component module data specifications. structure list described Section 7. main function returns list contains datasets identified Set component module data specifications structured described Section 7. software framework includes function, initDataList, initialize outputs list proper structure Global, Year, BaseYear components. module code fill component components specified tables datasets within tables. Following simple example AssignTransitService module VETransportSupply package. First, module’s Set items provide context module code:AssignTransitService function returns one dataset called TranRevMiPc. dataset placed Marea table Year group (.e. group model run year). Following function definition:module include procedures necessary check errors output datasets. cases won’t necessary module passes tests development framework checks datasets passed module meet module’s specifications. However may conditions combinations acceptable inputs produce unacceptable outputs. cases, module code check unacceptable outputs found, report framework reporting model user stopping model run. module stop model run. Instead composes descriptive error message adds Errors component module outputs list. one error, Errors component vector error messages. framework writes error message(s) model run log stops model execution.Warnings handled similar way. module code checks warning conditions (.e. model execution stopped users condition) finds , composes warning message added Warnings component module outputs list. framework writes warnings messages model run log.functionality processing module errors warnings used primarily Initialize modules explained Section 8.1.5.","code":"Set = items(\n  item(\n    NAME = \"TranRevMiPC\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"compound\",\n    UNITS = \"MI/PRSN\",\n    NAVALUE = -1,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    SIZE = 0,\n    DESCRIPTION = \"Ratio of bus-equivalent revenue-miles (i.e. revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population\"\n  )\n)AssignTransitService <- function(L) {\n  #Set up\n  #------\n  #Fix seed as synthesis involves sampling\n  set.seed(L$G$Seed)\n  #Define vector of modes\n  Md <- as.character(BusEquivalents_df$Mode)\n  #Define vector of Mareas\n  Ma <- L$Year$Marea$Marea\n\n  #Calculate bus equivalent revenue miles\n  #--------------------------------------\n  #Make table of revenue miles by Marea\n  RevMi_df <- data.frame(L$Year$Marea[paste0(Md, \"RevMi\")])\n  colnames(RevMi_df) <- Md\n  rownames(RevMi_df) <- Ma\n  RevMi_MaMd <- as.matrix(RevMi_df)\n  #Calculate the bus equivalent revenue miles\n  BusEq_Md <- BusEquivalents_df$BusEquivalents\n  names(BusEq_Md) <- Md\n  BusEqRevMi_Ma <-\n    rowSums(sweep(RevMi_MaMd, 2, BusEq_Md, \"*\"))[Ma]\n\n  #Calculate the bus equivalent revenue miles per capita\n  #-----------------------------------------------------\n  #Calculate population in the urbanized area\n  UrbanPop_Ma <-\n    tapply(L$Year$Bzone$UrbanPop, L$Year$Bzone$Marea, sum)[Ma]\n  #Calculate Marea bus equivalent revenue miles per capita\n  TranRevMiPC_Ma <- BusEqRevMi_Ma / UrbanPop_Ma\n\n  #Return the results\n  #------------------\n  #Initialize output list\n  Out_ls <- initDataList()\n  Out_ls$Year$Marea <-\n    list(TranRevMiPC = TranRevMiPC_Ma)\n  #Return the outputs list\n  Out_ls\n}"},{"path":"ve-estimation.html","id":"module-documentation","chapter":"13 Estimation in VisionEval","heading":"13.4.1.7 Module Documentation","text":"recommended module documentation included top module script file possible make easier review analyze module. standardized approach developed produces documentation markdown format can viewed web page converted formats printing. end module script documentModule function like documentModule(\"PredictIncome\"). documentModule parses module script, extracts documentation block head file inserts text, tables, figures saved script inserted documentation using special tags explained . addition, documentModule function reads module specifications creates formatted tables showing module inputs, datasets used, datasets produced. documentation file(s) saved model_docs directory inst/extdata directory turn directory installed package. documentModule function called end script rest script must executed produce datasets inserted documentation file. Following example documentation block looks like.several things note example. first text block commented (preceded #). Since R doesn’t support block comments, line must commented. may look way example word wrapping, every line commented. Second, start end documentation block denoted matching <doc> <\/doc> tags. parser uses extract documentation script. document extracted, leading comments stripped , resulting markdown-formatted text. comment (#) symbols text actually markdown formatting identify headings different levels. Documentation can include standard markdown formatting emphasis, links, tables. addition, documentation can include special tags shown example. Three types tags available:<txt:xxxx> inserts block text contained referenced object. example <txt:GQIncModel_ls$Summary> tag example insert summary statistics group quarters income model.<txt:xxxx> inserts block text contained referenced object. example <txt:GQIncModel_ls$Summary> tag example insert summary statistics group quarters income model.<tab:xxxx> inserts data can presented table data frame. example <tab:HHIncModel_ls$MeanCompare> tag example insert table compares observed estimated mean values.<tab:xxxx> inserts data can presented table data frame. example <tab:HHIncModel_ls$MeanCompare> tag example insert table compares observed estimated mean values.<fig:xxxx> creates markdown reference image file show proper place markdown displayed browser converted another document form. example <fig:reg-hh-inc_obs-vs-est_distributions.png> tag example insert figure compares observed estimated income distributions markdown displayed.<fig:xxxx> creates markdown reference image file show proper place markdown displayed browser converted another document form. example <fig:reg-hh-inc_obs-vs-est_distributions.png> tag example insert figure compares observed estimated income distributions markdown displayed.helpful include test code module script aid module development. framework includes testModule function assist module testing. function described detail Section 9.2.1. Testing requires sample input files containing datasets specified modules Inp specifications. stored ‘inputs’ directory ‘tests’ directory. ‘tests’ directory also must contain ‘defs’ directory contains required model definitions files (see Section 6.1). Finally, ‘tests’ directory must contain datastore type specified ‘run_parameters.json’ file, contains datasets specified modules Get specifications. first stage module testing, module specifications checked, input files checked, presence required data checked, input list (L) returned use module development. test, DoRun argument testModule function needs set FALSE. module code written, module tested check whether module code working correctly returns results consistent Set specifications module. test, DoRun argument testModule function must TRUE. module tested, important comment testing code script must run package built. Following example testing code module commented .","code":"#<doc>\n## PredictIncome Module\n#### September 6, 2018\n#\n#This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides.\n#\n### Model Parameter Estimation\n#Household income models are estimated for *regular* households and for *group quarters* households.\n#\n#The household income models are estimated using Census public use microsample (PUMS) data that are compiled into a R dataset (HhData_df) by the 'CreateEstimationDatasets.R' script when the VESimHouseholds package is built. The data that are supplied with the VESimHouseholds package downloaded from the VisionEval repository may be used, but it is preferrable to use data for the region being modeled. How this is done is explained in the documentation for the *CreateEstimationDatasets.R* script.\n#\n#The household income models are linear regression models in which the dependent variable is a power transformation of income. Power transformation is needed in order to normalize the income data distribution which has a long right-hand tail. The power transform is found which minimizes the skewness of the income distribution. The power transform for *regular* households is:\n#\n#<txt:HHIncModel_ls$Pow>\n#\n#The power transform for *group quarters* households is:\n#\n#<txt:GQIncModel_ls$Pow>\n#\n#The independent variables for the linear models are power transformed per capita income for the area, the number of workers in each of 4 worker age groups (15-19, 20-29, 30-54, 55-64), and the number of persons in the 65+ age group. In addition, power-transformed per capita income is interacted with each of the 4 worker groups and 65+ age group variable. The summary statistics for the *regular* household model are as follows:\n#\n#<txt:HHIncModel_ls$Summary>\n#\n#The summary statistics for the *group quarters* household model are as follows:\n#\n#<txt:GQIncModel_ls$Summary>\n#\n#An additional step must be carried out in order to predict household income. Because the linear model does not account for all of the observed variance, and because income is power distribution, the average of the predicted per capita income is less than the average per capita income of the population. To compensate, random variation needs to be added to each household prediction of power-transformed income by randomly selecting from a normal distribution that is centered on the value predicted by the linear model and has a standard deviation that is calculated so as the resulting average per capita income of households match the input value. A binary search process is used to find the suitable standard deviation. Following is the comparison of mean values for the observed *regular* household income for the estimation dataset and the corresponding predicted values for the estimation dataset.\n#\n#<tab:HHIncModel_ls$MeanCompare>\n#\n#The following figure compares the distributions of the observed and predicted incomes of *regular* households.\n#\n#<fig:reg-hh-inc_obs-vs-est_distributions.png>\n#\n#Following is the comparison of mean values for the observed *group quarters* household income for the estimation dataset and the corresponding predicted values for the estimation dataset.\n#\n#<tab:GQIncModel_ls$MeanCompare>\n#\n#The following figure compares the distributions of the observed and predicted incomes of *groups quarters* households.\n#\n#<fig:gq-hh-inc_obs-vs-est_distributions.png>\n#\n### How the Module Works\n#This module runs at the Azone level. Azone household average per capita income and group quarters average per capita income are user inputs to the model. The other model inputs are in the datastore, having been created by the CreateHouseholds and PredictWorkers modules. Household income is predicted separately for *regular* and *group quarters* households. Per capita income is transformed using the estimated power transform, the model dependent variables are calculated, and the linear model is applied. Random variation is applied so that the per capita mean income for the predicted household income matches the input value.\n#\n\n#<\/doc>\n"},{"path":"ve-estimation.html","id":"initialize-module","chapter":"13 Estimation in VisionEval","heading":"13.4.1.8 Initialize Module","text":"Although framework performs several checks module input data based module specifications, times additional checks inputs necessary possibly transformations well. example, several datasets proportions data must add 1 across datasets. example, 4 input datasets PredictHousing module *VELandUse** package give proportions households Bzone 4 income quartiles Azone Bzones located . inputs checked assure sum quartile proportions Bzone adds one. sums close 1, model user needs alerted fact can correct input file. sums close 1 exactly 1 (due rounding errors preparing inputs), inputs automatically adjusted equal 1 saved datastore. module developer needs establish complex checks transformations like , special module name Initialize.Initialize module, module specifications identify input datasets need checked. done manner described Section 8.1.2. module specifications Get Set components since purpose Initialize module process inputs. can one Initialize module package inputs need additional checking, regardless module package use , need processed Initialize module. Datasets listed Inp specifications Initialize module must included Inp specifications module package.model intialized initializeModel function run_model.R script (Section 5 Appendix ), module packages run script checked presence Initialize module. found added list modules require input processing. initializeModel function processes inputs Initialize module two steps. first step, performs standard input processing done modules (input files read datasets checked completeness correctness). output checking process standard outputs list Global, BaseYear, Year components. second step, framework calls Initialize module function passes outputs list first step. Initialize module whatever enhanced data checking transformation necessary returns outputs list structure inputs list addition Errors Warnings components (see Section 8.1.3). Several VisionEval packages include Initialize modules can used examples.","code":""},{"path":"ve-estimation.html","id":"the-instextdata-directory","chapter":"13 Estimation in VisionEval","heading":"13.4.2 The inst/extdata Directory","text":"convention, ‘inst/extdata’ directory standard place put external (raw) data files opposed R datasets placed ‘data’ directory. model estimation data kept. Section 8.1.1.1 provides detailed explanation. directory include subdirectory named ‘sources’ hold reports external documentation needed.","code":""},{"path":"ve-estimation.html","id":"the-data-raw-directory","chapter":"13 Estimation in VisionEval","heading":"13.4.3 The data-raw Directory","text":"instances impractical include model estimation data files ‘inst/extdata’ directory, necessary model users provide regional model estimation data. , example, source data confidential elements, may necessary preprocess data anonymize including package; source data may large include text file package. cases, source data may processed outside package processed datasets included package datasets R binary files. done, binary data files placed directory named ‘data-raw’ package.","code":""},{"path":"ve-estimation.html","id":"the-tests-directory","chapter":"13 Estimation in VisionEval","heading":"13.4.4 The tests Directory","text":"‘tests’ directory contains R scripts results module tests. scripts directory contains scripts used carry module tests. directory also contains subdirectories model types module tested (e.g VE-RSPM, VE-State, VE-RPAT). Two approaches available handing module data includes input files module uses, defs files, datastore contains datasets used module aside input files. data can included package may kept central repository. included package, must placed directory corresponding model. necessary avoid conflicts test data different models. scripts directory includes testing script runs tests modules package particular module. example, script testing modules VE-State application named vestate_test.R. scripts directory also includes test.R script calls individual model test scripts automated package testing. centralized data testing approach used, test_functions.R script needs included. includes functions needed support centralized test data approach. test process still finalized. future functionality included framework software. Following example test script using central data approach:","code":"#vestate_test.R\n#--------------\n\n#Load packages and test functions\nlibrary(visioneval)\nlibrary(filesstrings)\nsource(\"tests/scripts/test_functions.R\")\n\n#Define test setup parameters\nTestSetup_ls <- list(\n  TestDataRepo = \"../Test_Data/VE-State\",\n  DatastoreName = \"Datastore.tar\",\n  LoadDatastore = FALSE,\n  TestDocsDir = \"vestate\",\n  ClearLogs = TRUE,\n  # SaveDatastore = TRUE\n  SaveDatastore = FALSE\n)\n\n#Define the module tests\nTests_ls <- list(\n  list(ModuleName = \"CreateHouseholds\", LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictWorkers\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"AssignLifeCycle\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictIncome\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE)\n)\n\n#Set up, run tests, and save test results\nsetUpTests(TestSetup_ls)\ndoTests(Tests_ls, TestSetup_ls)\nsaveTestResults(TestSetup_ls)\n"},{"path":"ve-buildprocess.html","id":"ve-buildprocess","chapter":"14 VisionEval Module Build Process","heading":"14 VisionEval Module Build Process","text":"knitr::opts_chunk$set(echo = TRUE, results=‘hide’)","code":""},{"path":"ve-buildprocess.html","id":"rebuilding-visioneval","chapter":"14 VisionEval Module Build Process","heading":"14.1 (Re)Building VisionEval","text":"chapter describes build process VisionEval. VisionEval “build process” (re)builds VisionEval packages incorporate default, localized, custom data module’s model estimation data processing steps order update data resources estimated model coefficients.chapter sets process updating datasets VisionEval modules use model runs.VisionEval models access updated data requires re-building VisionEval package source. reason package must rebuilt available use VisionEval VisionEval creates R environment VisionEval modules built R packages.","code":""},{"path":"ve-buildprocess.html","id":"what-is-an-r-package","chapter":"14 VisionEval Module Build Process","heading":"14.1.1 What is an R “package”?","text":"R community-based project depends upon community re-usable, reproducible, shareable code. facilitate , R uses standardized method bundling collection code data built shareable binary “package”. Packages can downloaded installed local R library. R environment can access packages installed local R library.","code":""},{"path":"ve-buildprocess.html","id":"why-is-this-relevant","chapter":"14 VisionEval Module Build Process","heading":"14.1.2 Why is this relevant?","text":"VisionEval relies fundamental package framework sharing code data modules. order alter data used within VisionEval module (.e., R Package) must repackaged, re-built, using new data. Otherwise, source data altered re-built, VisionEval environment fails recognize updated data.","code":""},{"path":"ve-buildprocess.html","id":"how-are-packages-built","chapter":"14 VisionEval Module Build Process","heading":"14.1.3 How are packages built?","text":"","code":""},{"path":"ve-buildprocess.html","id":"build-vs-runtime-environment","chapter":"14 VisionEval Module Build Process","heading":"14.1.3.1 Build vs Runtime Environment","text":"crucial users understand distinction VisionEval runtime environment VisionEval build environment. VisionEval begins source code data build environment VisionEval R packages built, runtime environment created. VisionEval models can run runtime environment built packages loaded (R session) used R perform model steps. VisionEval runtime environment referred VisionEval point document.","code":""},{"path":"ve-buildprocess.html","id":"where-do-we-start-the-re-building-process","chapter":"14 VisionEval Module Build Process","heading":"14.2 Where do we Start the ‘Re-Building’ Process","text":"process obtaining source code used rebuilding updating module within VisionEval depends user obtained current runtime:Users installed pre-built VisionEval runtime environment using VisionEval installer.Users installed pre-built VisionEval runtime environment using VisionEval installer.Users created VisionEval runtime environment build environment obtaining source code GitHub.Users created VisionEval runtime environment build environment obtaining source code GitHub.processes types users described . Additionally, process advanced users may want build VisionEval natively source code development non-Windows computers described end section.","code":""},{"path":"ve-buildprocess.html","id":"users-who-installed-visioneval-through-the-visioneval-installer","chapter":"14 VisionEval Module Build Process","heading":"14.2.1 Users who installed VisionEval through the VisionEval installer","text":"Users point full VisionEval installed running. visit https://visioneval.org/docs/getting-started.html#installation--setup follow path 1 listed download install base model.","code":""},{"path":"ve-buildprocess.html","id":"software-requirements","chapter":"14 VisionEval Module Build Process","heading":"14.2.1.1 Software Requirements","text":"R – R windows can downloaded : https://cran.rstudio.com/ (recent version usually supported VisionEval within weeks release). suggested use R version aligns VE R version. Cran website includes links past versions although current one often highlighted first page.R – R windows can downloaded : https://cran.rstudio.com/ (recent version usually supported VisionEval within weeks release). suggested use R version aligns VE R version. Cran website includes links past versions although current one often highlighted first page.RStudio – RStudio windows can downloaded : https://posit.co/download/rstudio-desktop/RStudio – RStudio windows can downloaded : https://posit.co/download/rstudio-desktop/","code":""},{"path":"ve-buildprocess.html","id":"rebuilding-package","chapter":"14 VisionEval Module Build Process","heading":"14.2.1.2 (Re)Building Package","text":"Rebuilding package VisionEval setup require source code specific build installed (specific R, operating system, etc.) made available zip file can get Github release. sure pick version corresponding installed version R VisionEval. zip file contains source code default data VisionEval packages can easily installed VisionEval using R native command “install.packages” RStudio build tools. user can download unzip zip file VisionEval directory. unzipping src folder present alongside ve-lib. VisionEval package present sub-folder src can change files rebuild package described .source code packages contains code data upon modules built. data can updated localized custom data module can rebuilt VisionEval. process rebuilding explained detail section document.","code":""},{"path":"ve-buildprocess.html","id":"users-who-created-visioneval-through-source-code-from-github","chapter":"14 VisionEval Module Build Process","heading":"14.2.2 Users who created VisionEval through source code from GitHub","text":"advanced users complete VisionEval built using source code GitHub, process updating rebuilding individual modules packages can done without need download additional source code material. version source code, easily installable R, created “build process”.Note: want install complete VisionEval model source code please see section VisionEval Full Build Process.","code":""},{"path":"ve-buildprocess.html","id":"additional-software-requirements","chapter":"14 VisionEval Module Build Process","heading":"14.2.2.1 Additional Software Requirements","text":"RTools – RTools windows can downloaded : https://cran.r-project.org/bin/windows/Rtools/rtools43/files/rtools43-5493-5475.exe.RTools – RTools windows can downloaded : https://cran.r-project.org/bin/windows/Rtools/rtools43/files/rtools43-5493-5475.exe.Git – Git windows can downloaded : https://git-scm.com/download/win.Git – Git windows can downloaded : https://git-scm.com/download/win.","code":""},{"path":"ve-buildprocess.html","id":"rebuilding-packages-using-package-sources","chapter":"14 VisionEval Module Build Process","heading":"14.2.2.2 (Re)Building Packages Using Package Sources","text":"source code created build process can used rebuild packages VisionEval setup. process rebuilding , difference location source code relative VisionEval setup.VisionEval build environment allows single VisionEval package created, modified, installed (aka “built”) existing VisionEval previously created full install build. useful creating modifying single packages constituent modules within VisionEval framework. build process can used incorporate localized custom data VisionEval making change module rebuilding .","code":""},{"path":"ve-buildprocess.html","id":"visioneval-full-build-process","chapter":"14 VisionEval Module Build Process","heading":"14.2.3 VisionEval Full Build Process","text":"Advanced users may want build VisionEval natively source code development non-Windows computers. process can take several hours first time runs. details, see instruction build/Building.md.Install RTools. easiest way download run RTools windows install. RTool4.0 tested, RTool4.3 also work.Install RTools. easiest way download run RTools windows install. RTool4.0 tested, RTool4.3 also work.Clone “fork” copy VisionEval Github repository (https://github.com/VisionEval/VisionEval) directory choice (e.g., C:/Users/<``user name``>/Documents/VisionEval-Source) using:Clone “fork” copy VisionEval Github repository (https://github.com/VisionEval/VisionEval) directory choice (e.g., C:/Users/<``user name``>/Documents/VisionEval-Source) using:git clone ``git@github.com:VisionEval``/``VisionEval.git`` VisionEval-Source\ndevelopers, separate development repository latest unreleased source code: https://github.com/VisionEval/VisionEval-Dev\nUsers familiar git GitHub can simply download repository zip file (https://github.com/VisionEval/VisionEval/archive/refs/heads/master.zip). either case, download large (900MB compressed download 3.4GB uncompressed disk).\ngit clone ``git@github.com:VisionEval``/``VisionEval.git`` VisionEval-SourceFor developers, separate development repository latest unreleased source code: https://github.com/VisionEval/VisionEval-DevFor developers, separate development repository latest unreleased source code: https://github.com/VisionEval/VisionEval-DevUsers familiar git GitHub can simply download repository zip file (https://github.com/VisionEval/VisionEval/archive/refs/heads/master.zip). either case, download large (900MB compressed download 3.4GB uncompressed disk).Users familiar git GitHub can simply download repository zip file (https://github.com/VisionEval/VisionEval/archive/refs/heads/master.zip). either case, download large (900MB compressed download 3.4GB uncompressed disk).Start VisionEval double clicking VisionEval.RProj file newly cloned VisionEval-Source directory.Start VisionEval double clicking VisionEval.RProj file newly cloned VisionEval-Source directory.Start build process entering ve.build``() console. start process downloading installing every R package dependencies required VisionEval well installing VisionEval framework specific packages. output look something like :Start build process entering ve.build``() console. start process downloading installing every R package dependencies required VisionEval well installing VisionEval framework specific packages. output look something like :take , potentially hour. completed, ’ve successfully performed full build install VisionEval runtime environment.new folder called ‘built’ created source directory, populated sub-folder R-version used build VisionEval :\\VisionEval-Source\\built\\visioneval\\<R version number e.g., 4.1.``3``>\\contain key folders:\nsrc: VisionEval package source.\nve-lib: package library containing built installed R packages.\nruntime: built model runtime.\ncontain key folders:src: VisionEval package source.src: VisionEval package source.ve-lib: package library containing built installed R packages.ve-lib: package library containing built installed R packages.runtime: built model runtime.runtime: built model runtime.","code":""},{"path":"common-use-cases.html","id":"common-use-cases","chapter":"15 Common Use Cases","heading":"15 Common Use Cases","text":"chapter includes two common use cases:first case study example substitutes default household population data (estimation dataset) locally-specific US Census data Public Use Microdata Sample (PUMS) - valuable way get VE model reflect local conditions - rebuilds necessary packages reliant PUMS data estimation work.first case study example substitutes default household population data (estimation dataset) locally-specific US Census data Public Use Microdata Sample (PUMS) - valuable way get VE model reflect local conditions - rebuilds necessary packages reliant PUMS data estimation work.second case study example shows use different data used build internal VisionEval modules – case adjust future fleet composition information.second case study example shows use different data used build internal VisionEval modules – case adjust future fleet composition information.Use Cases identify differences rebuilding package data depending type VisionEval install process used.","code":""},{"path":"common-use-cases.html","id":"case-study-1-using-local-pums-data","chapter":"15 Common Use Cases","heading":"15.1 Case Study 1: Using local PUMS data","text":"","code":""},{"path":"common-use-cases.html","id":"what-are-pums","chapter":"15 Common Use Cases","heading":"15.1.1 What are PUMS?","text":"summarize, US Census Bureau provides anonymized data two general forms:Aggregated census tables - tables provide total estimated counts topic (e.g., total number persons age group). smallest geographic unit census blocks, data available level.Aggregated census tables - tables provide total estimated counts topic (e.g., total number persons age group). smallest geographic unit census blocks, data available level.Disaggregated PUMS - sample individual record-level data person household counted. (e.g., persons age, gender, employment household belong .). smallest geographic unit Public Use Microdata Areas (PUMAs), aggregated areas protect confidentiality must include least 100,000 persons.Disaggregated PUMS - sample individual record-level data person household counted. (e.g., persons age, gender, employment household belong .). smallest geographic unit Public Use Microdata Areas (PUMAs), aggregated areas protect confidentiality must include least 100,000 persons.people least somewhat familiar US Census information collect. primary function US Census collect count people living United States federal allocation political representatives taxes. However, US Census since expanded include variety useful statistical information regarding demographics employment. Census data spatially organized hierarchy sub-divided spatial areas, smallest called Census Blocks, aggregate Block Groups, Tracts, Counties, States. See example figure :Example Census geographic hierarchysource: US CensusThe primary census program Decennial Census, comprehensive count collected every 10 years. However, populations can significantly change within decade, American Community Survey (ACS) created obtain data frequent intervals. Rather full census, ACS collects ongoing samples monthly basis. data used publish statistically adjusted estimates 1-year, 3-year, 5-year estimates. 1-year estimates use recent data least reliable sample smaller, whereas 5-year estimate uses data previous 5 years. Although exactly equivalent, 1- 5-year estimates often considered analogous 1% 5% sample population.summary tables provide total count persons, aggregated, meaning shows total number persons topic, combination topics. example, may know count people age group, gender, occupation, household size; know count particular combination variables, household belong. reason, US Census Bureau also releases calls Public Use Microdata Sample (PUMS) using sample data ACS.generalized approach updating data within VE package set .","code":""},{"path":"common-use-cases.html","id":"instructions","chapter":"15 Common Use Cases","heading":"15.1.2 Instructions","text":"","code":""},{"path":"common-use-cases.html","id":"step-1-gather-pums-and-replace-data","chapter":"15 Common Use Cases","heading":"15.1.2.1 Step 1) Gather PUMS and replace data:","text":"example replacing default PUMS data VESimHouseholds package project specific local PUMS data. Based obtained VisionEval navigate src directory. source code package located VESimHouseholds directory (e.g, C:/Users/<``user`` ``name``>/Documents/VisionEval``/``src``/``VESimHouseholds).Packages require data certain format, case VESimHouseholds package requires two input data files pums_households.csv pums_persons.csv.","code":""},{"path":"common-use-cases.html","id":"a-download-pums-data","chapter":"15 Common Use Cases","heading":"15.1.2.1.1 A) Download PUMS data","text":"US Census data available Census’ website (https://www.census.gov/), provides interface search, browse, download Census data variety formats, typical Comma Separated Value (CSV) files. PUMS data can filtered using Census data browser, entire PUMS tables States can downloaded legacy FTP website: https://www2.census.gov/programs-surveys/acs/data/pums/files named according file type, (e.g., csv_), record type (“h” household “p” persons), State abbreviation. example, \"csv_haz.zip\" household PUMS data Arizona. Additional documentation can found : https://www.census.gov/programs-surveys/acs/microdata/access.html","code":""},{"path":"common-use-cases.html","id":"b-process-pums-data.","chapter":"15 Common Use Cases","heading":"15.1.2.1.2 B) Process PUMS data.","text":"VE originally coded using older PUMS file, slightly different field names must renamed. name mapping key table :Depending file, pre-processing may required, removing NAs converting categories. example, missing NA values 0 HINC, shifting UNITYPE scale {1,2,3} {0,1,2}, aggregating 4-level WKL categories 3-levels WRKLYR. conversions made, issues may arise package building step.","code":""},{"path":"common-use-cases.html","id":"c-replace-pums-files","chapter":"15 Common Use Cases","heading":"15.1.2.1.3 C) Replace PUMS files","text":"processing complete, replace old files src/VESimHouseholds/inst/extdata new pums_households.csv pums_persons.csv. External data VisionEval packages typically located inst``/``exdata folder.","code":""},{"path":"common-use-cases.html","id":"step-2-package-building","chapter":"15 Common Use Cases","heading":"15.1.2.2 Step 2) Package building","text":"critical objective re-building package build package package source VisionEval environment. guide uses RStudio interface procedure rebuilding single package.","code":""},{"path":"common-use-cases.html","id":"a-initialize-the-visioneval-environment","chapter":"15 Common Use Cases","heading":"15.1.2.2.1 A) Initialize the VisionEval Environment","text":"start VisionEval environment, navigate VisionEval runtime directory (e.g., C:/Users/<``user name``>/Documents/VisionEval) double click VisionEval.Rproj. RStudio layout look similar figure (may minor differences):Graphical user interface, text, application, email Description automatically generatedThere two options next step: (B1) using RStudio Build Tools, (B2) using R native install command. Instructions methods included steps B1 B2 .","code":""},{"path":"common-use-cases.html","id":"b1-using-rstudio-build-tools","chapter":"15 Common Use Cases","heading":"15.1.2.2.2 B1) Using RStudio Build Tools","text":"","code":""},{},{},{},{},{"path":"common-use-cases.html","id":"b2-using-r-native-install-command","chapter":"15 Common Use Cases","heading":"15.1.2.2.3 B2) Using R native install command","text":"R command “install.packages” used install R packages. commandinstall.package``(“C:/Users/<user name>/Documents/VisionEval/``src``/modules/``VESimHousehold``s``”``, repos=NULL, type=“source”)within VisionEval environment rebuild install VESimHouseholds package VisionEval.","code":""},{"path":"common-use-cases.html","id":"c-update-dependent-packages","chapter":"15 Common Use Cases","heading":"15.1.2.2.4 C) Update Dependent Packages","text":"final step incorporating local PUMS data update packages -built estimation processes uses PUMS estimating models. PredictHousing module VELandUse package uses PUMS estimate housing choice model. Thus, important rebuild VELandUse package rebuilding VESimHouseholds package updated PUMS now available. Follow steps B1) B2) rebuild VELandUse package.Done!","code":""},{"path":"common-use-cases.html","id":"case-study-2-vepowertrainsandfuels","chapter":"15 Common Use Cases","heading":"15.2 Case Study 2: VEPowertrainsandFuels","text":"may scenarios may want study future fleet mix (penetration electric vehicles) different default fleet mix comes VEPowertrainsandFuels package. motivation behind case study. updates default fleet mix can done simply replacing hh_powertrain_prop.csv input file, similar Case Study 1, version customized intended study. input file needs package ‘rebuilt’ order take effect VisionEval model run. steps rebuilding similar Case Study 1 outlined .input data VEPowertrainsandFuels package VEPowertrainsAndFuels``\\``inst``\\``extdata``\\directory. input files can updated reflect changes fleet makeup well fuel types vehicles use. hh_powertrain_prop.csv contains proportion household vehicles powertrain types vehicle type vehicle vintage year. case study present steps update input file. detailed description structure content file can found hh_powertrain_prop.``txt file directory. figure shows input file located within source code VEPowertrainsandFuels package.","code":""},{"path":"common-use-cases.html","id":"instructions-1","chapter":"15 Common Use Cases","heading":"15.2.1 Instructions","text":"case study explores basic level analysis needed update data ensure integrity consistency data components within package. spreadsheet application can used alter default data values perform analysis.section walks users brief analysis conducted define modifying function demonstrate effects modifications.","code":""},{"path":"common-use-cases.html","id":"step-1-data","chapter":"15 Common Use Cases","heading":"15.2.1.1 Step 1) Data","text":"VEPowertrainsAndFuels``\\``inst``\\``extdata``\\hh_powertrain_prop.csv default powertrain proportions contained package, resembles table (table compressed select years clarity). file’s purpose provide sales vehicle powertrain, vehicle type (auto light trucks), vehicle vintage year.table contains two powertrain proportions, left-four columns automobiles (.e., AutoProp) right-light trucks (.e., LtTrkProp). sum 1 (rowsum 2).","code":""},{"path":"common-use-cases.html","id":"step-2-analysis","chapter":"15 Common Use Cases","heading":"15.2.1.2 Step 2) Analysis","text":"conduct brief exploratory analysis demonstrate visually data look like modified. Using standard spreadsheet application can format visualize data shown figure .can see battery electric vehicles (BEV), specifically automobiles, projected make majority vehicles bought future years. causes share internal combustion engines decline proportionally.Let us assume state government deciding whether aggressively promote BEV cars starting 2025. policies cause share alternative powertrains (BEV, HEV, PHEV) increase time. model increase, use arbitrary function adds current value $x$ (.e., proportion) quadratic rate.$$\nf(x) = x + (x^2) (1 - x)\n$$use function adjust alternative powertrains spreadsheet. ensure proportions sum 1 autos light trucks, respectively, calculate remaining proportion ICE powertrains subtracting total proportion alternative powertrains. following figure shows effect increasing share alternative powertrain quadratic rate compared default data.update existing hh_powertrain_prop.csv file year 2025 newly calculated values.","code":""},{"path":"common-use-cases.html","id":"step-3-build-package","chapter":"15 Common Use Cases","heading":"15.2.1.3 Step 3) Build Package","text":"data file updated need re-build re-install VEPowertrainsAndFuels package VisionEval use new fleet mix data.can follow instructions listed Step 2) Case Study 1 rebuild package.package re-build complete, new powertrain data ready use VisionEval model run.","code":""},{"path":"common-use-cases.html","id":"miscellaneous-information","chapter":"15 Common Use Cases","heading":"15.3 Miscellaneous Information","text":"section contains miscellaneous information may useful advanced users.VisionEval Package StructureVisionEval Package StructureBuild command lineBuild command linePUMS data processing helper scriptsPUMS data processing helper scriptsModifying package codeModifying package code","code":""},{"path":"common-use-cases.html","id":"visioneval-package-structure","chapter":"15 Common Use Cases","heading":"15.3.1 VisionEval Package Structure","text":"source code VisionEval packages generally structure similar following:inst``\\``extdata “external” input data sources reference files placedinst``\\``extdata “external” input data sources reference files placedThe R directory contains R scripts used packages. must independent non-sequential scripts depend results scripts.R directory contains R scripts used packages. must independent non-sequential scripts depend results scripts.data contains resulting data VisionEval generates utilizes.data contains resulting data VisionEval generates utilizes.man inst``\\``module_docs, contain markdown documentation generated build process.man inst``\\``module_docs, contain markdown documentation generated build process.","code":"src/VEGenericPackage\n├───data\n│   ├─ GenericPackageSpecifications.rda\n│   ├─ GenericPackage_df.rda\n│   └─ GenericPackage_ls.rda\n├───R\n│   ├─ CreateEstimationDatasets.R\n│   └─ GenericModel.R\n└───inst\n    └─ extdata\n        ├─ input_data1.csv\n        └─ input_data2.txt"},{"path":"common-use-cases.html","id":"build-from-command-line","chapter":"15 Common Use Cases","heading":"15.3.2 Build from command line","text":"GUI method intuitive, can convenient simply execute build command generic R session rather navigating menu trees GUI.fundamental command build r package can run R console using system(``\"R ``CMD`` INSTALL ``package_path`` -l ``lib_path``\"). GUI method essentially constructs command executes .package_path path package source code building e.g. \"C:\\Users\\<user name>\\Documents\\VisionEval\\src\\modules\\VESimHouseholds\". working directory already located package, can use “.``” denote local directory.package_path path package source code building e.g. \"C:\\Users\\<user name>\\Documents\\VisionEval\\src\\modules\\VESimHouseholds\". working directory already located package, can use “.``” denote local directory.lib_path runtime environment, case VisionEval environment e.g. \"C:\\Users\\<user name>\\Documents\\VisionEval\\ve-lib\":lib_path runtime environment, case VisionEval environment e.g. \"C:\\Users\\<user name>\\Documents\\VisionEval\\ve-lib\":’s example command used rebuild VESimHouseholds package source code VisionEval.","code":"system(\"R CMD INSTALL \"C:\\Users\\<user name>\\Documents\\VisionEval\\src\\modules\\VESimHouseholds\" -l \"C:\\Users\\<user name>\\Documents\\VisionEval\\ve-lib\")"},{"path":"common-use-cases.html","id":"pums-data-processing-helper-scripts","chapter":"15 Common Use Cases","heading":"15.3.3 PUMS data processing helper scripts","text":"Processing PUMS data can challenging two reasons.PUMS data evolves, field names levels changing.PUMS data evolves, field names levels changing.2000 PUMS stored compressible serial text file structure, rather common delimited file (e.g., CSV), making importing tedious.2000 PUMS stored compressible serial text file structure, rather common delimited file (e.g., CSV), making importing tedious.helper scripts future users build upon:NOTE: may work PUMS file years, operating systems, R versions. Best effort made identify weak points (e.g., unzipping), guaranteed. scripts meant resource starting point, production level code.","code":""},{"path":"common-use-cases.html","id":"pums-file-import-and-header-processing","chapter":"15 Common Use Cases","heading":"15.3.4 PUMS File import and header processing","text":"​\n​\n​ (Sys.info()[‘sysname’] == ‘Windows’) {\n​ cmd <- paste0(“unzip -p ‘“, PumsFile,”’”)\n​ }\n​\n​ (Sys.info()[‘sysname’] == ‘Linux’) {\n​ cmd <- paste0(“gunzip -cq ‘“, PumsFile,”’”)\n​ }\n​\n# Checks zip file bytefile\n(grepl(‘.zip’, PumsFile)) {\ndf <- fread(cmd = cmd,\nselect = names(colclass[[type]]),\ncolClasses = colclass[[type]])\n} else {\ndf <- fread(PumsFile,\nselect = names(colclass[[type]]),\ncolClasses = colclass[[type]])\n}","code":"# IMPORTS\nlibrary(data.table)\nlibrary(tools)\n\n\n# Function to process PUMS as it is read in\nprocess_acs_pums <- function(PumsFile, type, GetPumas='ALL') {\n  # ACS PUMS to legacy Census PUMS fields\n  # Make any modifications here as necessary\n  meta = list(\n    'h' = list(\n      SERIALNO = list(acsname = 'SERIALNO', class ='character'),\n      PUMA5 = list(acsname='PUMA', class='character'),\n      HWEIGHT = list(acsname='WGTP', class='numeric'),\n      UNITTYPE = list(acsname='TYPE', class='numeric'),\n      PERSONS = list(acsname='NP', class='numeric'),\n      BLDGSZ = list(acsname='BLD', class='character'),\n      HINC = list(acsname='HINCP', class='numeric')\n    ),\n    'p' = list(\n      SERIALNO = list(acsname = 'SERIALNO', class ='character'),\n      AGE = list(acsname='AGEP', class='numeric'),\n      WRKLYR = list(acsname='WKL', class='character'),\n      MILITARY = list(acsname='MIL', class='numeric'),\n      INCTOT = list(acsname='PINCP', class='numeric')\n    )\n  )\n  \n  colNames <- lapply(meta, function(x) sapply(x, function(y) y[['acsname']]))\n  colclass <- lapply(meta, function(x) sapply(unname(x), function(y) {\n    setNames(y[['class']], y[['acsname']])\n  }))  # Rename ACS PUMS fields to match legacy Census PUMS fields\n  setnames(df, colNames[[type]], names(colNames[[type]]))\n  \n  return(df)\n}\n\nprocess_2000_pums <- function(PumsFile, GetPumas='ALL') {\n  #Read in file and split out household and person tables\n  Pums_ <- readLines(PumsFile)\n  RecordType_ <- \n    as.vector(sapply(Pums_, function(x) {\n      substr(x, 1, 1)\n      }))\n  H_ <- Pums_[RecordType_ == \"H\"]\n  P_ <- Pums_[RecordType_ == \"P\"]\n  rm(Pums_, RecordType_, PumsFile)\n  \n  #Define a function to extract specified PUMS data and put in data frame\n  extractFromPums <- \n    function(Pums_, Fields_ls) {\n      lapply(Fields_ls, function(x) {\n        x$typeFun(unlist(lapply(Pums_, function(y) {\n          substr(y, x$Start, x$Stop)\n        })))\n      })\n    }\n  \n  #Identify the housing data to extract\n  HFields_ls <-\n    list(\n      SERIALNO = list(Start = 2, Stop = 8, typeFun = as.character),\n      PUMA5 = list(Start = 19, Stop = 23, typeFun = as.character),\n      HWEIGHT = list(Start = 102, Stop = 105, typeFun = as.numeric),\n      UNITTYPE = list(Start = 108, Stop = 108, typeFun = as.numeric),\n      PERSONS = list(Start = 106, Stop = 107, typeFun = as.numeric),\n      BLDGSZ = list(Start = 115, Stop = 116, typeFun = as.character),\n      HINC = list(Start = 251, Stop = 258, typeFun = as.numeric)\n    )\n  \n  #Extract the housing data and clean up\n  H_df <- data.frame(extractFromPums(H_, HFields_ls), stringsAsFactors = FALSE)\n  #Extract records for desired PUMAs\n  if (GetPumas[1] != \"ALL\") {\n    H_df <- H_df[H_df$PUMA5 %in% GetPumas,]\n  }\n\n  #Identify the person data to extract\n  PFields_ls <-\n    list(\n      SERIALNO = list(Start = 2, Stop = 8, typeFun = as.character),\n      AGE = list(Start = 25, Stop = 26, typeFun = as.numeric),\n      WRKLYR = list(Start = 236, Stop = 236, typeFun = as.character),\n      MILITARY = list(Start = 138, Stop = 138, typeFun = as.numeric),\n      INCTOT = list(Start = 297, Stop = 303, typeFun = as.numeric)\n    )\n  \n  #Extract the person data and clean up\n  P_df <- data.frame(extractFromPums(P_, PFields_ls), stringsAsFactors = FALSE)\n  #If not getting data for entire state, limit person records to be consistent\n  if (GetPumas[1] != \"ALL\") {\n    P_df <- P_df[P_df$SERIALNO %in% unique(H_df$SERIALNO),]\n  }\n\n  return( list('p' = P_df, 'h' = H_df) )\n}"},{"path":"common-use-cases.html","id":"pums-data-web-scraping","chapter":"15 Common Use Cases","heading":"15.3.5 PUMS data web-scraping","text":"automated one step scraping data running functions files read .​\n​ (!.numeric(STATE)) STATE_NUM <- state_codes[toupper(STATE)]​\n​ # Download PUMS data tempfile load directly data table\n​ url <- file.path(base_url,\n​ STATE_NAME,\n​ paste0(‘REVISEDPUMS5_’, sprintf(“%02d”, STATE_NUM), ‘.TXT’))\n​\n​ temp <- tempfile()\n​ download.file(url, temp)\n​\n# Read .txt data frames\nPUMS <- process_2000_pums(temp)​\n​ (length(STATE) > 2 & !.numeric(STATE)) {\n​ STATE <- tolower(state.abb[match(toTitleCase(STATE),state.name)])\n​ }​\n​ # Download PUMS data tempfile load directly data table\n​ PUMS <- lapply(c(‘p’, ‘h’), function(f) {\n​ url <- file.path(base_url, YEAR, ‘5-Year’,\n​ paste0(‘csv_’, f, tolower(STATE), ‘.zip’))\n​\n​ (save_zip == F){\n​ temp <- tempfile()\n​ } else {\n​ temp <- file.path(output_dir, basename(url))\n​ }\n​\ndownload.file(url, temp)\ndf <- process_acs_pums(temp, type=f, GetPumas)​\n​ # SAVE OUTPUT\n​ (!.na(output_dir)) {\n​ (!dir.exists(output_dir)) dir.create(output_dir)\n​ fwrite(PUMS[[‘p’]], file.path(output_dir, ‘pums_persons.csv’))\n​ fwrite(PUMS[[‘h’]], file.path(output_dir, ‘pums_households.csv’))\n​ } else {\n​ return(PUMS)\n​ }\n​ }","code":"# Downloads and processes legacy 2000 PUMS data \ngetDecPUMS <- function(STATE, output_dir = NA){ \n  #VARS \n  state_codes <- fread('state.txt') \n  state_codes <- setNames(state_codes$STATE, state_codes$STUSAB) \n  base_url = 'https://www2.census.gov/census_2000/datasets/PUMS/FivePercent' \n   \n  if(length(STATE) > 2 & !is.numeric(STATE)) { \n    STATE <- state.abb[match(toTitleCase(STATE),state.name)] \n  } \n  STATE_NAME <- state.name[match(toupper(STATE),state.abb)]   # SAVE OUTPUT \n  if(!is.na(output_dir)) { \n    if(!dir.exists(output_dir)) dir.create(output_dir) \n    fwrite(PUMS[['p']], file.path(output_dir, 'pums_persons.csv')) \n    fwrite(PUMS[['h']], file.path(output_dir, 'pums_households.csv')) \n  } else { \n    return(PUMS) \n  } \n} \n \n# Downloads and processes post-2000 PUMS \ngetACSPUMS <- function(STATE, YEAR='2000', GetPumas='ALL', output_dir, save_zip = T){ \n  #VARS \n  try({ \n    state_codes <- fread('state.txt') \n    state_codes <- setNames(state_codes$STATE, state_codes$STUSAB) \n    }) \n  base_url = 'https://www2.census.gov/programs-surveys/acs/data/pums'     return(df) \n  }) \n  names(PUMS) <- c('p', 'h') "},{"path":"api-documentation.html","id":"api-documentation","chapter":"16 API Documentation","heading":"16 API Documentation","text":"chapter placeholder module docs built latest source code.","code":""},{"path":"software-framework.html","id":"software-framework","chapter":"17 Software Framework","heading":"17 Software Framework","text":"","code":""},{"path":"software-framework.html","id":"definitions","chapter":"17 Software Framework","heading":"17.1 Definitions","text":"Following definitions terms used chapter:Model System\ndefinition set related models software framework implementing definition. Models built modeling system related domains modeled (e.g. travel, energy consumption, hydrology, etc.), ‘agents’ modeled (e.g. households, cities, watersheds, etc.), physical space represented (e.g. zones, grids, cubes, etc.), time represented (e.g. continuouse vs. discrete, independent vs. dependent past states), modeling goals tradeoffs (e.g. representational detail, degree coupling, run times, etc.). model system definition includes specifications model modules can used model system, file structure specifications organizing model parameters input data necessary running model. software framework model system library code manages execution model modules designed work model system.Model System\ndefinition set related models software framework implementing definition. Models built modeling system related domains modeled (e.g. travel, energy consumption, hydrology, etc.), ‘agents’ modeled (e.g. households, cities, watersheds, etc.), physical space represented (e.g. zones, grids, cubes, etc.), time represented (e.g. continuouse vs. discrete, independent vs. dependent past states), modeling goals tradeoffs (e.g. representational detail, degree coupling, run times, etc.). model system definition includes specifications model modules can used model system, file structure specifications organizing model parameters input data necessary running model. software framework model system library code manages execution model modules designed work model system.Model\nmodel used document refers model GreenSTEP calculates number different attributes (e.g. household size, household income, number autos owned, vehicle-miles traveled, etc.) composed number components (submodels) calculate one attributes.Model\nmodel used document refers model GreenSTEP calculates number different attributes (e.g. household size, household income, number autos owned, vehicle-miles traveled, etc.) composed number components (submodels) calculate one attributes.Submodel\nsubmodel component model calculates one closely related attributes.Submodel\nsubmodel component model calculates one closely related attributes.Module\nmodule, heart, collection data functions meet specifications described document implement submodel. Modules also include documentation submodel. Modules made available users R packages. Typically set related modules included package.Module\nmodule, heart, collection data functions meet specifications described document implement submodel. Modules also include documentation submodel. Modules made available users R packages. Typically set related modules included package.Software Framework\nsoftware framework library code containing functions manage execution modules. functions manage interactions modules, model system variables, datastore.Software Framework\nsoftware framework library code containing functions manage execution modules. functions manage interactions modules, model system variables, datastore.Datastore\ndatastore file set files storing inputs used modules outputs produced modules.Datastore\ndatastore file set files storing inputs used modules outputs produced modules.","code":""},{"path":"software-framework.html","id":"model-system-objectives","chapter":"17 Software Framework","heading":"17.2 Model System Objectives","text":"GreenSTEP model related models disaggregate strategic planning models. disaggregate , like many modern transportation models, simulate behavior individual household level rather aggregate ‘zonal’ level. enables assessment prospective policies changes different impacts different types households (e.g. low income vs. high income). models strategic planning models built support long-range strategic planning decisions community visioning, policy development, scenario planning. Strategic planning processes often need consider number possibilities future may unfold range potential actions might taken. consequence, models built support strategic planning need responsive large number variables capable running quickly large number runs can done explore decision space. VisionEval model system supports development types models. design objectives model system :Modularity\nmodel system allow new capabilities added plug--play fashion models can improved extended improvements developed one model can easily shared models. Models composed modules contain data functionality needed calculate intended calculate.Modularity\nmodel system allow new capabilities added plug--play fashion models can improved extended improvements developed one model can easily shared models. Models composed modules contain data functionality needed calculate intended calculate.Loose Coupling\nobjective closely related modularity objective. Loose coupling necessary modules added removed models plug--play fashion. Loose coupling means parameter estimation submodel independent parameter estimation submodel. also means dependencies modules well defined minimized. communication modules carried transfer data mediated software framework.Loose Coupling\nobjective closely related modularity objective. Loose coupling necessary modules added removed models plug--play fashion. Loose coupling means parameter estimation submodel independent parameter estimation submodel. also means dependencies modules well defined minimized. communication modules carried transfer data mediated software framework.Openness\nVisionEval software framework modules developed operate framework completely open. open means sharing ones work. means completely revealing ones work others can assess module works. module code, parameters, data, specifications open inspection licensed using open source license (e.g. Apache 2) allows users use, modify, redistribute see fit. addition, modules provide access data code estimate model module implements. Finally, module contain complete documentation users may use document model module part .Openness\nVisionEval software framework modules developed operate framework completely open. open means sharing ones work. means completely revealing ones work others can assess module works. module code, parameters, data, specifications open inspection licensed using open source license (e.g. Apache 2) allows users use, modify, redistribute see fit. addition, modules provide access data code estimate model module implements. Finally, module contain complete documentation users may use document model module part .Geographic Scalability\nmodel system enable models applied variety geographic scales including metropolitan areas various sizes, states various sizes, multi-state regions. Although models applied different scales, share common geographic definitions enable modules readily shared models built modeling system.Geographic Scalability\nmodel system enable models applied variety geographic scales including metropolitan areas various sizes, states various sizes, multi-state regions. Although models applied different scales, share common geographic definitions enable modules readily shared models built modeling system.Data Accessibility\nModel results saved datastore easy query. Results can filtered, aggregated, post-processed produce desired performance measures.Data Accessibility\nModel results saved datastore easy query. Results can filtered, aggregated, post-processed produce desired performance measures.Regional Calibration Capability\nModules built capbilities estimating calibrating submodel parameters regional data necessary.Regional Calibration Capability\nModules built capbilities estimating calibrating submodel parameters regional data necessary.Speed Simplicity\nSince intent model system support development strategic planning models, important models able address large number factors able model large number scenarios. occur, framework needs run efficiently modules need simple need run quickly.Speed Simplicity\nSince intent model system support development strategic planning models, important models able address large number factors able model large number scenarios. occur, framework needs run efficiently modules need simple need run quickly.Operating System Independence\nmodel system run 3 major operating systems; Windows, Apple, Linux. case GreenSTEP related models, VisionEval model system written R programming language. Well-supported easily installed R implementations exist operating systems. Modules distributed standard R packages can compiled operating systems. Code written another language may included module package long can compiled R package usable 3 operating systems.\nhelp ease maintenance VE, recommended minimize use new R libraries, reuse R libraries used existing VE modules possible.Operating System Independence\nmodel system run 3 major operating systems; Windows, Apple, Linux. case GreenSTEP related models, VisionEval model system written R programming language. Well-supported easily installed R implementations exist operating systems. Modules distributed standard R packages can compiled operating systems. Code written another language may included module package long can compiled R package usable 3 operating systems.\nhelp ease maintenance VE, recommended minimize use new R libraries, reuse R libraries used existing VE modules possible.Preemptive Error Checking\nmodel system incorporate extensive data checking identify errors model setup inputs beginning model run. Error messages clearing identify causes errors. objective early error checking avoid model runtime errors waste model execution time difficult debug.Preemptive Error Checking\nmodel system incorporate extensive data checking identify errors model setup inputs beginning model run. Error messages clearing identify causes errors. objective early error checking avoid model runtime errors waste model execution time difficult debug.","code":""},{"path":"software-framework.html","id":"model-system-software-design-approach","chapter":"17 Software Framework","heading":"17.2.1 Model System Software Design Approach","text":"VisionEval software framework uses many ideas functional programming paradigm create modeling system modular robust. framework implemented R programming language largely functional programming language well developed system managing packages modules. section describes VisionEval model system incorporates functional programming design ideas reason using R programming language implementing ideas.","code":""},{"path":"software-framework.html","id":"functional-programming-inspirations-for-system-design","chapter":"17 Software Framework","heading":"17.2.1.1 Functional Programming Inspirations for System Design","text":"number programming paradigms organizing software implementing modular system designs. VisionEval system design inspired functional programming paradigm. section describes key characteristics functional design paradigm influence VisionEval model system design achieve design objectives.functional programming paradigm views computing sequences data transformations functions successively process data stream outputs one function becoming inputs next. Functions data processing machines defined inputs outputs. Given set inputs, functions always produce set outputs. Although functions requirements data process, bound data way functions (methods) object-oriented programming paradigm. characteristic functional paradigm fits well ‘loose coupling’ objective model system model modules interact one another transfer data mediated framework software. design module act like function framework software calling , providing data module needs, saving data module produces.Another key characteristic functional programming paradigm functions side effects. function change state variables within ’s scope effects system outside scope. way function interacts rest program returning result calculations whatever function called . functions called pure functions. characteristic makes software testable, reliable, maintainable. key aspect VisionEval model system design. system designed modules act like pure functions. thing return results calculations software framework. make changes program variables outside scope read write files. approach makes framework robust modular code within module can changed without affecting module.framework software also designed minimize side effects order make robust maintainable. Global state variables model run kept minimum. Almost model run state information kept ‘ModelState.Rda’ file (Section 6.6). common datastore holds results model computations. side effects framework code reading model definition input files, reading writing common datastore, writing log file.third key characteristic functional programming languages extensive use data typing. compiled languages general use data typing check properness functions expressions program compiled, functional programming languages like Haskell Elm make extensive use defining checking different data types function inputs outputs. also include type notation system documenting functions. makes easier check understand code. analogous approach used VisionEval system design. module includes specifications data consumes data produces. enables framework software check modules work properly together enables model checked thoroughly run eliminate run time errors. also clearly documents others data module uses produces.","code":""},{"path":"software-framework.html","id":"use-of-the-r-software-environment-to-implement-the-model-system","chapter":"17 Software Framework","heading":"17.2.1.2 Use of the R Software Environment to Implement the Model System","text":"VisionEval model system built R programming language statistical computing graphics. R open-source variant S programming language developed Bell Labs functional nature S. Although R primarily developed interactive programming environment data analysis, language full set features enables used steps modeling process data preparation cleaning model implementation output visualization. language augmented thousands packages supporting data analysis, programming, visualization. interactive nature language, range capabilities, large number supporting packages enabled GreenSTEP model developed agile manner relatively short period time. time, programming language range capabilities large number supporting packages. VisionEval model system uses R language following reasons:\n1) existing code base GreenSTEP model related models written R. Writing VisionEval software framework R enables code base moved new framework much less effort required rewritten another programming language.\n2) R open-source software available major operating systems model system operating system independent.\n3) R good well tested package system packaging modules well supported documentation build tools. package system development tools also include easy--use capabilities documentation, including literate programming. simplifies development software framework simplifies process module developers produce complete well documented modules.\n4) R extensive set statistical data analysis packages available. , almost type model can estimated using R therefore, modules can contain full documentation model estimation, also scripts allow model estimation replicated rerun using regional data.\n5) R interpreted language capable (free) integrated development environments. state objects can easily queried, process building testing models simplified. makes easier modelers don’t come computer science background develop models deployed model system.\n6) Although interpreted language, R slower compiled languages, core functions “vectorized” functions written C. means R programs can carry many operations quickly. addition, relatively easy call functions written compiled languages C++, C, Fortran R pure R model fast enough, portions can written functions compiled language linked R code.\n7) R large user base relatively easy users get answers programming questions.","code":""},{"path":"software-framework.html","id":"model-system-layers","chapter":"17 Software Framework","heading":"17.3 Model System Layers","text":"VisionEval model system composed 3 layers:\n1) Model: model layer defines structure model organizes modules coherent model. model layer includes module run script, model definition files, model input files, common datastore.\n2) Modules: module layer core model. Modules contain code parameters implement submodels building blocks models.\n3) Software Framework: software framework layer provides functionality controlling model run, running modules, interacting common datastore.\nlayers illustrated Figure 1. Following sections describe design specifications layer.Figure 1. Overview VisionEval Model SystemA VisionEval model built set compatible modules, set specifications model geography, set scenario input files, simple R script initializes runs model. Following simple example model script:full model run script shown Appendix .script calls two functions defined software framework; initializeModel runModule. initializeModel function initializes model environment model datastore, checks necessary modules installed, checks whether module data dependencies can satisfied. arguments initializeModel function identify key model definition data found. initializeModel function allows users load existing datastore. functionality useful scenario management, retaining building upon results previous model runs. example, set scenarios managed following manner using capability loading datastores:\n- base year model calibrated validated\n- Future land use scenarios developed run (e.g. 3 different scenarios different growth development assumptions). land use scenario loads datastore base year model.\n- Future transportation policy scenarios developed run land use scenario (e.g. 3 different scenarios different policy assumptions). transportion policy scenario loads datastore land use scenario model run.runModule function, name suggests, runs module. arguments runModule function identify name module run, package module , whether module run years, base year, years except base year. approach makes easy users combine modules ‘plug--play’ fashion. One simply identifies modules run sequence run . possible large part following reasons:\n1) modules loosely coupled. Modules communicate one another passing information datastore calling services another module. Module calling described detail section 8.1.2.2.\n2) framework establishes standards key shared aspects modules including data attributes specified geography represented.\n3) Every module includes detailed specifications data inputs module data outputs module. data specifications serve contracts framework software enforces.runModule function implemented software framework allows developers advanced users create different module variants save package different name. Users can identify alternative package runModule function call use variant version. example, VEPowertrainsAndFuels package includes data modules model key vehicle powertrain characteristics powertrain type proportions (ICEV, HEV, PHEV, BEV) vehicle type vehicle model year. developer advanced used create package version reflects Energy Information Agency (EIA) projections name VEPowertrainsAndFuelsxEIA, another version reflects California zero emissions vehicle standards name VEPowertrainsAndFuelsxCAZEV. user specify package version want run runModule function call. functionality also allows developers advanced users test module changes without altering ‘official’ package.features designed described detail following sections.","code":"#Initialize and check the model\ninitializeModel(\n  ParamDir = \"defs\",\n  RunParamFile = \"run_parameters.json\",\n  GeoFile = \"geo.csv\",\n  ModelParamFile = \"model_parameters.json\",\n  LoadDatastore = FALSE,\n  DatastoreName = NULL,\n  SaveDatastore = TRUE\n)\n\n#Run modules for all forecast years\nfor(Year in getYears()) {\n  runModule(\n    ModuleName = \"CreateHouseholds\", \n    PackageName = \"SimHouseholds\",\n    RunFor = \"AllYears\",\n    RunYear = Year)\n  runModule(\n    ModuleName = \"PredictWorkers\",\n    PackageName = \"SimHouseholds\",\n    RunFor = \"AllYears\",\n    RunYear = Year)\n  runModule(\n    ModuleName = \"PredictLifeCycle\",\n    PackageName = \"SimHouseholds\",\n    RunFor = \"AllYears\",\n    RunYear = Year)\n  runModule(\n    ModuleName = \"PredictIncome\",\n    PackageName = \"SimHouseholds\",\n    RunFor = \"AllYears\",\n    RunYear = Year)\n  ...\n}\n\n"},{"path":"software-framework.html","id":"model-layer-description","chapter":"17 Software Framework","heading":"17.4 Model Layer Description","text":"model layer composed :\n- directory (.e. folder) file structure organizing scenario inputs model parameters;\n- Model parameter files describing model geography (consistent standard definitions) global parameters;\n- model run script lists model execution steps; ,\n- datastore stores data produced execution model.\ncomponents described following subsections.","code":""},{"path":"software-framework.html","id":"model-directory-structure","chapter":"17 Software Framework","heading":"17.4.1 Model Directory Structure","text":"model application simple directory structure shown following representation directory tree.overall project directory, named my_model example, may name allowed operating system model run . One file placed top level directory user, “run_model.R”. Three additional files, denoted diagram angled brackets, created course checking running model.“run_model.R” file, introduced previous section, initializes model environment datastore, checks necessary packages installed, checks whether data dependencies can satisfied, runs modules specified sequence. Data checks performed modules run catch errors. saves time aggravation occurs model run fails midstream due incorrect data inputs errors due incorrect model setup. Data checking advance possible every module includes detailed specifications input output data. scenario input files checked specifications determine whether required data exist correct. addition, state datastore ‘simulated’ order module run determine whether data module needs available datastore. model initialized data checks satisfactory, modules executed sequence prescribed script.“ModelState.Rda” file R binary file contains list holds key variables used managing model run. file created model run initialized updated whenever state datastore changes. Framework functions read file necessary validate data determine datastore read write operations can completed successfully. file described detail section 6.6.“logXXXX.txt” file text file created model initialized. log file used record model run progress error warning messages. ‘XXXX’ part name date time log file created.“datastore” file directory contains central datastore model. VisionEval framework supports multiple types datastore. Currently, two types supported. preferred type (designated RD) stores datasets form native R data files. Files stored hierarchical directory structure top-level directory named “Datastore”. Another type (designated H5) stores data single binary HDF5 file. logical structure two datastore types similar described detail . Users specify datastore name “parameters.json” file (see ).“defs” directory contains definition files needed support model run. Five files required present directory: “run_parameters.json”, “model_parameters.json”, “geography.csv”, “deflators.csv”, “units.csv”.“run_parameters.json” file contains parameters define key attributes model run relationships model runs. file JSON-formatted text file. JSON format used several reasons. First, provides much flexibility parameters may structured. example parameter single value array values. Second, JSON format well documented easy learn use. uses standard punctuation formatting , unlike XML, doesn’t require learning markup language. Third, files ordinary text files can easily read edited number different text editors available major operating systems. also number commercial open source tools simplify process editing checking JSON-formatted files.“run_parameters.json” file specifies following parameters:Model name model. Example: “Oregon-GreenSTEP”.Model name model. Example: “Oregon-GreenSTEP”.Scenario name scenario. Example: “High-Gas-Price”.Scenario name scenario. Example: “High-Gas-Price”.Description short description scenario. Example: “Assume tripling gas prices”.Description short description scenario. Example: “Assume tripling gas prices”.Region name region modeled. Example: “Oregon”.Region name region modeled. Example: “Oregon”.BaseYear base year model. Example: “2015”.BaseYear base year model. Example: “2015”.Years array ‘forecast’ years model run . Example: [“2025”, “2050”].Years array ‘forecast’ years model run . Example: [“2025”, “2050”].DatastoreName name datastore. can name valid operating system. recommended named “datastore.h5” HDF5 datastores “Datastore” R data file datastores.DatastoreName name datastore. can name valid operating system. recommended named “datastore.h5” HDF5 datastores “Datastore” R data file datastores.DatastoreType 2-letter abbreviation identifying datastore type: “RD” R data file datastore, “H5” HDF5 datastore. framework uses DatastoreType abbreviation choose functions used initialize datastore interact .DatastoreType 2-letter abbreviation identifying datastore type: “RD” R data file datastore, “H5” HDF5 datastore. framework uses DatastoreType abbreviation choose functions used initialize datastore interact .Seed number modules use random seed make model runs reproducible.Seed number modules use random seed make model runs reproducible.RequiredVEPackages Lists VisionEval packages contain modules called model. Note required packages listed must consistent packages identified run_model.R script.RequiredVEPackages Lists VisionEval packages contain modules called model. Note required packages listed must consistent packages identified run_model.R script.“model_parameters.json” can contain global parameters particular model configuration may used multiple modules. example, model configuration GreenSTEP model may require parameters required model configuration RSPM model. Parameters file include parameters specific module data properly model inputs. file available establish global model parameters value time, used sparingly order enhance transferrability modules different models.“geography.csv” file describes geographic relationships model names geographic entities CSV-formatted text file. CSV format, like JSON format plain text file. used rather JSON format geographic relationships best described table form CSV format made tabular data. addition, number different open source commercial spreadsheet GIS programs can export tabular data CSV-formatted files. structure model system geography described detail Section 6.2 .“units.csv” file describes default units used storing complex data types model. VisionEval model system keeps track types units measure data processed. model system recognizes 4 primitive data types, number complex data types (e.g. currency, distance), compound data type. primitive data types data types recognized R language: ‘double’, ‘integer’, ‘character’, ‘logical’. complex data types ‘distance’ ‘time’ define types data defined measurement units factors converting units. compound data type combines two complex data types whose units defined expression (e.g. MI/HR MI complex unit miles HR complex unit hours). units.csv describes default units used store complex data types datastore. file structure example described detail Section 6.3 .“deflators.csv” file defines annual deflator values, consumer price index, used convert currency values different years currency demonination. file structure example described detail Section 6.4 .“inputs” directory contains input files scenario. input files CSV-formatted text files. module specifies input files needs names types data included needed files. several requirements structure input files. requirements described section 6.5 .","code":"my_model\n|   run_model.R  \n|   <ModelState.Rda>  \n|   <logXXXX.txt>  \n|   <datastore>  \n|     \n|  \n|____defs\n|    |   run_parameters.json\n|    |   model_parameters.json\n|    |   geo.csv  \n|    |   units.csv  \n|    |   deflators.csv  \n|  \n|  \n|____inputs  \n     |   filename.csv  \n     |   filename.csv  \n     |   ...  \n         "},{"path":"software-framework.html","id":"model-geography","chapter":"17 Software Framework","heading":"17.4.1.1 Model Geography","text":"design model system includes specification flexible standard model geography order fulfill objectives modularity geographic scalability. standard, specifies levels geographical units, names, relative sizes, hierarchical relationships . flexible allows geographical boundaries determined user allows units geographical levels simulated rather tied actual physical locations. Allowing simulation one geographic levels enables modules shared models operate different scales. example statewide model metropolitan area model use module assigning households land development types even though statewide model lacks fine scale geography metropolitan model.Following definition geographic structure VisionEval model system:Region\nregion entire model area. Large-scale characteristics don’t vary across region specified region level. Examples include fuel prices carbon intensities fuels.Region\nregion entire model area. Large-scale characteristics don’t vary across region specified region level. Examples include fuel prices carbon intensities fuels.Azones\nAzones large subdivisions region containing populations similar size counties Census Public Use Microdata Areas (PUMA). counties used GreenSTEP EERPAT models metropolitan divisions used RSPM examples Azones. Azones used represent population economic characteristics vary across region demographic forecasts persons age group average per capita income. Azone level geography must represent actual geographic areas may simulated.Azones\nAzones large subdivisions region containing populations similar size counties Census Public Use Microdata Areas (PUMA). counties used GreenSTEP EERPAT models metropolitan divisions used RSPM examples Azones. Azones used represent population economic characteristics vary across region demographic forecasts persons age group average per capita income. Azone level geography must represent actual geographic areas may simulated.Bzones\nBzones subdivisions Azones similar size Census Block Groups. districts used RSPM models examples Bzones. Bzones used represent neighborhood characteristics policies may applied differently neighborhood, example RSPM:\nDistrict population density variable used several submodels;\ninventory housing units type district land use input; ,\nCarsharing inputs specified district.\nrural areas, Bzones can used distinguish small cities unincorporated areas.\nBzones may correspond actual geographic areas may simulated. Bzone simulation greatly reduces model input data requirements still enabling modeling land-use-related policies effects land use various aspects travel behavior. VE-RPAT models, Bzones simulated place types characterize intensity nature development. VE-State models, Bzones synthesized represent characteristics likely found actual set Bzones within Azone.Bzones\nBzones subdivisions Azones similar size Census Block Groups. districts used RSPM models examples Bzones. Bzones used represent neighborhood characteristics policies may applied differently neighborhood, example RSPM:District population density variable used several submodels;inventory housing units type district land use input; ,Carsharing inputs specified district.rural areas, Bzones can used distinguish small cities unincorporated areas.Bzones may correspond actual geographic areas may simulated. Bzone simulation greatly reduces model input data requirements still enabling modeling land-use-related policies effects land use various aspects travel behavior. VE-RPAT models, Bzones simulated place types characterize intensity nature development. VE-State models, Bzones synthesized represent characteristics likely found actual set Bzones within Azone.Mareas\nMareas collections Azones associated urbanized area either portion urbanized area located Azone substantial proportion workers residing Azone work jobs located urbanized area. Metropolitan models typically one assigned Marea whereas state models may several. model system requires Azone may associated one Marea. also required Azones associated Marea. special Marea named ‘None’ used apply Azones associated urbanized area. Mareas used specify model urbanized area transportation characteristics overall transportation supply (transit, highways) congestion. also used specify large scale land-use-related characteristics policies models use Bzone synthesis.Mareas\nMareas collections Azones associated urbanized area either portion urbanized area located Azone substantial proportion workers residing Azone work jobs located urbanized area. Metropolitan models typically one assigned Marea whereas state models may several. model system requires Azone may associated one Marea. also required Azones associated Marea. special Marea named ‘None’ used apply Azones associated urbanized area. Mareas used specify model urbanized area transportation characteristics overall transportation supply (transit, highways) congestion. also used specify large scale land-use-related characteristics policies models use Bzone synthesis.Geographical relationships model described “geography.csv” file contained “defs” directory. file tabulates names geographic unit (except Region) relationships . row shows unique relationship. unit geography explictly defined (.e. simulated), “NA” values placed table. Appendix B shows examples “geography.csv” file Azones specified Azones Bzones specified. noted naming conventions individual zones. user free choose conventions use.","code":""},{"path":"software-framework.html","id":"data-types-units-and-currency-deflators","chapter":"17 Software Framework","heading":"17.4.1.2 6.3. Data Types, Units, and Currency Deflators","text":"key feature VisionEval model system enables modules bound together models data specifications system. datasets module requires inputs datasets module produces must specified according requirements. Section 8 describes specifications detail. section provides introduction TYPE UNITS specification requirements provide context understanding “units.csv” file “defs” directory.TYPE attribute dataset identifies data type. UNITS specification identifies units measure. TYPE UNITS specifications related. TYPE attribute affects values may specified UNITS attribute framework processes units values. model system recognizes 3 categories data types: ‘primitive’, ‘complex’, ‘compound’. ‘primitive’ category includes 4 data types recognized R language: double, integer, character, logical. dataset specified one types limitations units measure specified. ‘complex’ category currently includes 13 data types currency, distance, area shown table . dataset one types limited specified unit values. example, allowed units ‘distance’ type MI, FT, KM, M (mile, foot, kilometer, meter). ‘compound’ category composed compound data type. compound data, units represented expression involving units complex data types. example, dataset vehicle speeds can specified TYPE ‘compound’ UNITS ‘MI/HR’. type compound made two complex types; distance time. units expression containing distance time units ‘/’ operator. ’*’ (multiplication) operator may also used units expression compound data type. Appendix C documents types units detail.Although complex compound data types limit values units attributes may , specifying types enables framework software take care unit conversions modules datastore. example, say model datastore contains dataset Bzone population density units persons per square mile. case TYPE attribute data ‘compound’ UNITS ‘PRSN/SQMI’. module calculates household vehicle travel needs population density measured persons per acre, module specify UNITS ‘PRSN/ACRE’ framework take care converting density values units used datastore units requested module. simplifies matters module developers reduces likelihood errors due data conversions.Although units specified module complex data type may recognized units (e.g. distance - MI, FT, KM M), flexibility apply datastore. Complex data stored datastore predefined ways limit potential confusion simplify unit conversions. default units file (units.csv) “defs” directory declares default units use storing complex data types datastore. file two fields named ‘Type’ ‘Units’. row required complex data type recognized VisionEval system. listing date complex types default units demonstration models follows:‘currency’ data ’s sufficient convert values different units, ’s also necessary convert currency values years account effects inflation. model parameters estimated different modules may come datasets collected different years, model users likely want report currency values current year terms, necessary convert currency values years. Currency denominated datasets stored datastore base year values. module needs use currency denominated dataset, framework converts base year values year values module needs. module calculates currency denominated dataset saved datastore, framework converts values currency year module uses base year values save datastore. software framework takes care process converting currency values years automatically consistent manner. eliminates need model developers convert currency values. also allows flexibility model users module developers, evolution VisionEval model system new improved modules, eliminates need establish reference year used modules models.Modules specify year currency dataset using modifier UNITS specification. done adding period 4-digit year specification. example, UNITS specification year 2000 dollars ‘USD.2000’. Note, however, convention apply specifications currency data read input file model user free establish currency year choose currency inputs. cases, year specified input file. explained Section 6.4.Currency values converted years using deflator series defined model “deflators.csv” file “defs” directory. file 2 columns, ‘Year’ ‘Value’. Values needed years specified modules used model addition base year years currency values input files denominated . example, modules used model use dollar denominated values years 2000 2009, model base year 2010, input data denominated 2015 dollars, minimum “deflators.csv” file must include deflators years. flexible approach annual series deflators running earliest year latest year. Note: necessary specify deflators future model years (e.g. 2030, 2050). modules model system make calculations constant (uninflated) dollar terms. Deflators used convert user input values constant base convert values year consistent module’s estimation data.UNITS value may also specify multiplier option complex compound data types. capability exists modules may use data represented thousands millions numbers large. example, freeway arterial construction costs may represented thousands dollars per mile. multiplier option added units name adding period multiplier expressed scientific notion leading digit must 1 (e.g. 1e3 thousands). currency units, multiplier option must follow year notation. example, 2010 dollars expressed thousands expressed ‘USD.2010.1e3’. Miles traveled expressed millions ‘MI.1e6’.","code":""},{"path":"software-framework.html","id":"model-inputs-1","chapter":"17 Software Framework","heading":"17.4.1.3 6.4. Model Inputs","text":"inputs directory contains model inputs scenario. model input file table relates one input fields geographic units years. tabular nature data, input files CSV-formatted text files. first row file contains headers identifying data column. columns include data items specified input specifications module input file used . addition, file may required columns labeled Geo Year depending following 4 types input file :Inputs apply entire region years: case, input file consists one data row column corresponds data item.Inputs apply entire region years: case, input file consists one data row column corresponds data item.Inputs apply parts region model years: case, input file consists one data row geographic area file must include column labeled Geo used identifying geographic areas. example, input file applies Azones model 10 Azones, file must 10 rows addition header. Geo column identifies Azones. Note geographic areas specified geo.csv may included file. unlisted geographic areas included, model run stop initialization log contain messages identifying error(s).Inputs apply parts region model years: case, input file consists one data row geographic area file must include column labeled Geo used identifying geographic areas. example, input file applies Azones model 10 Azones, file must 10 rows addition header. Geo column identifies Azones. Note geographic areas specified geo.csv may included file. unlisted geographic areas included, model run stop initialization log contain messages identifying error(s).Inputs apply entire region vary model year: case, input file consists one data row model year file much include column labeled Year used identifying model years. example, model run parameters specify model run years 2010 2040, input file must contain 2 rows addition header. Year column identifies model run years. Note specified model run years may included file. Note file may include data years addition data module run years. inputs processed, non-model-run year data ignored.Inputs apply entire region vary model year: case, input file consists one data row model year file much include column labeled Year used identifying model years. example, model run parameters specify model run years 2010 2040, input file must contain 2 rows addition header. Year column identifies model run years. Note specified model run years may included file. Note file may include data years addition data module run years. inputs processed, non-model-run year data ignored.Inputs apply parts region vary model year: case input file consists one data row combination geographic area model year. file must include Geo column Year column. must many rows combinations geography years. example input file applies Azones model specifies 10 Azones 2 model run years, file must 20 rows accommodate combinations addition header row. case described , inputs may included non-model-run years well model-run years.Inputs apply parts region vary model year: case input file consists one data row combination geographic area model year. file must include Geo column Year column. must many rows combinations geography years. example input file applies Azones model specifies 10 Azones 2 model run years, file must 20 rows accommodate combinations addition header row. case described , inputs may included non-model-run years well model-run years.convention, input file names include inputs vary level geography, include level geography input file name. File names descriptive. Following examples:\n- azone_hh_pop_by_age.csv\n- azone_hhsize_targets.csv\n- bzone_dwelling_units.csvThe name input file names columns except “Geo” “Year” columns specified module requires input data. addition specifying file column names, module specifies:\n- level geography inputs specified (e.g. Region, Azone, Bzone, Czone, Marea);\n- data types column (e.g. integer, double, currency, compound);\n- units data column (e.g. MI, USD); ,\n- Acceptable values data column.module section describes specifications detail . Appendix D shows examples two types input files.field names input file (“Geo” “Year” fields) can encode year unit multiplier information addition name data item. done breaking name elements periods (.) separating elements follows:‘currency’ data type: Name.Year.Multiplier. example, TotalIncome.2010.1e3 field name total income thousands 2010 dollars.\ndata types: Name.Multiplier. example, TotalDvmt.1e6 field name total daily vehicle miles traveled millions.:\nName dataset name. must specified module calls input data.Year four-digit representation year currency values denominated . example currency dataset 2010 dollars, ‘Year’ value ‘2010’. field name currency field must include ‘Year’ element.\nMultiplier optional element identifies units multiplier. must expressed scientific notation (e.g. 1e3) leading digit must 1. capability exists make easier users provide data inputs may conveniently represented smaller number digits exponent. example, annual VMT data metropolitan area state often represented thousands millions.VisionEval framework uses year multiplier information convert data stored datastore. currency values stored base year currency units values stored without exponents.","code":""},{"path":"software-framework.html","id":"the-datastore","chapter":"17 Software Framework","heading":"17.4.1.4 6.5. The Datastore","text":"VisionEval changes approach storing model data GreenSTEP RSPM models related models. models stored data primarily R data frames binary files (rda files). largest files simulated household files store information simulated households Azone (e.g. counties GreenSTEP). data households Azone stored single data frame row corresponds record individual household columns household attributes. Vehicle data households stored lists data frame. approach benefits:\n- Storage retrieval part R language: one line code store data frame, one line code retrieve;\n- easy apply models data frames; \n- Vehicle data can stored lists within household data frame, eliminating need join tables.simplicity approach helped getting GreenSTEP concept operational model quickly. However, several limitations emerged GreenSTEP related models used various applications including:\n- Large amounts computer memory required modeling Azones large populations. necessitates either expanding computer memory limiting size Azones;\n- easy produce summary statistics simulated household files region; \n- number non-household data files proliferated order store various aggregations use model later summarization.Finally, GreenSTEP/RSPM approach define consistent data model, sufficiently support goal modularity, support use alternative datastores. overcome limitations VisionEval model system specifies consistent datastore design. design implemented two types datastores. One uses R binary files within hierarchical directory structure. uses HDF5 file format storing model data. HDF5 file format developed National Center Supercomputing Applications (NCSA) University Illinois contributors handle extremely large complex data collections. example, used store data particle simulations climate models. also basis new open matrix standard transportation modeling, OMX.VisionEval datastores organized ‘column-oriented’ hierarchical structure illustrated . lowest level hierarchy datasets vectors data values. matches well data objects (lists data frames) commonly used R programs calculation methods commonly vectorized. Datasets R datastores R binary files. HDF5 datastores, portion HDF5 file called datasets HDF5 nomenclature. Datasets organized tables groups datasets length. example diagram , Azone dataset containing names Azones, Age0to14 dataset containing number people age 0 14 Azone. datasets listed directly contained Azone table. R datastores, tables represented directories. HDF5 nomenclature called groups. Tables represent values particular model run year grouped together. year groups named model run years (e.g. 2010, 2050) contain tables every geographic level well ‘Household’, ‘Worker’, ‘Vehicle’ tables. Tables contain datasets whose values don’t vary model run year contained ‘Global’ group (directory). include tables model parameters, geographic tables, table datasets apply model run years.structure adequate store data used GreenSTEP/RSPM models offshoots. can also easily expanded serve new modeling capabilites. example module added model building stock, ‘Buildings’ table added ‘forecast year’ group. addition, structure can accommodate matrix data well vector data, future module makes use distance matrix, matrix added either ‘Global’ group ‘forecast years’ groups.Note Azone table diagram includes Marea dataset. datasets identifies Marea associated Azone. Every table includes datasets enable data joined tables. geographic example. Others use identifiers. example Worker table includes household identifier. Although tables include identifiers enable data joined tables, VisionEval framework include special features joining datasets come different tables. done module code.","code":"|____Global\n|    |____Model\n|    |        ...\n|    |\n|    |____Azone\n|    |        ...\n|    :\n|\n|____2010  \n|    |____Region\n|    |        ...\n|    |\n|    |____Azone\n|    |        Azone\n|    |        Marea\n|    |        Age0to14\n|    |        Age15to19\n|    |        Age20to29\n|    |        Age30to54\n|    |        Age55to64\n|    |        Age65Plus\n|    |        ...\n|    |\n|    |____Bzone\n|    |        ...\n|    |\n|    |____Marea\n|    |        ...\n|    |\n|    |____Household\n|    |        ...\n|    |\n|    |____Worker\n|    |        ...\n|    |\n|    |____Vehicle\n|    |        ...\n|    :\n|\n|\n|____2050  \n|    |____ ...\n|    |        ...\n:    :\n"},{"path":"software-framework.html","id":"the-model-state-file","chapter":"17 Software Framework","heading":"17.4.1.5 6.6 The Model State File","text":"model state file, “ModelState.Rda”, maintains record model run parameters inventory contents datastore. software framework functions use information control model run perform checks module data validity. model state file contains list following components:\n- Model: name model\n- Scenario: name scenario\n- Description: description scenario\n- Region: name region modeled\n- BaseYear: model base year\n- Years: list years model run \n- DatastoreName: file name datastore\n- DatastoreType: datastore storage type. Currently implemented types “RD” (R data) “H5” (HDF5).\n- Seed: value used random seed\n- RequiredVEPackages: names VisionEval module packages used model run\n- LastChanged: date time last change model state\n- Deflators: data frame deflator values year\n- Units: data frame default units complex data types\n- RequireVEPackages: list VisionEval packages must installed order model run\n- LogFile: file name log file\n- Geo_df: data frame containing geographic definitions model\n- BzoneSpecified: logical value identifying whether Bzones specified model\n- CzoneSpecified: logical value identifying whether Czones specified model\n- Datastore: data frame containing inventory contents datastore\n- ModuleCalls_df: data frame identifying sequence ‘runModule’ function calls arguments\n- ModulesByPackage_df: data frame identifying modules located VisionEval packages required run model\n- DatasetsByPackage_df: data frame identifying datasets located VisionEval packages required run modelThe Datastore component updated every time data written datastore. enables framework functions ‘know’ contents datastore without access datastore. Datastore component keeps track groups datasets datastore attributes length tables specifications datasets.","code":""},{"path":"software-framework.html","id":"overview-of-module-and-software-framework-layer-interactions","chapter":"17 Software Framework","heading":"17.4.2 7. Overview of Module and Software Framework Layer Interactions","text":"Modules heart VisionEval model system. Modules contain code parameters implement submodels building blocks models. Modules distributed standard R packages. VisionEval module package contains one modules implement related functions. example, VESimHouseholds package contains set modules related creating set synthetic households giving households attributes including persons age, workers age, life cycle, income. module contains following components:\n- Documentation module submodel parameter estimation/calibration.\n- Data code estimating submodel(s) implemented module;\n- Functions estimating/calibrating parameters using regional data supplied user (necessary);\n- Data specifications data loaded input files, data loaded datastore, data saved datastore; ,\n- One functions implementing module.software framework provides functionality managing model run. includes:\n- Checking module specifications consistency standards;\n- Checking input files compliance module specifications;\n- Processing input files load input data datastore;\n- Simulating data transactions model run check whether datastore contains data module needs module needs ;\n- Loading module packages;\n- ‘Running’ modules accordance ‘run_model.R’ script;\n- Fetching datastore, data required module;\n- Saving datastore, data module produces specifies saved; ,\n- Converting measurement units currency years necessary.software framework “runs” module several things. First, reads module data specifications main module function performs submodel calculations. reads datasets datastore module specifies. also reads contents model state file. puts datasets input list calls main module function input list argument function call. list, convention called ‘L’, contains 4 components: Global, Year, BaseYear, G. Global, Year, BaseYear components contain lists composed table components turn composed dataset components. Global component relates ‘global’ group datastore. Year component relates group datastore model run year. example, model run year 2040, Year component contain data read ‘2040’ group datastore. BaseYear component relates group datastore represents base year model. example model base year 2010, BaseYear component contain data read ‘2010’ group datastore. list contains BaseYear component well Year component modules may need compute changes dataset base year model run year. components contain component table module requests data . table component also list contains components requested datasets. example, module needs household income (‘Income’) household size (‘HhSize’) datasets ‘Household’ table model run year (e.g. 2040), Year component ‘L’ contain ‘Household’ component contain ‘Income’ component ‘HhSize’ component. ‘G’ component ‘L’ contains model state list contains information described Section 6.6.module calls another module, list also contains component named alias module assigns called module. component includes Global, Year, BaseYear components containing datasets identified specifications called module. Module calling explained detail section 8.1.2.module executes, returns list containing information module specifies written datastore. convention, list called ‘R’. list also Global, Year, BaseYear components structured way ‘L’ structured. table dataset components list also include attributes (metadata) described Section 8.","code":""},{"path":"software-framework.html","id":"modules-1","chapter":"17 Software Framework","heading":"17.5 Modules","text":"modules made available form standard R packages meet framework specifications. Packages may source form installed form. following presentation refers source form VisionEval packages. package installed (built) R system runs scripts R directory saves functions defined within datasets saved script. structure installed package covered document exception module_docs directory installed package. module developer follows guidelines module documentation, module_docs directory included installed package. include module documentation form markdown documents.package may contain one module. package organization follows standard organization R packages. structure shown following diagram. components described order presented diagram. file names examples.DESCRIPTION NAMESPACE files standard files required R package system. good sources available describing required contents files (R Packages), done . entries files can produced automatically annotations R scripts described next, using freely available tools devtools RStudio. LICENSE file contains text Apache 2 license open source license used VisionEval packages. accompanying Apache 2 NOTICE file inst directory.","code":"VESimHouseholds\n|   DESCRIPTION\n|   NAMESPACE\n|   LICENSE\n|     \n|\n|____R\n|    |   CreateHouseholds.R  \n|    |   PredictWorkers.R\n|    |   CreateEstimationDatasets.R\n|    |   ...\n|\n|\n|____inst  \n|    |    NOTICE\n|    |____extdata  \n|         |   pums_households.csv\n|         |   pums_households.txt\n|         |   pums_persons.csv\n|         |   pums_persons.txt\n|         |   ...\n|         \n|\n|____data-raw\n|    |    some_processed_model_dataset.rda\n|    |    ...\n|    \n|\n|____tests\n     |____scripts\n     |    |   test.R\n     |    |   test_functions.R\n     |    |   verspm_test.R \n     |    |   vestate_test.R    \n     |\n     |____verspm\n     |    |   logs\n     |    |   |   Log_CreateHouseholds.txt\n     |    |   |   ...\n     |    |\n     |    |   ModelState.Rda\n     |    \n     |____vestate\n     |    |   ...\n     |\n     |    ...\n"},{"path":"software-framework.html","id":"the-r-directory-1","chapter":"17 Software Framework","heading":"17.5.0.1 8.1. The R Directory","text":"R directory R scripts placed define modules included package. module defined single R script name module (.R file extension). module script 4 things:\n1) specifies model estimates model parameters. Model estimation datasets may processed script may loaded sources (see ).\n2) defines specifications data module depends .\n3) defines functions implement submodel.\n4) includes test code used module developmentWhen binary (installed) package built source package, R script run; estimation datasets processed, model parameters saved, module specifications saved, functions parsed efficient form. Following section describe structure module R script detail. example AssignTransitService module script VETransportSupply package included Appendix E.convention, module script organized 4 sections reflecting list . Following sections 8.1.1 8.1.4 explain module script section detail. Section 8.1.1 explains model specification estimation handled. Subsection 8.1.1.1 focuses handling model estimation data , cases, may use specialized scripts. Section 8.1.2 explains write module specifications tell framework module run, input data processed, data retrieved datastore, data saved datastore. Subsection 8.1.2.1 focuses OPTIONAL specification module developers can use enable optional model inputs. Subsection 8.1.2.2 focues CALL specification enables modules call modules perform calculation services. Section 8.1.3 describes write main function supporting functions implement module. Section 8.1.4 explains test code commonly included module assist module developer module development process. Finally, Section 8.1.5 explains special module named Initialize may included package. purpose module enable module developers include specialized input data checks preparation.","code":""},{"path":"software-framework.html","id":"model-specification-and-estimation-1","chapter":"17 Software Framework","heading":"17.5.0.1.1 8.1.1 Model Specification and Estimation","text":"name suggests, section script handles tasks related processing model estimation data, model specification, model parameter estimation. done manner enables others understand structure model, data based , parameters estimated. enable others replicate process test modifications. Typically, model specification estimation code 4 things: loading data used, defining functions carry key specification estimation procedures, applying functions produce objects define model(s), saving model objects.Models vary complexity. modules model may simply algorithm decision rules asserted parameters. case, need fill section script. example, AssignLifeCycle module VESimHouseholds package assigns lifecycle codes households using rules regarding numbers adults, children, workers household. cases like , model estimation specification section empty. cases, models quite complex section script extensive. example, “CalculateHouseholdDvmt” module following process building models comprises hundreds lines code:\n- Estimate binomial logit model probability household DVMT\n- Estimate linear model amount household DVMT given household DVMT\n- Estimate dispersion factor linear model variance modeled DVMT matches observed variance\n- Simulate household DVMT 1000 times stochastically applying binomial linear models\n- Calculate quantiles simulated DVMT\n- Estimate linear model average DVMT using simulation data\n- Estimate models DVMT quantiles function average DVMTModel estimation data preparation may also extensive. Whether , documenting data used building model making data available key making models reproducible extensible. Moreover, modules important model users able model parameters reflect conditions region. example, CreateHouseholds, PredictWorkers, PredictIncome modules use Census public use microdata sample data region estimate parameters. several ways model estimation data can handled VisionEval model system. described detail Section 8.1.1.1.model estimation code also save objects use documenting modules :\n1. Model summary statistics produced model object (linear model estimated using lm function) processed summary function;\n2. Data frames, tables, matrices; ,\n3. Graphs static data visualizations.first two saved objects just like object saved implement model. suggested documentation objects stored list along model document. example, follow portion PredictIncome.R script saves (documents) list contains household income model including documentation summary statistics model.Summary component list shows summary statistics model. explained module documentation section , can automatically inserted module documentation. recommended capture.output function used rather print function capture model summary statistics print function insert line numbers. method can used save text can inserted module documentation. example also shows objects documented saved.can also useful save data frames, tables, matrices use model documentation. can saved like data object inserted described module documentation section.Graphs visualizations saved different manner. saved image file “png” format, can inserted module documentation. must saved “data” directory . Following example:many ways module developer can code model specification parameter estimation procedures. However done, code well organized commented understandable reviewers. code follow VisionEval coding guidelines. addition, highly recommended code grouped functions aid understandability reduce unnecessary code repetition can lead errors. Complex functions well documented. Function documentation done using Roxygen syntax. Following example code estimates housing choice model (single-family vs. multifamily) PredictHousing module VELandUse package.can seen example, code defines documents function estimates binomial choice model given estimation dataset list model variable names. function number things including transforming estimation data, creating model formulation list independent variables, estimating variables, returning list model components. function defined, applied using model estimation data specified list independent variables. approach model specification estimation makes easy module developer try different model specifications, measuring relative performance, documenting results.approach used example takes advantage helper functions framework software. makeModelFormulaString function takes R model formula object converts string representation. model applied module, string parsed evaluated data frame independent variables. provides compact way store model fast way apply . Several framework functions assist applying models form. applyBinomialModel applies binomial logit model. applyLinearModel applies linear regression model. functions enable models self calibrate match input target. example, PredictHousing module adjusts constant model proportions households single-family vs. multifamily dwelling units matches housing supply area. applyBinomialModel efficiently calling binarySearch function implements binary search algorithm.Module developers limited using previous approach specifying implementing model. R functions estimate models also companion prediction functions apply estimated model new set data. often simplest best way apply model. One drawback approach, however, object returned model estimation function used making prediction often large includes copy estimation data datasets used calculate model statistics. model estimation datasets large, pose problem keeping module package central repository. case, module code needs remove parts model object necessary prediction. example, AssignVehicleOwnership module VEHouseholdVehicles package uses ordered logit model predict household auto ownership households owning one vehicles. model estimated using data 2001 NHTS model object returned estimation function (clm ordinal package) large. Portions model object needed corresponding prediction function removed. often matter trial error find much can removed model object without adversely affecting prediction function.model estimated, model objects embody model need saved part package. standard way illustrated following example saving model PredictHousing module. housing prediction model object list called ‘HouseTypeModel_ls’. list saved ‘data’ directory package. saving model object ‘data’ directory, can addressed directly module function applies model. Note documentation handled.use_data function usethis package saves data documention correctly package simplifies procedure .Although model estimation code usually included module script, instances may understandable estimate models several modules one script. done CreateSimBzoneModels.R script VESimLandUse package. script estimates models modules package. Model estimation handled way model estimation dataset used models models build upon . Including model estimations one file makes easier code easier review.","code":"#Save the household income model\n#-------------------------------\n#' Household income model\n#'\n#' A list containing the income model equation and other information needed to\n#' implement the household income model.\n#'\n#' @format A list having the following components:\n#' \\describe{\n#'   \\item{Type}{a string identifying the type of model (\"linear\")}\n#'   \\item{Formula}{makeModelFormulaString(IncModel_LM)}\n#'   \\item{PrepFun}{a function that prepares inputs to be applied in the linear model}\n#'   \\item{OutFun}{a function that transforms the result of applying the linear model}\n#'   \\item{Summary}{the summary of the linear model estimation results}\n#'   \\item{SearchRange}{a two-element vector specifying the range of search values}\n#' }\n#' @source PredictIncome.R script.\n\"HHIncModel_ls\"\nusethis::use_data(HHIncModel_ls, overwrite = TRUE)#Plot comparison of observed and estimated income distributions\npng(\n  filename = \"data/reg-hh-inc_obs-vs-est_distributions.png\",\n  width = 480,\n  height = 480\n)\nplot(\n  density(IncObs_),\n  xlim = c(0, 200000),\n  xlab = \"Annual Dollars ($2000)\",\n  main = \"Distributions of Observed and Predicted Household Income \\nRegular Households\"\n  )\nlines(density(IncEst_), lty = 2)\nlegend(\"topright\", legend = c(\"Observed\", \"Predicted\"), lty = c(1,2))\ndev.off()#Define a function to estimate housing choice model\n#--------------------------------------------------\n#' Estimate housing choice model\n#'\n#' \\code{estimateHousingModel} estimates a binomial logit model for choosing\n#' between single family and multifamily housing\n#'\n#' This function estimates a binomial logit model for predicting housing choice\n#' (single family or multifamily) as a function of the supply of housing of\n#' these types and the demographic and income characteristics of the household.\n#'\n#' @param Data_df A data frame containing estimation data.\n#' @param StartTerms_ A character vector of the terms of the model to be\n#' tested in the model.\n#' @return A list which has the following components:\n#' Type: a string identifying the type of model (\"binomial\"),\n#' Formula: a string representation of the model equation,\n#' PrepFun: a function that prepares inputs to be applied in the binomial model,\n#' OutFun: a function that transforms the result of applying the binomial model.\n#' Summary: the summary of the binomial model estimation results.\n#' @import visioneval stats\n#Define function to estimate the income model\nestimateHousingModel <- function(Data_df, StartTerms_) {\n  #Define function to prepare inputs for estimating model\n  prepIndepVar <-\n    function(In_df) {\n      Ah <-\n        c(\"Age15to19\",\n          \"Age20to29\",\n          \"Age30to54\",\n          \"Age55to64\",\n          \"Age65Plus\")\n      Out_df <-\n        data.frame(t(apply(In_df[, Ah], 1, function(x) {\n          AgeLvl_ <- 1:5 #Age levels\n          HhAgeLvl_ <- rep(AgeLvl_, x)\n          HeadOfHh_ <- numeric(5)\n          if (max(HhAgeLvl_) < 5) {\n            HeadOfHh_[max(HhAgeLvl_)] <- 1\n          } else {\n            if (all(HhAgeLvl_ == 5)) {\n              HeadOfHh_[5] <- 1\n            } else {\n              NumMidAge <- sum(HhAgeLvl_ %in% c(3, 4))\n              NumElderly <- sum(HhAgeLvl_ == 5)\n              if (NumMidAge > NumElderly) {\n                HeadOfHh_[max(HhAgeLvl_[HhAgeLvl_ < 5])] <- 1\n              } else {\n                HeadOfHh_[5] <- 1\n              }\n            }\n          }\n          HeadOfHh_\n        })))\n      names(Out_df) <- paste0(\"Head\", Ah)\n      Out_df$HhSize <- In_df$HhSize\n      Out_df$Income <- In_df$Income\n      Out_df$RelLogIncome <- log1p(In_df$Income) / mean(log1p(In_df$Income))\n      Out_df$Intercept <- 1\n      Out_df\n    }\n  EstData_df <- prepIndepVar(Data_df)\n  EstData_df$SingleFamily <- as.numeric(Data_df$HouseType == \"SF\")\n  #Define function to make the model formula\n  makeFormula <-\n    function(StartTerms_) {\n      FormulaString <-\n        paste(\"SingleFamily ~ \", paste(StartTerms_, collapse = \"+\"))\n      as.formula(FormulaString)\n    }\n  #Estimate model\n  HouseTypeModel <-\n    glm(makeFormula(StartTerms_), family = binomial, data = EstData_df)\n  #Return model\n  list(\n    Type = \"binomial\",\n    Formula = makeModelFormulaString(HouseTypeModel),\n    Choices = c(\"SF\", \"MF\"),\n    PrepFun = prepIndepVar,\n    Summary = summary(HouseTypeModel)\n  )\n}\n\n#Estimate the binomial logit model\n#---------------------------------\n#Load the household estimation data\nHh_df <- VESimHouseholds::Hh_df\n#Select regular households\nHh_df <- Hh_df[Hh_df$HhType == \"Reg\",]\nHh_df$Income[Hh_df$Income == 0] <- 1\n#Estimate the housing model\nHouseTypeModelTerms_ <-\n  c(\n    \"HeadAge20to29\",\n    \"HeadAge30to54\",\n    \"HeadAge55to64\",\n    \"HeadAge65Plus\",\n    \"RelLogIncome\",\n    \"HhSize\",\n    \"RelLogIncome:HhSize\"\n  )\nHouseTypeModel_ls <- estimateHousingModel(Hh_df, HouseTypeModelTerms_)\nrm(HouseTypeModelTerms_)#Model number of vehicles of non-zero vehicle households\nEstData_df <- EstData_df[EstData_df$ZeroVeh == 0,]\nEstData_df$VehOrd <- EstData_df$NumVeh\nEstData_df$VehOrd[EstData_df$VehOrd > 6] <- 6\nEstData_df$VehOrd <- ordered(EstData_df$VehOrd)\nAutoOwnModels_ls$Metro$Count <-\n  clm(\n    VehOrd ~ Workers + LogIncome + DrvAgePop + HhSize + OnlyElderly + IsSF +\n      IsUrbanMixNbrhd + LogDensity + TranRevMiPC,\n    data = EstData_df,\n    threshold = \"equidistant\"\n  )\n#Trim down model\nAutoOwnModels_ls$Metro$Count[c(\"fitted.values\", \"model\", \"y\")] <- NULL#Save the housing choice model\n#-----------------------------\n#' Housing choice model\n#'\n#' A list containing the housing choice model equation and other information\n#' needed to implement the housing choice model.\n#'\n#' @format A list having the following components:\n#' \\describe{\n#'   \\item{Type}{a string identifying the type of model (\"binomial\")}\n#'   \\item{Formula}{makeModelFormulaString(HouseTypeModel)}\n#'   \\item{PrepFun}{a function that prepares inputs to be applied in the model}\n#'   \\item{Summary}{the summary of the binomial logit model estimation results}\n#'   \\item{SearchRange}{a two-element vector specifying the range of search values}\n#' }\n#' @source PredictHousing.R script.\n\"HouseTypeModel_ls\"\nusethis::use_data(HouseTypeModel_ls, overwrite = TRUE)\n"},{},{"path":"software-framework.html","id":"module-specifications-1","chapter":"17 Software Framework","heading":"17.5.0.1.2 8.1.2 Module Specifications","text":"module specifications section module script provides specifications used framework number ways. specifications:\n- Identify level geography model run ;\n- Describe data loaded input files enable unit conversions;\n- Describe data module needs datastore order run;\n- Describe data module produces needs saved datastore;\n- Identify modules module needs call order calculations;\n- Allow framework check load input files modules run;\n- Allow framework check modules compatible one another terms data produce consume;\n- Allow sequence model steps (module calls) simulated check whether module data needs run; ,\n- Provide detailed documentation data produced model run.specifications declared list similar list specifying model estimation data described Section 8.1.1.1. full example shown Appendix E. Following skeleton module specifications list module whose name MyModule. name specifications list must concatenation module name Specifications, example name MyModuleSpecifications. Note functions items item aliases R list function. purpose make specifications easier read.Following detailed descriptions examples component specifications list.RunBy component specifies level geography model run . example, congestion submodel GreenSTEP RSPM models runs Marea level. specification used software framework determine index data read datastore data written datastore. Acceptable values “Region”, “Azone”, “Bzone”, “Marea”. RunBy specification looks like following example:NewInpTable NewSetTable components specify new tables need created datastore accommodate input data data produced module respectively. following specifications required new table created.\n- TABLE: name table created; ,\n- GROUP: type group table put . 3 group types: Global, BaseYear, Year. Global, table created global group datastore. BaseYear table created year group base year year group. example, model base year 2010, table created 2010 group. Year, table created group every model run year. example, run years 2010 2040, table created 2010 group 2040 group.\nFollowing example NewSetTable specification creating Vehicle table model run year group.Inp component specifies model inputs module requires. item list describes one data fields input file. item must following attributes (except OPTIONAL attribute):\n- NAME: names one data fields input file, names used datasets loaded datastore. names must match corresponding column names exception column names input files may contain year multiplier modifiers described Section 6.4.;\n- FILE: name file contains data fields;\n- TABLE: name datastore table datasets put ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- NAVALUE: value used represent NA (.e. missing value) datastore;\n- SIZE: maximum number characters character data (0 numeric data);\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation);\n- UNLIKELY: data conditions unlikely “” applicable (see Section 8.1.1.1 explanation);\n- TOTAL: total values (e.g. 1) “” applicable;\n- DESCRIPTION: descriptions data corresponding names NAME attribute; ,\n- OPTIONAL: optional specification identifies whether dataset optional (see section 8.1.2.1)\nFollowing example Inp component PredictHousingSpecifications VELandUse package. Inp specifications include two items. item lists one field names (.e. column names input file) NAME attribute. Multiple field names can listed item attributes except DESCRIPTION fields. descriptions DESCRIPTION attribute must correspond order dataset names NAME attribute order stored correctly datastore. values may entered TYPE UNITS attributes described Section 6.3. noted UNITS attribute must include ‘year’ (‘currency’ type) ‘multiplier’ information. information part input file field names instead (relevant). explained detail Section 6.4. framework uses information Inp read input files, check whether data correct, save data correct location datastore.Get component contains one items identify data module need retrieved datastore. Note Get component must identify datasets module requires (included package), including specified Inp component. datasets identified Inp component automatically made available module. item Get component specifies attributes one related datasets follows:\n- NAME: names one datasets loaded;\n- TABLE: name table datasets located ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation); ,\n- OPTIONAL: optional specification identifies whether dataset optional (see section 8.1.2.1)\nUnlike ‘Inp’ specifications, ‘Get’ specifications UNITS must include ‘year’ information ‘currency’ types. necessary order framework convert currency data requested datastore year denomination module needs. UNITS attribute may also include multiplier specification module needs values modified way. example, module needs VMT thousands miles, UNITS specification ‘MI.1e3’. Section 6.3 provides information ‘year’ ‘multiplier’ options added UNITS specification. Following example Get component AssignRoadMilesSpecifications VETransportSupply package.Set component contains one items describing datasets saved datastore. item Set component specifies attributes one related datasets follows:\n- NAME: names one datasets saved;\n- TABLE: name table datasets saved ;\n- GROUP: type group table located datastore (.e. Global, Year, BaseYear);\n- TYPE: data type (e.g. double, distance, compound);\n- UNITS: measurement units data;\n- NAVALUE: value used represent NA datastore;\n- PROHIBIT: data values prohibited “” applicable (see Section 8.1.1.1 explanation);\n- ISELEMENTOF: allowed categorical data values “” applicable (see Section 8.1.1.1 explanation);\n- SIZE: maximum number characters character data (0 numeric data); ,\n- DESCRIPTION: descriptions data corresponding names NAME attribute\nrequirements UNITS attribute described Get component items. Following example Set component AssignRoadMilesSpecifications VETransportSupply package.noted may possible prespecify SIZE attribute dataset. example, unique household ID assigned, SIZE attribute depend number households must calculated module run. circumstance, SIZE attribute omitted item module function must calculate include calculated value attribute output dataset. following code snippet CreateHouseholds module code VESimHouseholds package shows done. example, list data module function returns named Out_ls. household ID (HhId) dataset Household table Year group. R attributes function called set SIZE attribute HhId dataset equal maximum number characters entries dataset.last component module specifications list Call component. optional component module specifications included module calls modules module may called modules. Following Call component examples. first example module may called. second example module calls another module. Section 8.1.2.2 explains module calling detail.","code":"MyModuleSpecifications <- list(\n  RunBy = ...,\n  NewInpTable = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  NewSetTable = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Inp = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Get = items(\n     item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Set = items(\n    item(\n      ...\n    ),\n    item(\n      ...\n    )\n  ),\n  Call = items(\n     item(\n      ...\n    ),\n    item(\n      ...\n    )\n  )\n)RunBy = \"Marea\",NewSetTable = items(\n  item(\n    TABLE = \"Vehicle\",\n    GROUP = \"Year\"\n  )\n),Inp = items(\n  item(\n    NAME =\n      items(\n        \"SFDU\",\n        \"MFDU\",\n        \"GQDU\"),\n    FILE = \"bzone_dwelling_units.csv\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"integer\",\n    UNITS = \"DU\",\n    NAVALUE = -1,\n    SIZE = 0,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\",\n    DESCRIPTION =\n      items(\n        \"Number of single family dwelling units (PUMS codes 01 - 03) in zone\",\n        \"Number of multi-family dwelling units (PUMS codes 04 - 09) in zone\",\n        \"Number of qroup quarters population accommodations in zone\"\n      )\n  ),\n  item(\n    NAME = items(\n      \"HhPropIncQ1\",\n      \"HhPropIncQ2\",\n      \"HhPropIncQ3\",\n      \"HhPropIncQ4\"),\n    FILE = \"bzone_hh_inc_qrtl_prop.csv\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"double\",\n    UNITS = \"NA\",\n    NAVALUE = -1,\n    SIZE = 0,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\",\n    DESCRIPTION =\n      items(\n        \"Proportion of Bzone households (non-group quarters) in 1st quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 2nd quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 3rd quartile of Azone household income\",\n        \"Proportion of Bzone households (non-group quarters) in 4th quartile of Azone household income\"\n      )\n  )\n),Get = items(\n  item(\n    NAME = \"Marea\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"character\",\n    UNITS = \"ID\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME =\n      items(\n        \"FwyLaneMi\",\n        \"ArtLaneMi\"),\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"distance\",\n    UNITS = \"MI\",\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME = \"Marea\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"character\",\n    UNITS = \"ID\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\"\n  ),\n  item(\n    NAME = \"UrbanPop\",\n    TABLE = \"Bzone\",\n    GROUP = \"Year\",\n    TYPE = \"people\",\n    UNITS = \"PRSN\",\n    PROHIBIT = c(\"NA\", \"<= 0\"),\n    ISELEMENTOF = \"\"\n  )\n),Set = items(\n  item(\n    NAME = \"FwyLaneMiPC\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"compound\",\n    UNITS = \"MI/PRSN\",\n    NAVALUE = -1,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    SIZE = 0,\n    DESCRIPTION = \"Ratio of urbanized area freeway and expressway lane-miles to urbanized area population\"\n  )\n)attributes(Out_ls$Year$Household$HhId)$SIZE <- max(nchar(Out_ls$Year$Household$HhId))  #Call component for a module that may be called\nCall = TRUE\n\n#Call component for a module that calls another module\nCall = items(\n  CalcDvmt = \"VEHouseholdTravel::CalculateHouseholdDvmt\"\n)"},{},{},{"path":"software-framework.html","id":"module-function-1","chapter":"17 Software Framework","heading":"17.5.0.1.3 8.1.3 Module Function","text":"function definitions section module script used define functions used implement module. One functions main function called software framework run module. function must name module name. example, main function CreateHouseholds module named CreateHouseholds well. function must written accept one argument, list, convention named L module calls modules, two arguments (explained previous section) module calls modules. list contains datasets identified Get component module data specifications. structure list described Section 7. main function returns list contains datasets identified Set component module data specifications structured described Section 7. software framework includes function, initDataList, initialize outputs list proper structure Global, Year, BaseYear components. module code fill component components specified tables datasets within tables. Following simple example AssignTransitService module VETransportSupply package. First, module’s Set items provide context module code:AssignTransitService function returns one dataset called TranRevMiPc. dataset placed Marea table Year group (.e. group model run year). Following function definition:module include procedures necessary check errors output datasets. cases won’t necessary module passes tests development framework checks datasets passed module meet module’s specifications. However may conditions combinations acceptable inputs produce unacceptable outputs. cases, module code check unacceptable outputs found, report framework reporting model user stopping model run. module stop model run. Instead composes descriptive error message adds Errors component module outputs list. one error, Errors component vector error messages. framework writes error message(s) model run log stops model execution.Warnings handled similar way. module code checks warning conditions (.e. model execution stopped users condition) finds , composes warning message added Warnings component module outputs list. framework writes warnings messages model run log.functionality processing module errors warnings used primarily Initialize modules explained Section 8.1.5.","code":"Set = items(\n  item(\n    NAME = \"TranRevMiPC\",\n    TABLE = \"Marea\",\n    GROUP = \"Year\",\n    TYPE = \"compound\",\n    UNITS = \"MI/PRSN\",\n    NAVALUE = -1,\n    PROHIBIT = c(\"NA\", \"< 0\"),\n    ISELEMENTOF = \"\",\n    SIZE = 0,\n    DESCRIPTION = \"Ratio of bus-equivalent revenue-miles (i.e. revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population\"\n  )\n)AssignTransitService <- function(L) {\n  #Set up\n  #------\n  #Fix seed as synthesis involves sampling\n  set.seed(L$G$Seed)\n  #Define vector of modes\n  Md <- as.character(BusEquivalents_df$Mode)\n  #Define vector of Mareas\n  Ma <- L$Year$Marea$Marea\n\n  #Calculate bus equivalent revenue miles\n  #--------------------------------------\n  #Make table of revenue miles by Marea\n  RevMi_df <- data.frame(L$Year$Marea[paste0(Md, \"RevMi\")])\n  colnames(RevMi_df) <- Md\n  rownames(RevMi_df) <- Ma\n  RevMi_MaMd <- as.matrix(RevMi_df)\n  #Calculate the bus equivalent revenue miles\n  BusEq_Md <- BusEquivalents_df$BusEquivalents\n  names(BusEq_Md) <- Md\n  BusEqRevMi_Ma <-\n    rowSums(sweep(RevMi_MaMd, 2, BusEq_Md, \"*\"))[Ma]\n\n  #Calculate the bus equivalent revenue miles per capita\n  #-----------------------------------------------------\n  #Calculate population in the urbanized area\n  UrbanPop_Ma <-\n    tapply(L$Year$Bzone$UrbanPop, L$Year$Bzone$Marea, sum)[Ma]\n  #Calculate Marea bus equivalent revenue miles per capita\n  TranRevMiPC_Ma <- BusEqRevMi_Ma / UrbanPop_Ma\n\n  #Return the results\n  #------------------\n  #Initialize output list\n  Out_ls <- initDataList()\n  Out_ls$Year$Marea <-\n    list(TranRevMiPC = TranRevMiPC_Ma)\n  #Return the outputs list\n  Out_ls\n}"},{"path":"software-framework.html","id":"module-documentation-1","chapter":"17 Software Framework","heading":"17.5.0.1.4 8.1.4 Module Documentation","text":"recommended module documentation included top module script file possible make easier review analyze module. standardized approach developed produces documentation markdown format can viewed web page converted formats printing. end module script documentModule function like documentModule(\"PredictIncome\"). documentModule parses module script, extracts documentation block head file inserts text, tables, figures saved script inserted documentation using special tags explained . addition, documentModule function reads module specifications creates formatted tables showing module inputs, datasets used, datasets produced. documentation file(s) saved model_docs directory inst/extdata directory turn directory installed package. documentModule function called end script rest script must executed produce datasets inserted documentation file. Following example documentation block looks like.several things note example. first text block commented (preceded #). Since R doesn’t support block comments, line must commented. may look way example word wrapping, every line commented. Second, start end documentation block denoted matching <doc> <\/doc> tags. parser uses extract documentation script. document extracted, leading comments stripped , resulting markdown-formatted text. comment (#) symbols text actually markdown formatting identify headings different levels. Documentation can include standard markdown formatting emphasis, links, tables. addition, documentation can include special tags shown example. Three types tags available:<txt:xxxx> inserts block text contained referenced object. example <txt:GQIncModel_ls$Summary> tag example insert summary statistics group quarters income model.<txt:xxxx> inserts block text contained referenced object. example <txt:GQIncModel_ls$Summary> tag example insert summary statistics group quarters income model.<tab:xxxx> inserts data can presented table data frame. example <tab:HHIncModel_ls$MeanCompare> tag example insert table compares observed estimated mean values.<tab:xxxx> inserts data can presented table data frame. example <tab:HHIncModel_ls$MeanCompare> tag example insert table compares observed estimated mean values.<fig:xxxx> creates markdown reference image file show proper place markdown displayed browser converted another document form. example <fig:reg-hh-inc_obs-vs-est_distributions.png> tag example insert figure compares observed estimated income distributions markdown displayed.<fig:xxxx> creates markdown reference image file show proper place markdown displayed browser converted another document form. example <fig:reg-hh-inc_obs-vs-est_distributions.png> tag example insert figure compares observed estimated income distributions markdown displayed.helpful include test code module script aid module development. framework includes testModule function assist module testing. function described detail Section 9.2.1. Testing requires sample input files containing datasets specified modules Inp specifications. stored ‘inputs’ directory ‘tests’ directory. ‘tests’ directory also must contain ‘defs’ directory contains required model definitions files (see Section 6.1). Finally, ‘tests’ directory must contain datastore type specified ‘run_parameters.json’ file, contains datasets specified modules Get specifications. first stage module testing, module specifications checked, input files checked, presence required data checked, input list (L) returned use module development. test, DoRun argument testModule function needs set FALSE. module code written, module tested check whether module code working correctly returns results consistent Set specifications module. test, DoRun argument testModule function must TRUE. module tested, important comment testing code script must run package built. Following example testing code module commented .","code":"#<doc>\n## PredictIncome Module\n#### September 6, 2018\n#\n#This module predicts the income for each simulated household given the number of workers in each age group and the average per capita income for the Azone where the household resides.\n#\n### Model Parameter Estimation\n#Household income models are estimated for *regular* households and for *group quarters* households.\n#\n#The household income models are estimated using Census public use microsample (PUMS) data that are compiled into a R dataset (HhData_df) by the 'CreateEstimationDatasets.R' script when the VESimHouseholds package is built. The data that are supplied with the VESimHouseholds package downloaded from the VisionEval repository may be used, but it is preferrable to use data for the region being modeled. How this is done is explained in the documentation for the *CreateEstimationDatasets.R* script.\n#\n#The household income models are linear regression models in which the dependent variable is a power transformation of income. Power transformation is needed in order to normalize the income data distribution which has a long right-hand tail. The power transform is found which minimizes the skewness of the income distribution. The power transform for *regular* households is:\n#\n#<txt:HHIncModel_ls$Pow>\n#\n#The power transform for *group quarters* households is:\n#\n#<txt:GQIncModel_ls$Pow>\n#\n#The independent variables for the linear models are power transformed per capita income for the area, the number of workers in each of 4 worker age groups (15-19, 20-29, 30-54, 55-64), and the number of persons in the 65+ age group. In addition, power-transformed per capita income is interacted with each of the 4 worker groups and 65+ age group variable. The summary statistics for the *regular* household model are as follows:\n#\n#<txt:HHIncModel_ls$Summary>\n#\n#The summary statistics for the *group quarters* household model are as follows:\n#\n#<txt:GQIncModel_ls$Summary>\n#\n#An additional step must be carried out in order to predict household income. Because the linear model does not account for all of the observed variance, and because income is power distribution, the average of the predicted per capita income is less than the average per capita income of the population. To compensate, random variation needs to be added to each household prediction of power-transformed income by randomly selecting from a normal distribution that is centered on the value predicted by the linear model and has a standard deviation that is calculated so as the resulting average per capita income of households match the input value. A binary search process is used to find the suitable standard deviation. Following is the comparison of mean values for the observed *regular* household income for the estimation dataset and the corresponding predicted values for the estimation dataset.\n#\n#<tab:HHIncModel_ls$MeanCompare>\n#\n#The following figure compares the distributions of the observed and predicted incomes of *regular* households.\n#\n#<fig:reg-hh-inc_obs-vs-est_distributions.png>\n#\n#Following is the comparison of mean values for the observed *group quarters* household income for the estimation dataset and the corresponding predicted values for the estimation dataset.\n#\n#<tab:GQIncModel_ls$MeanCompare>\n#\n#The following figure compares the distributions of the observed and predicted incomes of *groups quarters* households.\n#\n#<fig:gq-hh-inc_obs-vs-est_distributions.png>\n#\n### How the Module Works\n#This module runs at the Azone level. Azone household average per capita income and group quarters average per capita income are user inputs to the model. The other model inputs are in the datastore, having been created by the CreateHouseholds and PredictWorkers modules. Household income is predicted separately for *regular* and *group quarters* households. Per capita income is transformed using the estimated power transform, the model dependent variables are calculated, and the linear model is applied. Random variation is applied so that the per capita mean income for the predicted household income matches the input value.\n#\n\n#<\/doc>\n"},{"path":"software-framework.html","id":"initialize-module-1","chapter":"17 Software Framework","heading":"17.5.0.1.5 8.1.5 Initialize Module","text":"Although framework performs several checks module input data based module specifications, times additional checks inputs necessary possibly transformations well. example, several datasets proportions data must add 1 across datasets. example, 4 input datasets PredictHousing module *VELandUse** package give proportions households Bzone 4 income quartiles Azone Bzones located . inputs checked assure sum quartile proportions Bzone adds one. sums close 1, model user needs alerted fact can correct input file. sums close 1 exactly 1 (due rounding errors preparing inputs), inputs automatically adjusted equal 1 saved datastore. module developer needs establish complex checks transformations like , special module name Initialize.Initialize module, module specifications identify input datasets need checked. done manner described Section 8.1.2. module specifications Get Set components since purpose Initialize module process inputs. can one Initialize module package inputs need additional checking, regardless module package use , need processed Initialize module. Datasets listed Inp specifications Initialize module must included Inp specifications module package.model intialized initializeModel function run_model.R script (Section 5 Appendix ), module packages run script checked presence Initialize module. found added list modules require input processing. initializeModel function processes inputs Initialize module two steps. first step, performs standard input processing done modules (input files read datasets checked completeness correctness). output checking process standard outputs list Global, BaseYear, Year components. second step, framework calls Initialize module function passes outputs list first step. Initialize module whatever enhanced data checking transformation necessary returns outputs list structure inputs list addition Errors Warnings components (see Section 8.1.3). Several VisionEval packages include Initialize modules can used examples.","code":""},{"path":"software-framework.html","id":"the-instextdata-directory-1","chapter":"17 Software Framework","heading":"17.5.0.2 8.2. The inst/extdata Directory","text":"convention, ‘inst/extdata’ directory standard place put external (raw) data files opposed R datasets placed ‘data’ directory. model estimation data kept. Section 8.1.1.1 provides detailed explanation. directory include subdirectory named ‘sources’ hold reports external documentation needed.","code":""},{"path":"software-framework.html","id":"the-data-raw-directory-1","chapter":"17 Software Framework","heading":"17.5.0.3 8.3. The data-raw Directory","text":"instances impractical include model estimation data files ‘inst/extdata’ directory, necessary model users provide regional model estimation data. , example, source data confidential elements, may necessary preprocess data anonymize including package; source data may large include text file package. cases, source data may processed outside package processed datasets included package datasets R binary files. done, binary data files placed directory named ‘data-raw’ package.","code":""},{"path":"software-framework.html","id":"the-tests-directory-1","chapter":"17 Software Framework","heading":"17.5.0.4 8.4. The tests Directory","text":"‘tests’ directory contains R scripts results module tests. scripts directory contains scripts used carry module tests. directory also contains subdirectories model types module tested (e.g VE-RSPM, VE-State, VE-RPAT). Two approaches available handing module data includes input files module uses, defs files, datastore contains datasets used module aside input files. data can included package may kept central repository. included package, must placed directory corresponding model. necessary avoid conflicts test data different models. scripts directory includes testing script runs tests modules package particular module. example, script testing modules VE-State application named vestate_test.R. scripts directory also includes test.R script calls individual model test scripts automated package testing. centralized data testing approach used, test_functions.R script needs included. includes functions needed support centralized test data approach. test process still finalized. future functionality included framework software. Following example test script using central data approach:Section 9.2.1 provides information using testModule function.","code":"#vestate_test.R\n#--------------\n\n#Load packages and test functions\nlibrary(visioneval)\nlibrary(filesstrings)\nsource(\"tests/scripts/test_functions.R\")\n\n#Define test setup parameters\nTestSetup_ls <- list(\n  TestDataRepo = \"../Test_Data/VE-State\",\n  DatastoreName = \"Datastore.tar\",\n  LoadDatastore = FALSE,\n  TestDocsDir = \"vestate\",\n  ClearLogs = TRUE,\n  # SaveDatastore = TRUE\n  SaveDatastore = FALSE\n)\n\n#Define the module tests\nTests_ls <- list(\n  list(ModuleName = \"CreateHouseholds\", LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictWorkers\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"AssignLifeCycle\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictIncome\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE)\n)\n\n#Set up, run tests, and save test results\nsetUpTests(TestSetup_ls)\ndoTests(Tests_ls, TestSetup_ls)\nsaveTestResults(TestSetup_ls)\n"},{"path":"software-framework.html","id":"software-framework-1","chapter":"17 Software Framework","heading":"17.6 Software Framework","text":"software framework VisionEval model system implemented set functions contained visioneval package. functions classified four groups: user, developer, control, datastore. Model user functions used write scripts run VisionEval models. Section 9.1 describes used. Appendix G contains full documentation model user functions. package contains contains standard documentation functions. Module developer functions module developers may call module code otherwise aid module developing testing. Section 9.2 describes important module development functions Appendix H includes full documentation functions. functions VisionEval framework functions control initialization VisionEval model run execution VisionEval modules. functions internal VisionEval software framework used model users module developers. Section 9.3 provides overview functions Appendix includes full function documentation. remaining functions functions directly interact model datastore. Section 9.4 provides overview functions Appendix J provides full documentation.Additional documentation shows calling relationships functions [longer, 9/17/2019] available interactive visualization. visualization shows names functions nodes network graph arrows connecting nodes showing functions called function (arrows point calling function called function). nodes colored-coded indicate function groups: blue indicates model user functions, green indicates module developer functions, yellow indicates framework control functions, red indicates datastore interaction functions. Clicking function visualization highlights function arrows connected . also provides summary information function including description , descriptions function arguments, description function’s return value.","code":""},{"path":"software-framework.html","id":"api-for-model-users","chapter":"17 Software Framework","heading":"17.6.0.1 9.1. API for Model Users","text":"Three functions part API model users: ‘initializeModel’, ‘runModule’, ‘getYears’. explained turn.‘initializeModel’ function prepares model running modules. includes:\n1) Creating “ModelState.Rda” file contains global parameters model run variables used keep track state datastore aspects model run (Section 6.6);\n2) Creating log file used record model status messages warning error messages;\n3) Creating initializing model datastore including loading specified datastore;\n4) Processing model geography definition file setting appropriate geographic tables datastore;\n5) Checking whether specified module packages installed module specifications correct;\n6) Parsing “run_model.R” script simulating model run confirm datastore contain data module needs called data specifications consistent module ‘Get’ specifications;\n7) Checking whether scenario input files identified specified modules present, data consistent specifications; ,\n8) Loading data input files datastore.errors found model initialization process, error message displayed console initialization process terminate. Detailed error messages log identify specific causes errors. initialization proceeds without errors, user can assured model run without errors. Following typical ‘initializeModel’ function call model run script.function arguments meanings follows:\n- ParamDir string identifying relative absolute path directory parameter geography definition files located. default value “defs”.\n- RunParamFile string identifying name JSON-formatted text file contains parameters needed identify manage model run. default value “run_parameters.json”.\n- GeoFile string identifying name text file comma-separated values format contains geographic specifications model. default value “geo.csv”.\n- ModelParamFile string identifying name JSON-formatted text file contains global model parameters important model may shared several modules.\n- LoadDatastore logical identifying whether existing datastore loaded.\n- DatastoreName string identifying full path name datastore load NULL existing datastore working directory loaded.\n- SaveDatastore string identifying whether existing datastore working directory saved rather removed.consistency checks done datastore specified loaded including:\n- base year loaded datastore must defined model run.\n- defined geography loaded datastore must defined model run.name suggests, ‘runModule’ function runs module. Following example invoked:function arguments meanings follows:\n- ModuleName string identifying name module object.\n- PackageName string identifying name package module part .\n- RunFor string identifying whether run module years (AllYears), base year (BaseYear), years except base year (NotBaseYear).\n- RunYear string identifying run year.runModule function runs named module within runModule function environment. significant improvement functions implement submodels current GreenSTEP (RSPM, EERPAT, RPAT) run. models, functions run global environment. consequence, global environment collects objects increase potential name conflicts care taken keep clean. running modules within runModule function environment, changes made global environment objects created process vanish runModule function completes work running module.Modules can run multiple years running loop iterates years identified \n‘Years’ parameter specified “run_parameters.json” file (Section 6.1). Section 5 shows example using loop. Rather hard code model run years loop, user can use ‘getYears’ function query return vector years.","code":"initializeModel(\n  ParamDir = \"defs\",\n  RunParamFile = \"run_parameters.json\",\n  GeoFile = \"geo.csv\",\n  ModelParamFile = \"model_parameters.json\",\n  LoadDatastore = FALSE,\n  DatastoreName = NULL,\n  SaveDatastore = TRUE\n  )runModule(ModuleName = \"CreateHouseholds\", \n          PackageName = \"VESimHouseholds\",\n          RunFor = \"AllYears\",\n          RunYear = Year)"},{"path":"software-framework.html","id":"api-for-module-developers","chapter":"17 Software Framework","heading":"17.6.0.2 9.2. API for Module Developers","text":"VisionEval API module developers currently includes 10 functions. presented 3 groups:\n- Key module script functions;\n- Functions help developers write specifications consistent modules; ,\n- Functions developers may use simplify model implementation.","code":""},{"path":"software-framework.html","id":"key-module-script-functions","chapter":"17 Software Framework","heading":"17.6.0.2.1 9.2.1. Key Module Script Functions","text":"Four functions almost always used module scripts.Module specifications written nested R lists structured particular way (Section 8). Rather use ‘list’ function define list structure, two alias functions - ‘item’ ‘items’ - used define structure. example functions used shown Appendix E. Although modules run ‘list’ function used instead, highly recommended ‘item’ ‘items’ used maintain consistent style modules.‘processEstimationInputs’ function must used module includes procedures estimating model parameter(s) regional data (Section 8). function used check data supplied calculate regional parameter(s) consistent specifications. function arguments follows:\n- Inp_ls list describes specifications estimation file. list must meet framework standards specification description.\n- FileName string identifying file name. file name without path information. file must located “inst/extdata” directory package.\n- ModuleName string identifying name module estimation data used .function returns data frame containing estimation inputs supplied specifications met. specifications met, error thrown details regarding specification error(s) written console.‘testModule’ function essential tool testing module work correctly VisionEval model system. test module function tests module test setup mimics model run. test datastore needs present unless data modules needed (.e. data used module supplied input data). inputs required module must present, standard model definitions files included “defs” directory (Section 6.1) must present well. function invoked, following tests done module:\n- Checks whether module specifications proper;\n- Checks whether test module inputs consistent module ‘Inp’ specifications can loaded test datastore;\n- Checks whether test datastore loaded inputs contains data needed module run;\n- Checks whether module run without error; ,\n- Checks whether outputs module consistent module ‘Set’ specifications.function arguments follows:\n- ModuleName string identifying module name.\n- ParamDir string identifying location directory run parameters, model parameters, geography definition files located. default value defs. directory located tests directory.\n- RunParamFile string identifying name run parameters file. default value run_parameters.json.\n- GeoFile string identifying name file contains geography definitions.\n- ModelParamFile string identifying name file contains model parameters. default value model_parameters.json.\n- LoadDatastore logical value identifying whether load existing datastore. TRUE, loads datastore whose name identified run_parameters.json file. FALSE initializes new datastore.\n- SaveDatastore logical value identifying whether module outputs written datastore. TRUE module outputs written datastore. FALSE outputs written datastore.\n- DoRun logical value identifying whether module run. FALSE, function initialize datastore, check specifications, load inputs run module. return list module inputs. described detail . TRUE, module run results checked consistency module’s ‘Set’ specifications.\n- RunFor string identifying whether run module years (AllYears), base year (BaseYear), years except base year (NotBaseYear)\n- StopOnErr logical value indicating whether model execution stopped module transmits one error messages whether execution continue next module. default value TRUE. error handling ordinarily proceed model run. value FALSE used ‘Initialize’ modules packages run model initialization. ‘Initialize’ modules used check preprocess inputs. purpose, module identify errors input data, ‘initializeModel’ function collate data errors print log.\n- RequiredPackages string vector identifying VisionEval packages module calls modules access datasets .\n- TestGeoName string identifying name geographic area return data . DoRun argument FALSE, function returns list containing data module requests. return data one geographic area set identified RunBy specification. example RunBy specification Marea, function return list data one Marea. argument can used specify geographic area data returned . Otherwise data first area identified datastore returned.DoRun argument TRUE, module run return value. module run geographic areas outputs checked consistency module’s Set specifications. argument FALSE, return value function list containing data identified module’s Get specifications. setting useful module development order create data needed assist module programming. used conjunction ‘getFromDatastore’ function create dataset provided framework. example module script Appendix E shows aspect ‘testModule’ function can used module developers make development code easier. function also writes messages console log testing proceeds. messages include time test starts ends. key test fails, requiring fix tests can run, execution stops error message written console. Detailed error messages also written log.","code":""},{"path":"software-framework.html","id":"functions-to-assist-specification-writing","chapter":"17 Software Framework","heading":"17.6.0.2.2 9.2.2. Functions to Assist Specification Writing","text":"explained Sections 4.1 8.1, VisionEval model system uses data specifications help assure modules can work properly one another. data specifications saved attributes dataset saved datastore module. specifications checked consistency dataset module requests retrieved datastore. couple functions assist module developer identifying datasets registered modules produce retrieving ‘Get’ specifications datasets developer’s module use.‘item’ ‘items’ functions used organize specifications module script. aliases R language ‘list’ function.‘readVENameRegistry’ function returns list containing specifications datasets registered modules save datastore. list contains two components. components data frames containing specifications datasets identified ‘Inp’ ‘Set’ registered modules. data frame row lists specifications dataset well module produces dataset package module . function useful developers :\n- Avoiding dataset naming conflicts modules; ,\n- Identifying datasets produced modules can used module calculations.present time, ‘readVENameRegistry’ function fairly rudimentary functionality. argument, ‘NameRegistryDir’, allows user specify local directory name registry located. future, function read registry remote repository VisionEval modules stored. Also, function also modified enable module developer search datasets based keywords, module names, package names, keywords.‘getRegisteredGetSpecs’ function helps module developer write ‘Get’ specifications consistent specifications registered datasets. function returns data frame containing ‘Get’ specifications specified datasets. function arguments follows:\n- Names_ character vector dataset names get specifications .\n- Tables_ character vector tables datasets part .\n- Groups_ character vector groups tables part .\n- NameRegistryDir string identifying path directory name registry file located.present time, function returns data frame contains ‘Get’ specifications requested dataset. module developer put information proper form module script. future, function modified return ‘Get’ specifications list form may copied module script.","code":""},{"path":"software-framework.html","id":"processing-runtime-errors-and-warnings","chapter":"17 Software Framework","heading":"17.6.0.2.3 9.2.3. Processing Runtime Errors and Warnings","text":"Section 8.1.5 described Initialize module can used perform input data checks basic data checking performed framework. Although use framework data checks Initialize module can ideally catch data errors/warnings model initialization, sometimes instances errors/warnings can caught runtime. Runtime errors/warnings ideally caught gracefully user presented understandable message direct solution rather cause program crash cryptic R language message. framework provides functions assist module developer identify errors warnings framework runtime include helpful messages. addErrorMsg function used pass error message framework. module code catches specified error, handle error code doesn’t crash use addErrorMsg function record error processing framework. default, error message returned module, runModule function stop model execution, print message console error occurred running module, print details error module developer included message. addErrorMsg function takes two arguments: ResultsListName, string identifying name results list returned module (e.g. ‘Out_ls’); ErrMsg string error message written log user see. Likewise, addWarningMsg function likewise used pass warning message framework. case warnings, model run stopped warning printed console details written log. Following example use addWarningMsg message checking unlikely population density:","code":"  #Calculate density measures\n  #--------------------------\n  #Population density\n  D1B_ <- with(D_df, Pop / Area)\n  #Check for high population density values and add warning\n  IsHighDensity_ <- D1B_ > 100\n  HighDensityBzones_ <- Bz[IsHighDensity_]\n  if (any(IsHighDensity_)) {\n    Msg <- paste0(\n      \"The following Bzones in the year \", L$G$Year, \" \",\n      \"have population densities greater than \",\n      \"100 persons per acre: \", paste(HighDensityBzones_, collapse = \", \"), \". \",\n      \"This density is a relatively high level. \",\n      \"Check your Bzone area and housing inputs for these Bzones and make \",\n      \"sure that they are correct.\"\n    )\n    addWarningMsg(\"Out_ls\", Msg)\n    rm(Msg)\n  }\n  rm(IsHighDensity_, HighDensityBzones_)\n  #Employment density\n  D1C_ <- with(D_df, TotEmp / Area)\n  #Activity density\n  D1D_ <- with(D_df, (TotEmp + NumHh) / Area)"},{"path":"software-framework.html","id":"utility-functions-for-implementing-modules","chapter":"17 Software Framework","heading":"17.6.0.2.4 9.2.4. Utility Functions for Implementing Modules","text":"Many submodels GreenSTEP RSPM models linear binomial logit models. Several binary logit model implementations adjust constant match specified input proportions. example, light truck model enables model users specify future light truck proportion model adjust constant match proportion. Likewise, several linear models adjust dispersion parameter match specified population mean. done example household income model match future per capita income projections. adjustments made use binary search algorithm. following three functions simplify implementation models VisionEval model system.‘applyLinearModel’ function applies linear model optionally adjusts model match target mean value. following arguments:\n- Model_ls list contains following components: 1) Type - value ‘linear’; 2) Formula - string representation model equation; 3) PrepFun - function prepares input data frame model application. preparation, element list present set equal NULL; 4) SearchRange - two-element numeric vector specifies acceptable search range use determining dispersion factor. 5) OutFun function applied transform results applying linear model. example untransform power-transformed variable. transformation necessary, element list present set equal NULL.\n- Data_df data frame containing data required applying model.\n- TargetMean number identifying target mean value achieved NULL target.\n- CheckTargetSearchRange logical identifying whether function check whether specified ‘SearchRange’ model produce acceptable values (.e. NA NaN values). FALSE (default), function run model check target search range.important note ‘Model_ls’ argument list must contain components listed . Also, ‘CheckTargetSearchRange’ argument must set equal TRUE call module function. Setting equal TRUE useful model estimation help set target search range values.function returns vector numeric values record input data frame model run, function run check target search range, summary predicted values model run dispersion set high value search range.‘applyBinomialModel’ function applies binomial model optionally adjusts model match target proportion. following arguments similar ‘applyLinearModel’ function:\n- Model_ls list contains following components: 1) Type - value ‘binomial’; 2) Formula - string representation model equation; 3) Choices - two-element vector listing choice set. first element choice binary logit model equation predicts odds ; 4) PrepFun - function prepares input data frame model application. preparation, element list present set equal NULL; 5) SearchRange - two-element numeric vector specifies acceptable search range use determining factor adjusting model constant.\n- Data_df data frame containing data required applying model.\n- TargetProp number identifying target proportion default choice achieved input data NULL target proportion achieved.\n- CheckTargetSearchRange logical identifying whether function check whether specified ‘SearchRange’ model produce acceptable values (.e. NA NaN values). FALSE (default), function run model check target search range.ApplyRandom logical value determines binomial choice made. binomial choice model returns probability modeled selection chosen. example housing type model predict probability household lives single-family home. ApplyRandom argument TRUE, function takes sample uniform distribution 0 1 value less probability modeled choice selected. Otherwise alternate choice selected. ApplyRandom argument FALSE modeled choice selected modeled probability greater 0.5.ApplyRandom logical value determines binomial choice made. binomial choice model returns probability modeled selection chosen. example housing type model predict probability household lives single-family home. ApplyRandom argument TRUE, function takes sample uniform distribution 0 1 value less probability modeled choice selected. Otherwise alternate choice selected. ApplyRandom argument FALSE modeled choice selected modeled probability greater 0.5.ReturnProbs logical value TRUE returns modeled choice probabilities instead modeled choices.ReturnProbs logical value TRUE returns modeled choice probabilities instead modeled choices.function returns vector choice values record input data frame neither CheckTargetSearchRange ReturnProbs arguments TRUE. ReturnProbs argument TRUE choice probabilities returned. CheckTargetSearchRange argument TRUE function run check target search range, two-element vector identifying search range produces NA NaN values.third function, ‘binarySearch’, called ‘applyLinearModel’ function value ‘TargetMean’ argument NULL, called ‘applyBinomialModel’ function value ‘TargetProp’ argument NULL. Module developers may find function useful module implementation code. arguments function :\n- Function function returns value compared Target argument. function must take first argument value SearchRange_. must return value may compared Target value.\n- SearchRange_ two element numeric vector lowest highest values parameter range within search carried .\n- … One optional arguments Function.\n- Target numeric value compared return value ‘Function’.\n- MaxIter integer specifying maximum number iterations search attempt order match ‘Target’ within specified ‘Tolerance’.\n- Tolerance numeric value specifying proportional difference ‘Target’ return value Function determine search complete.function returns value within ‘SearchRange_’ function parameter matches target value.Developers can refer source code ‘applyLinearModel’ ‘applyBinomialModel’ functions help understand use function.","code":""},{"path":"software-framework.html","id":"module-documentation-function","chapter":"17 Software Framework","heading":"17.6.0.2.5 9.2.5. Module Documentation Function","text":"Section 8.1.4 describes module documentation included module script. ‘documentModule’ prepares formatted documentation script documentation. Refer section details.","code":""},{"path":"software-framework.html","id":"debugging-runtime-errors","chapter":"17 Software Framework","heading":"17.6.0.2.6 9.2.6. Debugging Runtime Errors","text":"Although large majority runtime errors avoided framework’s data specification system, Initialize modules, internal module error checks, inevitably errors caught runtime. can pose challenges debugging R language error messages can cryptic. Often easiest way find error recreate state model start module execution step module code find error. made simpler using fetchModuleData function. function retrieves datastore data passed module code can checked. function takes following arguments:\n- ModuleName: string identifying name module.\n- PackageName: string identifying name package module .\n- Year: string identifying model run year retrieve data .\n- Geo: string identifying geography retrieve data module’s ‘RunBy’ specification ‘Region’. argument omitted ‘RunBy’ specification ‘Region’.example steps used debugging CalculateUrbanMixMeasure module errored running model R console:\n1. model run stopped cryptic R error message printed console.\n2. following code entered console get dataset used module: L <- fetchModuleData(\"CalculateUrbanMixMeasure\", \"VELandUse\", \"2040\"). Note L standard name used modules refer data list provided framework module.\n3. module function code retrieved edit(VELandUse::CalculateUrbanMixMeasure) pasted temporary file.\n4. module code temporary file stepped line line error occurred. values data used computation checked determine cause. case, error caused high population densities outside range values used estimate binomial logit model determines odds Bzone urban-mixed-use. Calculating odds involves exponentiation case high densities produced infinite values turn caused probability values NA. turn caused error used sample function.\n5. Code fix module developed tested temporary file. fixed code used modify CalculateUrbanMixMeasure code VELandUse package.","code":""},{"path":"software-framework.html","id":"appendix-a-example-model-run-script","chapter":"17 Software Framework","heading":"17.6.1 Appendix A: Example Model Run Script","text":"","code":"#===========\n#run_model.R\n#===========\n\n#This script demonstrates the VisionEval framework for the RSPM model.\n\n#Load libraries\n#--------------\nlibrary(visioneval)\n\n#Initialize model\n#----------------\ninitializeModel(\n  ParamDir = \"defs\",\n  RunParamFile = \"run_parameters.json\",\n  GeoFile = \"geo.csv\",\n  ModelParamFile = \"model_parameters.json\",\n  LoadDatastore = FALSE,\n  DatastoreName = NULL,\n  SaveDatastore = TRUE\n  )  \n\n#Run all demo module for all years\n#---------------------------------\nfor(Year in getYears()) {\n  runModule(ModuleName = \"CreateHouseholds\", \n            PackageName = \"VESimHouseholds\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"PredictWorkers\", \n            PackageName = \"VESimHouseholds\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"AssignLifeCycle\", \n            PackageName = \"VESimHouseholds\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"PredictIncome\", \n            PackageName = \"VESimHouseholds\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"PredictHousing\", \n            PackageName = \"VESimHouseholds\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"LocateHouseholds\",\n            PackageName = \"VELandUse\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"LocateEmployment\",\n            PackageName = \"VELandUse\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"AssignDevTypes\",\n            PackageName = \"VELandUse\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"Calculate4DMeasures\",\n            PackageName = \"VELandUse\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"CalculateUrbanMixMeasure\",\n            PackageName = \"VELandUse\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"AssignTransitService\",\n            PackageName = \"VETransportSupply\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"AssignRoadMiles\",\n            PackageName = \"VETransportSupply\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"AssignVehicleOwnership\",\n            PackageName = \"VEVehicleOwnership\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"CalculateHouseholdDVMT\",\n            PackageName = \"VETravelDemand\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n  runModule(ModuleName = \"CalculateAltModeTrips\",\n            PackageName = \"VETravelDemand\",\n            RunFor = \"AllYears\",\n            RunYear = Year)\n}"},{"path":"software-framework.html","id":"appendix-b-geography-specification-file-geography.csv-examples","chapter":"17 Software Framework","heading":"17.6.2 Appendix B: Geography Specification File (geography.csv) Examples","text":"Figure A1. Example geography.csv file specifies AzonesFigure A2. Example geography.csv file specifies Azones Bzones","code":""},{"path":"software-framework.html","id":"appendix-c-recognized-data-types-and-units","chapter":"17 Software Framework","heading":"17.6.3 Appendix C: Recognized Data Types and Units","text":"Recognized Data Types Units defined ‘Types’ function. definition also includes factors converting units. function definition listed :","code":"$double\n$double$units\n[1] NA\n\n$double$mode\n[1] \"double\"\n\n\n$integer\n$integer$units\n[1] NA\n\n$integer$mode\n[1] \"integer\"\n\n\n$character\n$character$units\n[1] NA\n\n$character$mode\n[1] \"character\"\n\n\n$logical\n$logical$units\n[1] NA\n\n$logical$mode\n[1] \"logical\"\n\n\n$compound\n$compound$units\n[1] NA\n\n$compound$mode\n[1] \"double\"\n\n\n$currency\n$currency$units\n$currency$units$USD\nUSD \n  1 \n\n\n$currency$mode\n[1] \"double\"\n\n\n$distance\n$distance$units\n$distance$units$MI\n        MI         FT         KM          M \n   1.00000 5280.00000    1.60934 1609.34000 \n\n$distance$units$FT\n         MI          FT          KM           M \n0.000189394 1.000000000 0.000304800 0.304800000 \n\n$distance$units$KM\n         MI          FT          KM           M \n   0.621371 3280.840000    1.000000 1000.000000 \n\n$distance$units$M\n         MI          FT          KM           M \n0.000621371 3.280840000 0.001000000 1.000000000 \n\n\n$distance$mode\n[1] \"double\"\n\n\n$area\n$area$units\n$area$units$SQMI\n       SQMI        ACRE        SQFT         SQM          HA        SQKM \n1.00000e+00 6.40000e+02 2.78800e+07 2.59000e+06 2.58999e+02 2.58999e+00 \n\n$area$units$ACRE\n       SQMI        ACRE        SQFT         SQM          HA        SQKM \n1.56250e-03 1.00000e+00 4.35600e+04 4.04686e+03 4.04686e-01 4.04686e-03 \n\n$area$units$SQFT\n      SQMI       ACRE       SQFT        SQM         HA       SQKM \n3.5870e-08 2.2957e-05 1.0000e+00 9.2903e-02 9.2903e-06 9.2903e-08 \n\n$area$units$SQM\n       SQMI        ACRE        SQFT         SQM          HA        SQKM \n3.86100e-07 2.47105e-04 1.07639e+01 1.00000e+00 1.00000e-04 1.00000e-06 \n\n$area$units$HA\n       SQMI        ACRE        SQFT         SQM          HA        SQKM \n3.86102e-03 2.47105e+00 1.07639e+05 3.86102e-03 1.00000e+00 1.00000e-02 \n\n$area$units$SQKM\n       SQMI        ACRE        SQFT         SQM          HA        SQKM \n3.86102e-01 2.47105e+02 1.07600e+07 1.00000e+06 1.00000e+02 1.00000e+00 \n\n\n$area$mode\n[1] \"double\"\n\n\n$mass\n$mass$units\n$mass$units$LB\n         LB         TON          MT          KG          GM \n1.00000e+00 5.00000e-04 4.53592e-04 4.53592e-01 4.53592e+02 \n\n$mass$units$TON\n         LB         TON          MT          KG          GM \n2.00000e+03 1.00000e+00 9.07185e-01 9.07185e+02 9.07185e+05 \n\n$mass$units$MT\n         LB         TON          MT          KG           M \n2.20462e+03 1.10231e+00 1.00000e+00 1.00000e+03 1.00000e+06 \n\n$mass$units$KG\n         LB         TON          MT          KG          GM \n2.20462e+00 1.10231e-03 1.00000e-03 1.00000e+00 1.00000e+03 \n\n$mass$units$GM\n         LB         TON          MT          KG          GM \n2.20462e-03 1.10230e-06 1.00000e-06 1.00000e-03 1.00000e+00 \n\n\n$mass$mode\n[1] \"double\"\n\n\n$volume\n$volume$units\n$volume$units$GAL\n    GAL       L \n1.00000 3.78541 \n\n$volume$units$L\n     GAL        L \n0.264172 1.000000 \n\n\n$volume$mode\n[1] \"double\"\n\n\n$time\n$time$units\n$time$units$YR\n      YR      DAY       HR      MIN      SEC \n       1      365     8760   525600 31540000 \n\n$time$units$DAY\n         YR         DAY          HR         MIN         SEC \n2.73973e-03 1.00000e+00 2.40000e+01 1.44000e+03 8.64000e+04 \n\n$time$units$HR\n         YR         DAY          HR         MIN         SEC \n1.14155e-04 4.16667e-02 1.00000e+00 6.00000e+01 3.60000e+03 \n\n$time$units$MIN\n         YR         DAY          HR         MIN         SEC \n1.90260e-06 6.94444e-04 1.66667e-02 1.00000e+00 6.00000e+01 \n\n$time$units$SEC\n         YR         DAY          HR         MIN         SEC \n3.17100e-08 1.15740e-05 2.77778e-04 1.66667e-02 1.00000e+00 \n\n\n$time$mode\n[1] \"double\"\n\n\n$energy\n$energy$units\n$energy$units$KWH\n       KWH         MJ        GGE \n1.00000000 3.60000000 0.02967846 \n\n$energy$units$MJ\n        KWH          MJ         GGE \n0.277778000 1.000000000 0.008244023 \n\n$energy$units$GGE\n      KWH        MJ       GGE \n 33.69447 121.30000   1.00000 \n\n\n$energy$mode\n[1] \"double\"\n\n\n$people\n$people$units\n$people$units$PRSN\nPRSN \n   1 \n\n\n$people$mode\n[1] \"integer\"\n\n\n$vehicles\n$vehicles$units\n$vehicles$units$VEH\nVEH \n  1 \n\n\n$vehicles$mode\n[1] \"integer\"\n\n\n$trips\n$trips$units\n$trips$units$TRIP\nTRIP \n   1 \n\n\n$trips$mode\n[1] \"integer\"\n\n\n$households\n$households$units\n$households$units$HH\nHH \n 1 \n\n\n$households$mode\n[1] \"integer\"\n\n\n$employment\n$employment$units\n$employment$units$JOB\nJOB \n  1 \n\n\n$employment$mode\n[1] \"integer\"\n\n\n$activity\n$activity$units\n$activity$units$HHJOB\nHHJOB \n    1 \n"},{"path":"software-framework.html","id":"appendix-d-scenario-input-file-examples","chapter":"17 Software Framework","heading":"17.6.4 Appendix D: Scenario Input File Examples","text":"Figure B1. Example input file loaded ‘Global’ groupNOTE: Heavy lines denote rows hidden shorten displayFigure B2. Example input file loaded ‘forecast year’ group","code":""},{"path":"software-framework.html","id":"appendix-e-example-module-script-from-the-vetransportsupply-package","chapter":"17 Software Framework","heading":"17.6.5 Appendix E: Example Module Script from the VETransportSupply Package","text":"","code":"#======================\n#AssignTransitService.R\n#======================\n\n#<doc>\n#\n## AssignTransitService Module\n#### November 5, 2018\n#\n#This module assigns transit service level to the metropolitan area (Marea) and neighborhoods (Bzones). Annual revenue-miles (i.e. transit miles in revenue service) by transit mode type are read from an input file. The following 8 modes are recognized:\n#* DR = Demand-responsive\n#* VP = Vanpool and similar\n#* MB = Standard motor bus\n#* RB = Bus rapid transit and commuter bus\n#* MG = Monorail/automated guideway\n#* SR = Streetcar/trolley bus/inclined plain\n#* HR = Heavy Rail/Light Rail\n#* CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway\n#\n#Revenue miles are converted to bus (i.e. MB) equivalents using factors derived from urbanized are data from the National Transit Database (NTD). Bus-equivalent revenue miles are used in models which predict vehicle ownership and household DVMT.\n#\n#Revenue miles by mode type are also translated (using NTD data) into vehicle miles by 3 vehicle types: van, bus, and rail. Miles by vehicle type are used to calculate public transit energy consumption and emissions.\n#\n#The module also reads in user supplied data on relative public transit accessibility by Bzone as explained below.\n#\n### Model Parameter Estimation\n#\n#Parameters are calculated to convert the revenue miles for each of the 8 recognized public transit modes into bus equivalents, and to convert revenue miles into vehicle miles. Data extracted from the 2015 National Transit Database (NTD) are used to calculate these parameters. The extracted datasets are in the *2015_Service.csv* and *2015_Agency_information.csv* files in the *inst/extdata* directory of this package. These files contain information about transit service and transit service providers located within urbanized areas. Documentation of the data are contained in the accompanying *2015_Service.txt* and *2015_Agency_information.txt* files.\n#\n#Bus equivalent factors for each of the 8 modes is calculated on the basis of the average productivity of each mode as measured by the ratio of passenger miles to revenue miles. The bus-equivalency factor of each mode is the ratio of the average productivity of the mode to the average productivity of the bus (MB) mode.\n#\n#Factors to compute vehicle miles by mode from revenue miles by mode are calculated from the NTD data on revenue miles and deadhead (i.e. out of service) miles. The vehicle mile factor is the sum of revenue and deadhead miles divided by the revenue miles. These factors vary by mode.\n#\n### How the Module Work\n#\n#The user supplies data on the annual revenue miles of service by each of the 8 transit modes for the Marea. These revenue miles are converted to bus equivalents using the estimated bus-equivalency factors and summed to calculate total bus-equivalent revenue miles. This value is divided by the urbanized area population of the Marea to compute bus-equivalent revenue miles per capita. This public transit service measure is used in models of household vehicle ownership and household vehicle travel.\n#\n#The user supplied revenue miles by mode are translated into vehicle miles by mode using the estimated conversion factors. The results are then simplified into 3 vehicle types (Van, Bus, Rail) where the DR and VP modes are assumed to be served by vans, the MB and RB modes are assumed to be served by buses, and the MG, SR, HR, and CR modes are assumed to be served by rail.\n#\n#The user also supplies information on the aggregate frequency of peak period transit service within 0.25 miles of the Bzone boundary per hour during evening peak period. This is the *D4c* measure included in the Environmental Protection Agency's (EPA) [Smart Location Database] (https://www.epa.gov/smartgrowth/smart-location-database-technical-documentation-and-user-guide). Following is the description of the measure from the user guide:\n#>EPA analyzed GTFS data to calculate the frequency of service for each transit route between 4:00 and 7:00 PM on a weekday. Then, for each block group, EPA identified transit routes with service that stops within 0.4 km (0.25 miles). Finally EPA summed total aggregate service frequency by block group. Values for this metric are expressed as service frequency per hour of service.\n#\n#<\/doc>\n\n\n#=============================================\n#SECTION 1: ESTIMATE AND SAVE MODEL PARAMETERS\n#=============================================\n\n#Describe specifications for transit data files\n#----------------------------------------------\n#Transit agency data\nAgencyInp_ls <- items(\n  item(\n    NAME =\n      items(\"AgencyID\",\n            \"PrimaryUZA\",\n            \"Population\"),\n    TYPE = \"integer\",\n    PROHIBIT = c(\"NA\", \"<= 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  ),\n  item(\n    NAME = \"UZAName\",\n    TYPE = \"character\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  )\n)\n\n#Transit service data\nServiceInp_ls <- items(\n  item(\n    NAME =\n      items(\"RevenueMiles\",\n            \"DeadheadMiles\",\n            \"PassengerMiles\"),\n    TYPE = \"double\",\n    PROHIBIT = c(\"< 0\"),\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  ),\n  item(\n    NAME =\n      items(\"AgencyID\",\n            \"AgencyName\",\n            \"Mode\",\n            \"TimePeriod\"),\n    TYPE = \"character\",\n    PROHIBIT = \"\",\n    ISELEMENTOF = \"\",\n    UNLIKELY = \"\",\n    TOTAL = \"\"\n  )\n)\n\n#Define function to estimate public transit model parameters\n#-----------------------------------------------------------\n#' Estimate public transit model parameters.\n#'\n#' \\code{estimateTransitModel} estimates transit model parameters.\n#'\n#' This function estimates transit model parameters from 2015 National Transit\n#' Database information on transit agencies and service levels. The function\n#' calculates factors for converting annual revenue miles by transit mode to\n#' total bus-equivalent revenue miles. It also calculates factors to convert\n#' revenue miles by mode into vehicle miles by mode.\n#'\n#' @return A list containing the following elements:\n#' BusEquivalents_df: factors to convert revenue miles by mode into bus\n#' equivalents,\n#' UZABusEqRevMile_df: data on bus equivalent revenue miles by urbanized area,\n#' VehMiFactors_df: factors to convert revenue miles by mode into vehicle miles\n#' by mode.\n#' @name estimateTransitModel\n#' @import stats\n#' @export\nestimateTransitModel <- function() {\n  #Read in and process transit datasets\n  #------------------------------------\n  #Read in transit agency datasets\n  Agency_df <-\n    processEstimationInputs(\n      AgencyInp_ls,\n      \"2015_Agency_information.csv\",\n      \"AssignTransitService.R\")\n  #Read in transit service datasets\n  Service_df <-\n    processEstimationInputs(\n      ServiceInp_ls,\n      \"2015_Service.csv\",\n      \"AssignTransitService.R\")\n  #Select only rows with annual totals\n  Service_df <- Service_df[Service_df$TimePeriod == \"Annual Total\",]\n  #Select only rows for service in urbanized areas\n  Service_df <- Service_df[Service_df$AgencyID %in% Agency_df$AgencyID,]\n\n  #Define combined modes and create index datasets\n  #-----------------------------------------------\n  CombinedCode_ls <-\n    list(\n      DR = c(\"DR\", \"DT\"),\n      VP = c(\"VP\", \"PB\"),\n      MB = c(\"MB\"),\n      RB = c(\"RB\", \"CB\"),\n      MG = c(\"MG\"),\n      SR = c(\"SR\", \"TB\", \"IP\"),\n      HR = c(\"LR\", \"HR\", \"AR\"),\n      CR = c(\"CR\", \"YR\", \"CC\", \"TR\")\n    )\n  CombinedCode_ <-\n    c(DR = \"DR\", DT = \"DR\", VP = \"VP\", PB = \"VP\", MB = \"MB\", RB = \"RB\", CB = \"RB\",\n      MG = \"MG\", SR = \"SR\", TB = \"SR\", IP = \"SR\", LR = \"HR\", HR = \"HR\", AR = \"HR\",\n      CR = \"CR\", YR = \"CR\", CC = \"CR\", TR = \"CR\"\n    )\n  Cm <- c(\"DR\", \"VP\", \"MB\", \"RB\", \"MG\", \"SR\", \"HR\", \"CR\")\n\n  #Calculate bus equivalency factors\n  #---------------------------------\n  #Calculate productivity measure\n  Service_df$Productivity <-\n    Service_df$PassengerMiles / Service_df$RevenueMiles\n  #Calculate the average productivity by mode\n  AveProductivity_Md <-\n    tapply(Service_df$Productivity, Service_df$Mode, mean, na.rm = TRUE)\n  #Calculate bus equivalency of different modes\n  BusEquiv_Md <- AveProductivity_Md / AveProductivity_Md[\"MB\"]\n  #Calculate average productivity by combined mode\n  BusEquiv_Cm <- unlist(lapply(CombinedCode_ls, function(x) {\n    mean(BusEquiv_Md[x])\n  }))\n  #Create data frame with mode names and equivalency factors\n  BusEquiv_df <-\n    data.frame(\n      Mode = names(BusEquiv_Cm),\n      BusEquivalents = unname(BusEquiv_Cm)\n    )\n\n  #Calculate revenue miles to total vehicle mile factors by mode\n  #-------------------------------------------------------------\n  #Convert DeadheadMiles for mode DT from NA to 0\n  Service_df$DeadheadMiles[Service_df$Mode == \"DT\"] <- 0\n  #Create data frame of complete cases of revenue miles and deadhead miles\n  Veh_df <- Service_df[, c(\"Mode\", \"RevenueMiles\", \"DeadheadMiles\")]\n  Veh_df <- Veh_df[complete.cases(Veh_df),]\n  #Calculate total revenue miles by combined mode\n  RevMi_Md <- tapply(Veh_df$RevenueMiles, Veh_df$Mode, sum)\n  RevMi_Cm <- unlist(lapply(CombinedCode_ls, function(x) {\n    sum(RevMi_Md[x])\n  }))\n  #Calculate total deadhead miles by combined mode\n  DeadMi_Md <- tapply(Veh_df$DeadheadMiles, Veh_df$Mode, sum)\n  DeadMi_Cm <- unlist(lapply(CombinedCode_ls, function(x) {\n    sum(DeadMi_Md[x])\n  }))\n  #Calculate vehicle mile factors by combined mode\n  VehMiFactors_Cm <- (RevMi_Cm + DeadMi_Cm) / RevMi_Cm\n  VehMiFactors_df <-\n    data.frame(\n      Mode = names(VehMiFactors_Cm),\n      VehMiFactors = unname(VehMiFactors_Cm)\n    )\n\n  #Calculate bus equivalent transit service by urbanized area\n  #----------------------------------------------------------\n  #Attach urbanized area code to service data\n  Service_df$UzaCode <- Agency_df$PrimaryUZA[match(Service_df$AgencyID, Agency_df$AgencyID)]\n  Service_df$UzaName <- Agency_df$UZAName[match(Service_df$AgencyID, Agency_df$AgencyID)]\n  #Tabulate vehicle revenue miles by urbanized area and mode\n  RevMi_UnMd <-\n    tapply(Service_df$RevenueMiles,\n           list(Service_df$UzaName, Service_df$Mode),\n           sum)\n  RevMi_UnMd[is.na(RevMi_UnMd)] <- 0\n  #Summarize by combined mode\n  RevMi_UnCm <- t(apply(RevMi_UnMd, 1, function(x) {\n    tapply(x, CombinedCode_[colnames(RevMi_UnMd)], sum, na.rm = TRUE)[Cm]\n  }))\n  #Sum up the bus-equivalent revenue miles by urbanized area\n  BusEqRevMi_Un <-\n    rowSums(sweep(RevMi_UnCm, 2, BusEquiv_Cm, \"*\"))\n  #Tabulate population by urbanized area\n  UzaPop_Un <- Agency_df$Population[!duplicated(Agency_df$PrimaryUZA)]\n  names(UzaPop_Un) <- Agency_df$UZAName[!duplicated(Agency_df$PrimaryUZA)]\n  UzaPop_Un <- UzaPop_Un[names(BusEqRevMi_Un)]\n  UzaPop_Un <- UzaPop_Un[names(BusEqRevMi_Un)]\n  #Calculate bus-equivalent revenue miles per capita\n  BusEqRevMiPC_Un <- BusEqRevMi_Un / UzaPop_Un\n  #Create data frame of urbanized area bus revenue mile equivalency\n  UZABusEqRevMile_df <-\n    Service_df[!duplicated(Service_df$UzaName), c(\"UzaCode\", \"UzaName\")]\n  rownames(UZABusEqRevMile_df) <- UZABusEqRevMile_df$UzaName\n  UZABusEqRevMile_df <- UZABusEqRevMile_df[names(BusEqRevMi_Un),]\n  UZABusEqRevMile_df$BusEqRevMi <- unname(BusEqRevMi_Un)\n  UZABusEqRevMile_df$UzaPop <- unname(UzaPop_Un)\n  UZABusEqRevMile_df$BusEqRevMiPC <- unname(BusEqRevMiPC_Un)\n  rownames(UZABusEqRevMile_df) <- NULL\n\n  #Return the results\n  #------------------\n  list(\n    BusEquivalents_df = BusEquiv_df,\n    UZABusEqRevMile_df = UZABusEqRevMile_df,\n    VehMiFactors_df = VehMiFactors_df\n  )\n}\n\n#Estimate public transit model parameters\n#----------------------------------------\nTransitParam_ls <- estimateTransitModel()\nBusEquivalents_df <- TransitParam_ls$BusEquivalents_df\nUZABusEqRevMile_df <- TransitParam_ls$UZABusEqRevMile_df\nVehMiFactors_df <- TransitParam_ls$VehMiFactors_df\nrm(AgencyInp_ls)\nrm(ServiceInp_ls)\n\n#Save the bus equivalency factors\n#--------------------------------\n#' Bus equivalency factors\n#'\n#' Bus revenue mile equivalency factors to convert revenue miles for various\n#' modes to bus-equivalent revenue miles.\n#'\n#' @format A data frame with 8 rows and 2 variables containing factors for\n#' converting revenue miles of various modes to bus equivalent revenue miles.\n#' Mode names are 2-character codes corresponding to consolidated mode types.\n#' Consolidated mode types represent modes that have similar characteristics and\n#' bus equivalency values. The consolidate mode codes and their meanings are as\n#' follows:\n#' DR = Demand-responsive\n#' VP = Vanpool and similar\n#' MB = Standard motor bus\n#' RB = Bus rapid transit and commuter bus\n#' MG = Monorail/automated guideway\n#' SR = Streetcar/trolley bus/inclined plain\n#' HR = Heavy Rail/Light Rail\n#' CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway\n#'\n#' \\describe{\n#'   \\item{Mode}{abbreviation for consolidated mode}\n#'   \\item{BusEquivalents}{numeric factor for converting revenue miles to bus equivalents}\n#' }\n#' @source AssignTransitService.R script.\n\"BusEquivalents_df\"\nusethis::use_data(BusEquivalents_df, overwrite = TRUE)\n\n#Save the vehicle mile factors\n#-----------------------------\n#' Revenue miles to vehicle miles conversion factors\n#'\n#' Vehicle mile factors convert revenue miles for various modes to vehicle\n#' miles for those modes.\n#'\n#' @format A data frame with 8 rows and 2 variables containing factors for\n#' converting revenue miles of various modes to vehicle miles.\n#' Mode names are 2-character codes corresponding to consolidated mode types.\n#' Consolidated mode types represent modes that have similar characteristics and\n#' bus equivalency values. The consolidate mode codes and their meanings are as\n#' follows:\n#' DR = Demand-responsive\n#' VP = Vanpool and similar\n#' MB = Standard motor bus\n#' RB = Bus rapid transit and commuter bus\n#' MG = Monorail/automated guideway\n#' SR = Streetcar/trolley bus/inclined plain\n#' HR = Heavy Rail/Light Rail\n#' CR = Commuter Rail/Hybrid Rail/Cable Car/Aerial Tramway\n#'\n#' \\describe{\n#'   \\item{Mode}{abbreviation for consolidated mode}\n#'   \\item{VehMiFactors}{numeric factors for converting revenue miles to\n#'   vehicle miles}\n#' }\n#' @source AssignTransitService.R script.\n\"VehMiFactors_df\"\nusethis::use_data(VehMiFactors_df, overwrite = TRUE)\n\n#Save the urbanized area bus equivalency data\n#--------------------------------------------\n#' Urbanized area bus equivalent revenue mile data for 2015\n#'\n#' Urbanized area data from the 2015 National Transit Database (NTD) related to\n#' the calculation of bus equivalent revenue miles and per capita values.\n#'\n#' @format A data frame with 439 rows and 5 variables containing urbanized area\n#' data on bus equivalent revenue miles\n#'\n#' \\describe{\n#'   \\item{UzaCode}{integer code corresponding to 5-digit code used in the NTD}\n#'   \\item{UzaName}{urbanized area name}\n#'   \\item{BusEqRevMi}{annual bus equivalent revenue miles in the urbanized area}\n#'   \\item{UzaPop}{urbanized area population}\n#'   \\item{BusEqRevMiPC}{annual bus equivalent revenue miles per capita in the urbanized area}\n#' }\n#' @source AssignTransitService.R script.\n\"UZABusEqRevMile_df\"\nusethis::use_data(UZABusEqRevMile_df, overwrite = TRUE)\n\n#Clean up\nrm(TransitParam_ls)\n\n\n#================================================\n#SECTION 2: DEFINE THE MODULE DATA SPECIFICATIONS\n#================================================\n\n#Define the data specifications\n#------------------------------\nAssignTransitServiceSpecifications <- list(\n  #Level of geography module is applied at\n  RunBy = \"Region\",\n  #Specify new tables to be created by Inp if any\n  #Specify new tables to be created by Set if any\n  #Specify input data\n  Inp = items(\n    item(\n      NAME =\n        items(\n          \"DRRevMi\",\n          \"VPRevMi\",\n          \"MBRevMi\",\n          \"RBRevMi\",\n          \"MGRevMi\",\n          \"SRRevMi\",\n          \"HRRevMi\",\n          \"CRRevMi\"),\n      FILE = \"marea_transit_service.csv\",\n      TABLE = \"Marea\",\n      GROUP = \"Year\",\n      TYPE = \"compound\",\n      UNITS = \"MI/YR\",\n      NAVALUE = -1,\n      SIZE = 0,\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\",\n      UNLIKELY = \"\",\n      TOTAL = \"\",\n      DESCRIPTION =\n        list(\n          \"Annual revenue-miles of demand-responsive public transit service\",\n          \"Annual revenue-miles of van-pool and similar public transit service\",\n          \"Annual revenue-miles of standard bus public transit service\",\n          \"Annual revenue-miles of rapid-bus and commuter bus public transit service\",\n          \"Annual revenue-miles of monorail and automated guideway public transit service\",\n          \"Annual revenue-miles of streetcar and trolleybus public transit service\",\n          \"Annual revenue-miles of light rail and heavy rail public transit service\",\n          \"Annual revenue-miles of commuter rail, hybrid rail, cable car, and aerial tramway public transit service\"\n        )\n    ),\n    item(\n      NAME = \"D4c\",\n      FILE = \"bzone_transit_service.csv\",\n      TABLE = \"Bzone\",\n      GROUP = \"Year\",\n      TYPE = \"double\",\n      UNITS = \"aggregate peak period transit service\",\n      NAVALUE = -1,\n      SIZE = 0,\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\",\n      UNLIKELY = \"\",\n      TOTAL = \"\",\n      DESCRIPTION = \"Aggregate frequency of transit service within 0.25 miles of block group boundary per hour during evening peak period (Ref: EPA 2010 Smart Location Database)\"\n    )\n  ),\n  #Specify data to be loaded from data store\n  Get = items(\n    item(\n      NAME = \"Marea\",\n      TABLE = \"Marea\",\n      GROUP = \"Year\",\n      TYPE = \"character\",\n      UNITS = \"ID\",\n      PROHIBIT = \"\",\n      ISELEMENTOF = \"\"\n    ),\n    item(\n      NAME = \"Marea\",\n      TABLE = \"Bzone\",\n      GROUP = \"Year\",\n      TYPE = \"character\",\n      UNITS = \"ID\",\n      PROHIBIT = \"\",\n      ISELEMENTOF = \"\"\n    ),\n    item(\n      NAME =\n        items(\n          \"DRRevMi\",\n          \"VPRevMi\",\n          \"MBRevMi\",\n          \"RBRevMi\",\n          \"MGRevMi\",\n          \"SRRevMi\",\n          \"HRRevMi\",\n          \"CRRevMi\"),\n      TABLE = \"Marea\",\n      GROUP = \"Year\",\n      TYPE = \"compound\",\n      UNITS = \"MI/YR\",\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\"\n    ),\n    item(\n      NAME = \"UrbanPop\",\n      TABLE = \"Bzone\",\n      GROUP = \"Year\",\n      TYPE = \"people\",\n      UNITS = \"PRSN\",\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\"\n    )\n  ),\n  #Specify data to saved in the data store\n  Set = items(\n    item(\n      NAME = \"TranRevMiPC\",\n      TABLE = \"Marea\",\n      GROUP = \"Year\",\n      TYPE = \"compound\",\n      UNITS = \"MI/PRSN/YR\",\n      NAVALUE = -1,\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\",\n      SIZE = 0,\n      DESCRIPTION = \"Ratio of annual bus-equivalent revenue-miles (i.e. revenue-miles at the same productivity - passenger miles per revenue mile - as standard bus) to urbanized area population\"\n    ),\n    item(\n      NAME =\n        items(\n          \"VanDvmt\",\n          \"BusDvmt\",\n          \"RailDvmt\"\n        ),\n      TABLE = \"Marea\",\n      GROUP = \"Year\",\n      TYPE = \"compound\",\n      UNITS = \"MI/DAY\",\n      NAVALUE = -1,\n      PROHIBIT = c(\"NA\", \"< 0\"),\n      ISELEMENTOF = \"\",\n      SIZE = 0,\n      DESCRIPTION = items(\n        \"Total daily miles traveled by vans of various sizes to provide demand responsive, vanpool, and similar services.\",\n        \"Total daily miles traveled by buses of various sizes to provide bus service of various types.\",\n        \"Total daily miles traveled by light rail, heavy rail, commuter rail, and similar types of vehicles.\"\n        )\n    )\n  )\n)\n\n#Save the data specifications list\n#---------------------------------\n#' Specifications list for AssignTransitService module\n#'\n#' A list containing specifications for the AssignTransitService module.\n#'\n#' @format A list containing 4 components:\n#' \\describe{\n#'  \\item{RunBy}{the level of geography that the module is run at}\n#'  \\item{Inp}{scenario input data to be loaded into the datastore for this\n#'  module}\n#'  \\item{Get}{module inputs to be read from the datastore}\n#'  \\item{Set}{module outputs to be written to the datastore}\n#' }\n#' @source AssignTransitService.R script.\n\"AssignTransitServiceSpecifications\"\nusethis::use_data(AssignTransitServiceSpecifications, overwrite = TRUE)\n\n\n#=======================================================\n#SECTION 3: DEFINE FUNCTIONS THAT IMPLEMENT THE SUBMODEL\n#=======================================================\n#This function calculates the annual bus equivalent revenue miles per capita for\n#the urbanized area from the number of annual revenue miles for different\n#public transit modes and the urban area population.\n\n#Main module function that calculates bus equivalent revenue miles per capita\n#----------------------------------------------------------------------------\n#' Calculate bus equivalent revenue miles per capita by Marea.\n#'\n#' \\code{AssignTransitService} calculate bus equivalent revenue miles per capita.\n#'\n#' This function calculates bus equivalent revenue miles per capita for each\n#' Marea.\n#'\n#' @param L A list containing the components listed in the Get specifications\n#' for the module.\n#' @return A list containing the components specified in the Set\n#' specifications for the module.\n#' @name AssignTransitService\n#' @import visioneval\n#' @export\nAssignTransitService <- function(L) {\n  #Set up\n  #------\n  #Fix seed as synthesis involves sampling\n  set.seed(L$G$Seed)\n  #Define vector of modes\n  Md <- as.character(BusEquivalents_df$Mode)\n  #Define vector of Mareas\n  Ma <- L$Year$Marea$Marea\n\n  #Calculate bus equivalent revenue miles\n  #--------------------------------------\n  #Make table of revenue miles by Marea\n  RevMi_df <- data.frame(L$Year$Marea[paste0(Md, \"RevMi\")])\n  colnames(RevMi_df) <- Md\n  rownames(RevMi_df) <- Ma\n  RevMi_MaMd <- as.matrix(RevMi_df)\n  #Calculate the bus equivalent revenue miles\n  BusEq_Md <- BusEquivalents_df$BusEquivalents\n  names(BusEq_Md) <- Md\n  BusEqRevMi_Ma <-\n    rowSums(sweep(RevMi_MaMd, 2, BusEq_Md, \"*\"))[Ma]\n\n  #Calculate the bus equivalent revenue miles per capita\n  #-----------------------------------------------------\n  #Calculate population in the urbanized area\n  UrbanPop_Ma <-\n    tapply(L$Year$Bzone$UrbanPop, L$Year$Bzone$Marea, sum)[Ma]\n  #Calculate Marea bus equivalent revenue miles per capita\n  TranRevMiPC_Ma <- BusEqRevMi_Ma / UrbanPop_Ma\n\n  #Calculate vehicle miles by vehicle type\n  #---------------------------------------\n  #Make vector of vehicle miles factors conforming with RevMi_df\n  VehMiFactors_Md <- VehMiFactors_df$VehMiFactors\n  names(VehMiFactors_Md) <- VehMiFactors_df$Mode\n  VehMiFactors_Md <- VehMiFactors_Md[names(RevMi_df)]\n  #Calculate daily vehicle miles by Marea and mode\n  VehMi_MaMd <- as.matrix(sweep(RevMi_df, 2, VehMiFactors_Md, \"*\")) / 365\n  #Define correspondence between modes and vehicle types\n  ModeToVehType_ <- c(\n    DR = \"Van\",\n    VP = \"Van\",\n    MB = \"Bus\",\n    RB = \"Bus\",\n    MG = \"Rail\",\n    SR = \"Rail\",\n    HR = \"Rail\",\n    CR = \"Rail\"\n  )\n  ModeToVehType_ <- ModeToVehType_[colnames(VehMi_MaMd)]\n  VehMi_df <-\n    data.frame(\n      t(\n        apply(VehMi_MaMd, 1, function(x) {\n          tapply(x, ModeToVehType_, sum) })\n        )\n      )\n\n  #Return the results\n  #------------------\n  #Initialize output list\n  Out_ls <- initDataList()\n  Out_ls$Year$Marea <-\n    list(TranRevMiPC = TranRevMiPC_Ma,\n         VanDvmt = VehMi_df$Van,\n         BusDvmt = VehMi_df$Bus,\n         RailDvmt = VehMi_df$Rail)\n  #Return the outputs list\n  Out_ls\n}\n\n\n#===============================================================\n#SECTION 4: MODULE DOCUMENTATION AND AUXILLIARY DEVELOPMENT CODE\n#===============================================================\n#Run module automatic documentation\n#----------------------------------\ndocumentModule(\"AssignTransitService\")\n\n#Test code to check specifications, loading inputs, and whether datastore\n#contains data needed to run module. Return input list (L) to use for developing\n#module functions\n#-------------------------------------------------------------------------------\n# library(filesstrings)\n# library(visioneval)\n# source(\"tests/scripts/test_functions.R\")\n# #Set up test environment\n# TestSetup_ls <- list(\n#   TestDataRepo = \"../Test_Data/VE-RSPM\",\n#   DatastoreName = \"Datastore.tar\",\n#   LoadDatastore = TRUE,\n#   TestDocsDir = \"verspm\",\n#   ClearLogs = TRUE,\n#   # SaveDatastore = TRUE\n#   SaveDatastore = FALSE\n# )\n# setUpTests(TestSetup_ls)\n# #Run test module\n# TestDat_ <- testModule(\n#   ModuleName = \"AssignTransitService\",\n#   LoadDatastore = TRUE,\n#   SaveDatastore = TRUE,\n#   DoRun = FALSE\n# )\n# L <- TestDat_$L\n# R <- AssignTransitService(L)"},{"path":"software-framework.html","id":"appendix-f-example-test-script-from-the-vesimhouseholds-package","chapter":"17 Software Framework","heading":"17.6.6 Appendix F: Example Test Script from the VESimHouseholds Package","text":"","code":"#vestate_test.R\n#--------------\n\n#Load packages and test functions\nlibrary(visioneval)\nlibrary(filesstrings)\nsource(\"tests/scripts/test_functions.R\")\n\n#Define test setup parameters\nTestSetup_ls <- list(\n  TestDataRepo = \"../Test_Data/VE-State\",\n  DatastoreName = \"Datastore.tar\",\n  LoadDatastore = FALSE,\n  TestDocsDir = \"vestate\",\n  ClearLogs = TRUE,\n  # SaveDatastore = TRUE\n  SaveDatastore = FALSE\n)\n\n#Define the module tests\nTests_ls <- list(\n  list(ModuleName = \"CreateHouseholds\", LoadDatastore = FALSE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictWorkers\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"AssignLifeCycle\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE),\n  list(ModuleName = \"PredictIncome\", LoadDatastore = TRUE, SaveDatastore = TRUE, DoRun = TRUE)\n)\n\n#Set up, run tests, and save test results\nsetUpTests(TestSetup_ls)\ndoTests(Tests_ls, TestSetup_ls)\nsaveTestResults(TestSetup_ls)"},{"path":"software-framework.html","id":"appendix-g-visioneval-model-user-functions","chapter":"17 Software Framework","heading":"17.6.7 Appendix G: VisionEval Model User Functions","text":"","code":""},{"path":"software-framework.html","id":"getyears-retrieve-years","chapter":"17 Software Framework","heading":"17.6.8 getYears: Retrieve years","text":"","code":""},{"path":"software-framework.html","id":"description","chapter":"17 Software Framework","heading":"17.6.8.1 Description","text":"getYears visioneval framework model user function reads \nYears component model state file.","code":""},{"path":"software-framework.html","id":"usage","chapter":"17 Software Framework","heading":"17.6.8.2 Usage","text":"","code":"\ngetYears()"},{"path":"software-framework.html","id":"details","chapter":"17 Software Framework","heading":"17.6.8.3 Details","text":"convenience function make easier retrieve Years\ncomponent model state file lists specified model run\nyears. Years component includes base year, returned\nvector years places base year first order. ordering \nimportant modules calculate future year values pivoting \nbase year values base year must run first.","code":""},{"path":"software-framework.html","id":"value","chapter":"17 Software Framework","heading":"17.6.8.4 Value","text":"character vector model run years.","code":""},{"path":"software-framework.html","id":"calls","chapter":"17 Software Framework","heading":"17.6.8.5 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"initializemodel-initialize-model.","chapter":"17 Software Framework","heading":"17.6.9 initializeModel: Initialize model.","text":"","code":""},{"path":"software-framework.html","id":"description-1","chapter":"17 Software Framework","heading":"17.6.9.1 Description","text":"initializeModel visioneval framework model user function\ninitializes VisionEval model, loading parameters inputs, \nmaking checks ensure model can run successfully.","code":""},{"path":"software-framework.html","id":"usage-1","chapter":"17 Software Framework","heading":"17.6.9.2 Usage","text":"","code":"\ninitializeModel(ParamDir = \"defs\",\n  RunParamFile = \"run_parameters.json\", GeoFile = \"geo.csv\",\n  ModelParamFile = \"model_parameters.json\", LoadDatastore = FALSE,\n  DatastoreName = NULL, SaveDatastore = TRUE)"},{"path":"software-framework.html","id":"arguments","chapter":"17 Software Framework","heading":"17.6.9.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-1","chapter":"17 Software Framework","heading":"17.6.9.4 Details","text":"function several things initialize model environment \ndatastore including:\n1) Initializing file used keep track state key model\nrun variables datastore;\n2) Initializes log messages written;\n3) Creates datastore initializes structure, reads checks\ngeographic specifications initializes geography datastore,\nloads existing datastore one identified;\n4) Parses model run script identify modules order \nexecution checks whether identified packages installed \nmodules exist packages;\n5) Checks data requested datastore available \nrequested request specifications match datastore\nspecifications;\n6) Checks model input files determine whether \ncomplete comply specifications.","code":""},{"path":"software-framework.html","id":"value-1","chapter":"17 Software Framework","heading":"17.6.9.5 Value","text":"None. function prints log file messages identify\nwhether errors initialization. also prints success\nmessage initialization successful.","code":""},{"path":"software-framework.html","id":"calls-1","chapter":"17 Software Framework","heading":"17.6.9.6 Calls","text":"assignDatastoreFunctions, checkDataset, checkModuleExists, checkModuleSpecs, getModelState, getModuleSpecs, initDatastoreGeography, initLog, initModelStateFile, inputsToDatastore, loadDatastore, loadModelParameters, parseModelScript, processModuleInputs, processModuleSpecs, readGeography, readModelState, setModelState, simDataTransactions, writeLog","code":""},{"path":"software-framework.html","id":"readdatastoretables-read-multiple-datasets-from-multiple-tables-in-datastores","chapter":"17 Software Framework","heading":"17.6.10 readDatastoreTables: Read multiple datasets from multiple tables in datastores","text":"","code":""},{"path":"software-framework.html","id":"description-2","chapter":"17 Software Framework","heading":"17.6.10.1 Description","text":"readDatastoreTables visioneval framework model user function \nreads datasets one tables specified group one \ndatastores","code":""},{"path":"software-framework.html","id":"usage-2","chapter":"17 Software Framework","heading":"17.6.10.2 Usage","text":"","code":"\nreadDatastoreTables(Tables_ls, Group, DstoreLocs_, DstoreType)"},{"path":"software-framework.html","id":"arguments-1","chapter":"17 Software Framework","heading":"17.6.10.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-2","chapter":"17 Software Framework","heading":"17.6.10.4 Details","text":"function can read multiple datasets one tables group.\none datastore specified datastore references \nused model run, datasets referenced datastores may queried\nwell. Note capability querying multiple datastores \npurpose querying datastores single model scenario. \ncapability used compare multiple scenarios. function\nsegregate datasets datastore. Attempting use function \ncompare multiple scenarios produce unpredictable results.","code":""},{"path":"software-framework.html","id":"value-2","chapter":"17 Software Framework","heading":"17.6.10.5 Value","text":"named list two components. ‘Data’ component list\ncontaining datasets datastores name component\nlist name table identified datasets \nretrieved value data frame containing identified datasets.\n‘Missing’ component list identifies datasets \nmissing table.","code":""},{"path":"software-framework.html","id":"calls-2","chapter":"17 Software Framework","heading":"17.6.10.6 Calls","text":"checkDataset, checkTableExistence, readModelState","code":""},{"path":"software-framework.html","id":"runmodule-run-module.","chapter":"17 Software Framework","heading":"17.6.11 runModule: Run module.","text":"","code":""},{"path":"software-framework.html","id":"description-3","chapter":"17 Software Framework","heading":"17.6.11.1 Description","text":"runModule visioneval framework model user function \nruns module.","code":""},{"path":"software-framework.html","id":"usage-3","chapter":"17 Software Framework","heading":"17.6.11.2 Usage","text":"","code":"\nrunModule(ModuleName, PackageName, RunFor, RunYear, StopOnErr = TRUE)"},{"path":"software-framework.html","id":"arguments-2","chapter":"17 Software Framework","heading":"17.6.11.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-3","chapter":"17 Software Framework","heading":"17.6.11.4 Details","text":"function runs module specified year.","code":""},{"path":"software-framework.html","id":"value-3","chapter":"17 Software Framework","heading":"17.6.11.5 Value","text":"None. function writes results specified locations \ndatastore prints message console module run.","code":""},{"path":"software-framework.html","id":"calls-3","chapter":"17 Software Framework","heading":"17.6.11.6 Calls","text":"createGeoIndexList, getFromDatastore, getModelState, processModuleSpecs, setInDatastore, writeLog","code":""},{"path":"software-framework.html","id":"appendix-h-visioneval-module-developer-functions","chapter":"17 Software Framework","heading":"17.6.12 Appendix H: VisionEval Module Developer Functions","text":"","code":""},{"path":"software-framework.html","id":"adderrormsg-add-an-error-message-to-the-results-list","chapter":"17 Software Framework","heading":"17.6.13 addErrorMsg: Add an error message to the results list","text":"","code":""},{"path":"software-framework.html","id":"description-4","chapter":"17 Software Framework","heading":"17.6.13.1 Description","text":"addErrorMsg visioneval framework module developer function adds\nerror message Errors component module results list \npassed back framework.","code":""},{"path":"software-framework.html","id":"usage-4","chapter":"17 Software Framework","heading":"17.6.13.2 Usage","text":"","code":"\naddErrorMsg(ResultsListName, ErrMsg)"},{"path":"software-framework.html","id":"arguments-3","chapter":"17 Software Framework","heading":"17.6.13.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-4","chapter":"17 Software Framework","heading":"17.6.13.4 Details","text":"function convenience function module developers passing\nerror messages back framework. preferred method handling\nerrors module execution module handle error passing\none error messages back framework. framework \nwrite error messages log stop execution. Error messages \nstored component returned list called Errors. component \nstring vector element error message. addErrorMsg \ncreate Error component already exist add error\nmessage vector.","code":""},{"path":"software-framework.html","id":"value-4","chapter":"17 Software Framework","heading":"17.6.13.5 Value","text":"None. function modifies results list adding error\nmessage Errors component results list. creates Errors\ncomponent already exist.","code":""},{"path":"software-framework.html","id":"calls-4","chapter":"17 Software Framework","heading":"17.6.13.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"addwarningmsg-add-a-warning-message-to-the-results-list","chapter":"17 Software Framework","heading":"17.6.14 addWarningMsg: Add a warning message to the results list","text":"","code":""},{"path":"software-framework.html","id":"description-5","chapter":"17 Software Framework","heading":"17.6.14.1 Description","text":"addWarningMsg visioneval framework module developer function \nadds warning message Warnings component module results list\npassed back framework.","code":""},{"path":"software-framework.html","id":"usage-5","chapter":"17 Software Framework","heading":"17.6.14.2 Usage","text":"","code":"\naddWarningMsg(ResultsListName, WarnMsg)"},{"path":"software-framework.html","id":"arguments-4","chapter":"17 Software Framework","heading":"17.6.14.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-5","chapter":"17 Software Framework","heading":"17.6.14.4 Details","text":"function convenience function module developers passing\nwarning messages back framework. preferred method handling\nwarnings module execution module handle warning \npassing one warning messages back framework. framework\nwrite warning messages log stop execution. Warning\nmessages stored component returned list called Warnings. \ncomponent string vector element warning message. \naddWarningMsg create Warning component already exist\nadd warning message vector.","code":""},{"path":"software-framework.html","id":"value-5","chapter":"17 Software Framework","heading":"17.6.14.5 Value","text":"None. function modifies results list adding warning\nmessage Warnings component results list. creates \nWarnings component already exist.","code":""},{"path":"software-framework.html","id":"calls-5","chapter":"17 Software Framework","heading":"17.6.14.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"applybinomialmodel-applies-an-estimated-binomial-model-to-a-set-of-input-values.","chapter":"17 Software Framework","heading":"17.6.15 applyBinomialModel: Applies an estimated binomial model to a set of input values.","text":"","code":""},{"path":"software-framework.html","id":"description-6","chapter":"17 Software Framework","heading":"17.6.15.1 Description","text":"applyBinomialModel visioneval framework module developer function\napplies estimated binomial model set input data.","code":""},{"path":"software-framework.html","id":"usage-6","chapter":"17 Software Framework","heading":"17.6.15.2 Usage","text":"","code":"\napplyBinomialModel(Model_ls, Data_df, TargetProp = NULL,\n  CheckTargetSearchRange = FALSE, ApplyRandom = TRUE,\n  ReturnProbs = FALSE)"},{"path":"software-framework.html","id":"arguments-5","chapter":"17 Software Framework","heading":"17.6.15.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-6","chapter":"17 Software Framework","heading":"17.6.15.4 Details","text":"function calculates result applying binomial logit model \nset input data. target proportion (TargetProp) specified, \nfunction calls ‘binarySearch’ function calculate adjustment \nconstant model equation population proportion matches\ntarget proportion. function also test whether target search\nrange specified model produce acceptable values.","code":""},{"path":"software-framework.html","id":"value-6","chapter":"17 Software Framework","heading":"17.6.15.5 Value","text":"vector choice values record input data frame \nmodel run, function run check target\nsearch range, two-element vector identifying search range produces\nNA NaN values.","code":""},{"path":"software-framework.html","id":"calls-6","chapter":"17 Software Framework","heading":"17.6.15.6 Calls","text":"binarySearch","code":""},{"path":"software-framework.html","id":"applylinearmodel-applies-an-estimated-linear-model-to-a-set-of-input-values.","chapter":"17 Software Framework","heading":"17.6.16 applyLinearModel: Applies an estimated linear model to a set of input values.","text":"","code":""},{"path":"software-framework.html","id":"description-7","chapter":"17 Software Framework","heading":"17.6.16.1 Description","text":"applyLinearModel visioneval framework module developer function \napplies estimated linear model set input data.","code":""},{"path":"software-framework.html","id":"usage-7","chapter":"17 Software Framework","heading":"17.6.16.2 Usage","text":"","code":"\napplyLinearModel(Model_ls, Data_df, TargetMean = NULL,\n  CheckTargetSearchRange = FALSE)"},{"path":"software-framework.html","id":"arguments-6","chapter":"17 Software Framework","heading":"17.6.16.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-7","chapter":"17 Software Framework","heading":"17.6.16.4 Details","text":"function calculates result applying linear regression model \nset input data. target mean value (TargetMean) specified, \nfunction calculates standard deviation sampling distribution \napplied linear model results. value returned linear\nmodel, sample drawn normal distribution mean value \ndistribution linear model result standard deviation \ndistibution calculated binary search match population mean\nvalue target mean value. process meant applied linear\nmodel dependent variable power transformed. Applying \nsampling distribution linear model results increases dispersion\nresults match observed dispersion also matches mean values\nuntransformed results. also enables model applied \nsituations mean value different observed mean value.","code":""},{"path":"software-framework.html","id":"value-7","chapter":"17 Software Framework","heading":"17.6.16.5 Value","text":"vector numeric values record input data frame \nmodel run, function run check target\nsearch range, summary predicted values model run \ndispersion set high value search range.","code":""},{"path":"software-framework.html","id":"calls-7","chapter":"17 Software Framework","heading":"17.6.16.6 Calls","text":"binarySearch","code":""},{"path":"software-framework.html","id":"binarysearch-binary-search-function-to-find-a-parameter-which-achieves-a-target-value.","chapter":"17 Software Framework","heading":"17.6.17 binarySearch: Binary search function to find a parameter which achieves a target value.","text":"","code":""},{"path":"software-framework.html","id":"description-8","chapter":"17 Software Framework","heading":"17.6.17.1 Description","text":"binarySearch visioneval framework module developer function \nuses binary search algorithm find value function parameter \nfunction achieves target value.","code":""},{"path":"software-framework.html","id":"usage-8","chapter":"17 Software Framework","heading":"17.6.17.2 Usage","text":"","code":"\nbinarySearch(Function, SearchRange_, ..., Target = 0, DoWtAve = TRUE,\n  MaxIter = 100, Tolerance = 1e-04)"},{"path":"software-framework.html","id":"arguments-7","chapter":"17 Software Framework","heading":"17.6.17.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-8","chapter":"17 Software Framework","heading":"17.6.17.4 Details","text":"binary search algorithm used several modules calibrate \nintercept binary logit model match specified proportion \ncalibrate dispersion parameter linear model match mean value.\nfunction implements binary search algorithm consistent manner \nused modules need . written work stochastic\nmodels nature don’t produce outputs given \ninputs converge reliably. deal stochasticity,\nfunction uses successive averaging approach smooth effect\nstochastic variation reliable convergence. Rather use results\nsingle search iteration determine next value range use \nsearch, weighted average previous values used recent\nvalues weighted heavily.","code":""},{"path":"software-framework.html","id":"value-8","chapter":"17 Software Framework","heading":"17.6.17.5 Value","text":"value ‘SearchRange_’ function parameter \nmatches target value.","code":""},{"path":"software-framework.html","id":"calls-8","chapter":"17 Software Framework","heading":"17.6.17.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkmoduleoutputs-check-module-outputs-for-consistency-with-specifications","chapter":"17 Software Framework","heading":"17.6.18 checkModuleOutputs: Check module outputs for consistency with specifications","text":"","code":""},{"path":"software-framework.html","id":"description-9","chapter":"17 Software Framework","heading":"17.6.18.1 Description","text":"checkModuleOutputs visioneval framework module developer function\nchecks output list produced module consistency \nmodule’s specifications.","code":""},{"path":"software-framework.html","id":"usage-9","chapter":"17 Software Framework","heading":"17.6.18.2 Usage","text":"","code":"\ncheckModuleOutputs(Data_ls, ModuleSpec_ls, ModuleName)"},{"path":"software-framework.html","id":"arguments-8","chapter":"17 Software Framework","heading":"17.6.18.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-9","chapter":"17 Software Framework","heading":"17.6.18.4 Details","text":"function used check whether output list produced module\nconsistent module’s specifications. \nspecifications creating tables, function checks whether output\nlist contains table(s), LENGTH attribute table(s) \npresent, LENGTH attribute(s) consistent length \ndatasets saved table(s). datasets output list\nchecked specifications. include checking \ndata type consistent specified type whether values \nconsistent PROHIBIT ISELEMENTOF conditions. character types,\ncheck made ensure SIZE attribute exists size\nsufficient store characters.","code":""},{"path":"software-framework.html","id":"value-9","chapter":"17 Software Framework","heading":"17.6.18.5 Value","text":"character vector containing list error messages \nlength 0 error messages.","code":""},{"path":"software-framework.html","id":"calls-9","chapter":"17 Software Framework","heading":"17.6.18.6 Calls","text":"checkDataConsistency, processModuleSpecs","code":""},{"path":"software-framework.html","id":"documentmodule-produces-markdown-documentation-for-a-module","chapter":"17 Software Framework","heading":"17.6.19 documentModule: Produces markdown documentation for a module","text":"","code":""},{"path":"software-framework.html","id":"description-10","chapter":"17 Software Framework","heading":"17.6.19.1 Description","text":"documentModule visioneval framework module developer function\ncreates vignettes directory one exist produces\nmodule documentation markdown format saved vignettes\ndirectory.","code":""},{"path":"software-framework.html","id":"usage-10","chapter":"17 Software Framework","heading":"17.6.19.2 Usage","text":"","code":"\ndocumentModule(ModuleName)"},{"path":"software-framework.html","id":"arguments-9","chapter":"17 Software Framework","heading":"17.6.19.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-10","chapter":"17 Software Framework","heading":"17.6.19.4 Details","text":"function produces documentation module markdown format. \n‘vignettes’ directory created exist markdown file\nassociated resources image files saved directory.\nfunction meant called within end module\nscript. documentation created commented block within \nmodule script enclosed opening tag, , closing\ntag, . (Note, tags must commented along \ntext block). commented block may also include tags identify\nresources include within documentation. tags identify \ntype resource name resource located ‘data’\ndirectory. colon (:) used separate resource type resource\nname identifiers. example:\n<txt:DvmtModel_ls\\(EstimationStats\\)NonMetroZeroDvmt_GLM$Summary>\ntag insert text located component \nDvmtModel_ls list saved rdata file ‘data’ directory\n(.e. data/DvmtModel_ls.rda). following 3 resource types recognized:\n* txt - vector strings inserted lines text code block\n* fig - png file inserted image\n* tab - matrix data frame inserted table\nfunction also reads module specifications creates\ntables document user input files, data module gets \ndatastore, data module produces saved datastore.\nfunction intended called R script defines \nmodule. placed near end script (portions \nscript estimate module parameters define module specifications)\nrun package built. may properly \ncontexts.","code":""},{"path":"software-framework.html","id":"value-10","chapter":"17 Software Framework","heading":"17.6.19.5 Value","text":"None. function side effects creating ‘vignettes’\ndirectory one exist, copying identified ‘fig’ resources \n‘vignettes’ directory, saving markdown documentation file \n‘vignettes’ directory. markdown file named module name \n‘md’ suffix.","code":""},{"path":"software-framework.html","id":"calls-10","chapter":"17 Software Framework","heading":"17.6.19.6 Calls","text":"expandSpec, processModuleSpecs","code":""},{"path":"software-framework.html","id":"getregisteredgetspecs-returns-get-specifications-for-registered-datasets.","chapter":"17 Software Framework","heading":"17.6.20 getRegisteredGetSpecs: Returns Get specifications for registered datasets.","text":"","code":""},{"path":"software-framework.html","id":"description-11","chapter":"17 Software Framework","heading":"17.6.20.1 Description","text":"getRegisteredGetSpecs visioneval framework module developer function\nreturns data frame Get specifications datasets \nVisionEval name registry.","code":""},{"path":"software-framework.html","id":"usage-11","chapter":"17 Software Framework","heading":"17.6.20.2 Usage","text":"","code":"\ngetRegisteredGetSpecs(Names_, Tables_, Groups_, NameRegistryDir = NULL)"},{"path":"software-framework.html","id":"arguments-10","chapter":"17 Software Framework","heading":"17.6.20.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-11","chapter":"17 Software Framework","heading":"17.6.20.4 Details","text":"VisionEval name registry (VENameRegistry.json) keeps track \ndataset names created registered modules reading datasets\nspecified module Inp specifications returning calculated\ndatasets specified module Set specifications. function\nreads name registry returns Get specifications identified\ndatasets.","code":""},{"path":"software-framework.html","id":"value-11","chapter":"17 Software Framework","heading":"17.6.20.5 Value","text":"data frame containing Get specifications identified\ndatasets.","code":""},{"path":"software-framework.html","id":"calls-11","chapter":"17 Software Framework","heading":"17.6.20.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"initdatalist-initialize-a-list-for-data-transferred-to-and-from-datastore","chapter":"17 Software Framework","heading":"17.6.21 initDataList: Initialize a list for data transferred to and from datastore","text":"","code":""},{"path":"software-framework.html","id":"description-12","chapter":"17 Software Framework","heading":"17.6.21.1 Description","text":"initDataList visioneval framework module developer function \ncreates list used transferring data datastore.","code":""},{"path":"software-framework.html","id":"usage-12","chapter":"17 Software Framework","heading":"17.6.21.2 Usage","text":"","code":"\ninitDataList()"},{"path":"software-framework.html","id":"details-12","chapter":"17 Software Framework","heading":"17.6.21.3 Details","text":"function initializes list store data transferred \ndatastore module returned module saved \ndatastore. list 3 named components (Global, Year, BaseYear). \nstandard structure data passed module \ndatastore.","code":""},{"path":"software-framework.html","id":"value-12","chapter":"17 Software Framework","heading":"17.6.21.4 Value","text":"list 3 named list components: Global, Year, BaseYear","code":""},{"path":"software-framework.html","id":"calls-12","chapter":"17 Software Framework","heading":"17.6.21.5 Calls","text":"","code":""},{"path":"software-framework.html","id":"item-alias-for-list-function.","chapter":"17 Software Framework","heading":"17.6.22 item: Alias for list function.","text":"","code":""},{"path":"software-framework.html","id":"description-13","chapter":"17 Software Framework","heading":"17.6.22.1 Description","text":"item visioneval framework module developer function alias\nlist function whose purpose make module specifications easier\nread.","code":""},{"path":"software-framework.html","id":"usage-13","chapter":"17 Software Framework","heading":"17.6.22.2 Usage","text":"","code":"\nitem()"},{"path":"software-framework.html","id":"details-13","chapter":"17 Software Framework","heading":"17.6.22.3 Details","text":"function defines alternate name list. used module\nspecifications identify data items Inp, Get, Set portions \nspecifications.","code":""},{"path":"software-framework.html","id":"value-13","chapter":"17 Software Framework","heading":"17.6.22.4 Value","text":"list.","code":""},{"path":"software-framework.html","id":"calls-13","chapter":"17 Software Framework","heading":"17.6.22.5 Calls","text":"","code":""},{"path":"software-framework.html","id":"items-alias-for-list-function.","chapter":"17 Software Framework","heading":"17.6.23 items: Alias for list function.","text":"","code":""},{"path":"software-framework.html","id":"description-14","chapter":"17 Software Framework","heading":"17.6.23.1 Description","text":"items visioneval framework module developer function \nalias list function whose purpose make module specifications\neasier read.","code":""},{"path":"software-framework.html","id":"usage-14","chapter":"17 Software Framework","heading":"17.6.23.2 Usage","text":"","code":"\nitems()"},{"path":"software-framework.html","id":"details-14","chapter":"17 Software Framework","heading":"17.6.23.3 Details","text":"function defines alternate name list. used module\nspecifications identify group data items Inp, Get, Set\nportions specifications.","code":""},{"path":"software-framework.html","id":"value-14","chapter":"17 Software Framework","heading":"17.6.23.4 Value","text":"list.","code":""},{"path":"software-framework.html","id":"calls-14","chapter":"17 Software Framework","heading":"17.6.23.5 Calls","text":"","code":""},{"path":"software-framework.html","id":"loadpackagedataset-load-a-visioneval-package-dataset","chapter":"17 Software Framework","heading":"17.6.24 loadPackageDataset: Load a VisionEval package dataset","text":"","code":""},{"path":"software-framework.html","id":"description-15","chapter":"17 Software Framework","heading":"17.6.24.1 Description","text":"loadPackageDataset visioneval framework module developer function\nloads dataset identified name VisionEval package\ncontaining dataset.","code":""},{"path":"software-framework.html","id":"usage-15","chapter":"17 Software Framework","heading":"17.6.24.2 Usage","text":"","code":"\nloadPackageDataset(DatasetName)"},{"path":"software-framework.html","id":"arguments-11","chapter":"17 Software Framework","heading":"17.6.24.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-15","chapter":"17 Software Framework","heading":"17.6.24.4 Details","text":"function used load dataset identified name \nVisionEval package contains dataset. Using function \npreferred alternative hard-wiring loading using package::dataset\nnotation enables users switch module versions contained\ndifferent packages. example, may different versions \nVEPowertrainsAndFuels package different default assumptions \nlight-duty vehicle powertrain mix characteristics model year. Using\nfunction, module developer needs identify dataset name.\nfunction uses DatasetsByPackage_df data frame model state list\nidentify package contains dataset. retrieves \nreturns dataset","code":""},{"path":"software-framework.html","id":"value-15","chapter":"17 Software Framework","heading":"17.6.24.5 Value","text":"identified dataset.","code":""},{"path":"software-framework.html","id":"calls-15","chapter":"17 Software Framework","heading":"17.6.24.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"makemodelformulastring-makes-a-string-representation-of-a-model-equation.","chapter":"17 Software Framework","heading":"17.6.25 makeModelFormulaString: Makes a string representation of a model equation.","text":"","code":""},{"path":"software-framework.html","id":"description-16","chapter":"17 Software Framework","heading":"17.6.25.1 Description","text":"makeModelFormulaString visioneval framework module developer\nfunction creates string equivalent model equation.","code":""},{"path":"software-framework.html","id":"usage-16","chapter":"17 Software Framework","heading":"17.6.25.2 Usage","text":"","code":"\nmakeModelFormulaString(EstimatedModel)"},{"path":"software-framework.html","id":"arguments-12","chapter":"17 Software Framework","heading":"17.6.25.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-16","chapter":"17 Software Framework","heading":"17.6.25.4 Details","text":"return values model estimation functions ‘lm’ ‘glm’\ncontain large amount information addition parameter estimates\nspecified model. particularly case estimation\ndataset large. information needed apply model\nincluding can add substantially size package includes\nseveral estimated models. really needed implement estimated\nmodel equation model terms estimated coefficients. \nfunction creates string representation model equation.","code":""},{"path":"software-framework.html","id":"value-16","chapter":"17 Software Framework","heading":"17.6.25.5 Value","text":"string expression model equation.","code":""},{"path":"software-framework.html","id":"calls-16","chapter":"17 Software Framework","heading":"17.6.25.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"processestimationinputs-load-estimation-data","chapter":"17 Software Framework","heading":"17.6.26 processEstimationInputs: Load estimation data","text":"","code":""},{"path":"software-framework.html","id":"description-17","chapter":"17 Software Framework","heading":"17.6.26.1 Description","text":"processEstimationInputs visioneval framework module developer\nfunction checks whether specified model estimation data meets\nspecifications returns data data frame.","code":""},{"path":"software-framework.html","id":"usage-17","chapter":"17 Software Framework","heading":"17.6.26.2 Usage","text":"","code":"\nprocessEstimationInputs(Inp_ls, FileName, ModuleName)"},{"path":"software-framework.html","id":"arguments-13","chapter":"17 Software Framework","heading":"17.6.26.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-17","chapter":"17 Software Framework","heading":"17.6.26.4 Details","text":"function used check whether specified CSV-formatted data file\nused model estimation correctly formatted contains acceptable\nvalues datasets contained within. function checks whether \nspecified file exists “inst/extdata” directory. file \nexist, function stops transmits standard error message \nfile exist. file exist, function reads file \ndata frame checks whether contains specified columns \ndata meets specifications. specifications \nmet, function stops transmits error message. \ndata errors function returns data frame containing data \nfile.","code":""},{"path":"software-framework.html","id":"value-17","chapter":"17 Software Framework","heading":"17.6.26.5 Value","text":"data frame containing estimation data according \nspecifications data types consistent specifications columns\nspecified removed. Execution stops errors found. Error\nmessages printed console. Warnings also printed console.","code":""},{"path":"software-framework.html","id":"calls-17","chapter":"17 Software Framework","heading":"17.6.26.6 Calls","text":"checkDataConsistency, expandSpec, Types","code":""},{"path":"software-framework.html","id":"readvenameregistry-reads-the-visioneval-name-registry.","chapter":"17 Software Framework","heading":"17.6.27 readVENameRegistry: Reads the VisionEval name registry.","text":"","code":""},{"path":"software-framework.html","id":"description-18","chapter":"17 Software Framework","heading":"17.6.27.1 Description","text":"readVENameRegistry visioneval framework module developer function\nreads VisionEval name registry returns list data frames\ncontaining Inp Set specifications.","code":""},{"path":"software-framework.html","id":"usage-18","chapter":"17 Software Framework","heading":"17.6.27.2 Usage","text":"","code":"\nreadVENameRegistry(NameRegistryDir = NULL)"},{"path":"software-framework.html","id":"arguments-14","chapter":"17 Software Framework","heading":"17.6.27.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-18","chapter":"17 Software Framework","heading":"17.6.27.4 Details","text":"VisionEval name registry (VENameRegistry.json) keeps track \ndataset names created registered modules reading datasets\nspecified module Inp specifications returning calculated\ndatasets specified module Set specifications. function reads\nVisionEval name registry returns list data frames containing \nregistered Inp Set specifications.","code":""},{"path":"software-framework.html","id":"value-18","chapter":"17 Software Framework","heading":"17.6.27.5 Value","text":"list two components: Inp Set. component data\nframe containing respective Inp Set specifications registered\nmodules.","code":""},{"path":"software-framework.html","id":"calls-18","chapter":"17 Software Framework","heading":"17.6.27.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"testmodule-test-module","chapter":"17 Software Framework","heading":"17.6.28 testModule: Test module","text":"","code":""},{"path":"software-framework.html","id":"description-19","chapter":"17 Software Framework","heading":"17.6.28.1 Description","text":"testModule visioneval framework module developer function sets\ntest environment tests module.","code":""},{"path":"software-framework.html","id":"usage-19","chapter":"17 Software Framework","heading":"17.6.28.2 Usage","text":"","code":"\ntestModule(ModuleName, ParamDir = \"defs\",\n  RunParamFile = \"run_parameters.json\", GeoFile = \"geo.csv\",\n  ModelParamFile = \"model_parameters.json\", LoadDatastore = FALSE,\n  SaveDatastore = TRUE, DoRun = TRUE, RunFor = \"AllYears\",\n  StopOnErr = TRUE, RequiredPackages = NULL, TestGeoName = NULL)"},{"path":"software-framework.html","id":"arguments-15","chapter":"17 Software Framework","heading":"17.6.28.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-19","chapter":"17 Software Framework","heading":"17.6.28.4 Details","text":"function used set test environment test module check\ncan run successfully VisionEval model system. function\nsets test environment switching tests directory \ninitializing model state list, log file, datastore. user may\nuse existing datastore rather initialize new datastore. use\ncase loading existing datastore package contains several\nmodules run sequence. first module initialize datastore\nsubsequent modules use datastore modified testing \nprevious module. run way, also necessary set \nSaveDatastore argument equal TRUE module outputs \nsaved datastore. function performs several tests including\nchecking whether module specifications written properly, whether\ntest inputs correct complete can loaded \ndatastore, whether datastore contains module inputs identified \nGet specifications, whether module run, whether \noutputs meet module’s Set specifications. latter check carried \nlarge part checkModuleOutputs function called.","code":""},{"path":"software-framework.html","id":"value-19","chapter":"17 Software Framework","heading":"17.6.28.5 Value","text":"DoRun FALSE, return value list containing module\nspecifications. DoRun TRUE, return value. function\nwrites messages console log testing proceeds.\nmessages include time test starts ends.\nkey test fails, requiring fix tests can run,\nexecution stops error message written console. Detailed\nerror messages also written log.","code":""},{"path":"software-framework.html","id":"calls-19","chapter":"17 Software Framework","heading":"17.6.28.6 Calls","text":"assignDatastoreFunctions, checkDataset, checkModuleOutputs, checkModuleSpecs, createGeoIndexList, getFromDatastore, getModelState, getYears, initDatastoreGeography, initLog, initModelStateFile, inputsToDatastore, loadDatastore, loadModelParameters, processModuleInputs, processModuleSpecs, readGeography, readModelState, setInDatastore, setModelState, writeLog","code":""},{"path":"software-framework.html","id":"appendix-i-visioneval-framework-control-functions","chapter":"17 Software Framework","heading":"17.6.29 Appendix I: VisionEval Framework Control Functions","text":"","code":""},{"path":"software-framework.html","id":"assigndatastorefunctions-assign-datastore-interaction-functions","chapter":"17 Software Framework","heading":"17.6.30 assignDatastoreFunctions: Assign datastore interaction functions","text":"","code":""},{"path":"software-framework.html","id":"description-20","chapter":"17 Software Framework","heading":"17.6.30.1 Description","text":"assignDatastoreFunctions visioneval framework control function \nassigns values functions interacting datastore \nfunctions declared datastore type.","code":""},{"path":"software-framework.html","id":"usage-20","chapter":"17 Software Framework","heading":"17.6.30.2 Usage","text":"","code":"\nassignDatastoreFunctions(DstoreType)"},{"path":"software-framework.html","id":"arguments-16","chapter":"17 Software Framework","heading":"17.6.30.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-20","chapter":"17 Software Framework","heading":"17.6.30.4 Details","text":"visioneval framework can work different types datastores. \nexample datastore stores datasets HDF5 file datastore\nstores datasets RData files directory hierarchy. function\nreads ‘DatastoreType’ parameter model state file \nassigns common datastore interaction functions values \nfunctions declared datastore type.","code":""},{"path":"software-framework.html","id":"value-20","chapter":"17 Software Framework","heading":"17.6.30.5 Value","text":"None. function assigns datastore interactions functions \nfirst position search path.","code":""},{"path":"software-framework.html","id":"calls-20","chapter":"17 Software Framework","heading":"17.6.30.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkdataconsistency-check-data-consistency-with-specification","chapter":"17 Software Framework","heading":"17.6.31 checkDataConsistency: Check data consistency with specification","text":"","code":""},{"path":"software-framework.html","id":"description-21","chapter":"17 Software Framework","heading":"17.6.31.1 Description","text":"checkDataConsistency visioneval framework control function \nchecks whether data written dataset consistent dataset\nattributes.","code":""},{"path":"software-framework.html","id":"usage-21","chapter":"17 Software Framework","heading":"17.6.31.2 Usage","text":"","code":"\ncheckDataConsistency(DatasetName, Data_, DstoreAttr_)"},{"path":"software-framework.html","id":"arguments-17","chapter":"17 Software Framework","heading":"17.6.31.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-21","chapter":"17 Software Framework","heading":"17.6.31.4 Details","text":"function compares characteristics data written dataset \ndataset attributes determine whether consistent.","code":""},{"path":"software-framework.html","id":"value-21","chapter":"17 Software Framework","heading":"17.6.31.5 Value","text":"list containing two components, Errors Warnings. \ninconsistencies found, components zero-length character\nvectors. one inconsistencies, components\nhold vectors error warning messages. Mismatch UNITS\nproduce warning message. inconsistencies produce\nerror messages.","code":""},{"path":"software-framework.html","id":"calls-21","chapter":"17 Software Framework","heading":"17.6.31.6 Calls","text":"checkIsElementOf, checkMatchConditions, checkMatchType","code":""},{"path":"software-framework.html","id":"checkdataset-check-dataset-existence","chapter":"17 Software Framework","heading":"17.6.32 checkDataset: Check dataset existence","text":"","code":""},{"path":"software-framework.html","id":"description-22","chapter":"17 Software Framework","heading":"17.6.32.1 Description","text":"checkDataset visioneval framework control function checks\nwhether dataset exists datastore returns TRUE FALSE value\nattribute full path dataset located \ndatastore.","code":""},{"path":"software-framework.html","id":"usage-22","chapter":"17 Software Framework","heading":"17.6.32.2 Usage","text":"","code":"\ncheckDataset(Name, Table, Group, DstoreListing_df)"},{"path":"software-framework.html","id":"arguments-18","chapter":"17 Software Framework","heading":"17.6.32.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-22","chapter":"17 Software Framework","heading":"17.6.32.4 Details","text":"function checks whether dataset exists. dataset identified \nname table group names . dataset \ndatastore, error thrown. located datastore, full\npath name dataset returned.","code":""},{"path":"software-framework.html","id":"value-22","chapter":"17 Software Framework","heading":"17.6.32.5 Value","text":"logical identifying whether dataset datastore. \nattribute string full path dataset \ndatastore.","code":""},{"path":"software-framework.html","id":"calls-22","chapter":"17 Software Framework","heading":"17.6.32.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkgeography-check-geographic-specifications.","chapter":"17 Software Framework","heading":"17.6.33 checkGeography: Check geographic specifications.","text":"","code":""},{"path":"software-framework.html","id":"description-23","chapter":"17 Software Framework","heading":"17.6.33.1 Description","text":"checkGeography visioneval framework control function checks\ngeographic specifications file model.","code":""},{"path":"software-framework.html","id":"usage-23","chapter":"17 Software Framework","heading":"17.6.33.2 Usage","text":"","code":"\ncheckGeography(Directory, Filename)"},{"path":"software-framework.html","id":"arguments-19","chapter":"17 Software Framework","heading":"17.6.33.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-23","chapter":"17 Software Framework","heading":"17.6.33.4 Details","text":"function reads file containing geographic specifications \nmodel checks file entries determine whether internally\nconsistent. function called readGeography function.","code":""},{"path":"software-framework.html","id":"value-23","chapter":"17 Software Framework","heading":"17.6.33.5 Value","text":"list two components. first component, ‘Messages’,\ncontains string vector error messages. length 0 \nerror messages. second component, ‘Update’, list components \nupdate model state file. components list include: Geo, \ndata frame contains geographic specifications; BzoneSpecified, \nlogical identifying whether Bzones specified; CzoneSpecified, \nlogical identifying whether Czones specified.","code":""},{"path":"software-framework.html","id":"calls-23","chapter":"17 Software Framework","heading":"17.6.33.6 Calls","text":"writeLog","code":""},{"path":"software-framework.html","id":"checkinputyeargeo-check-years-and-geography-of-input-file","chapter":"17 Software Framework","heading":"17.6.34 checkInputYearGeo: Check years and geography of input file","text":"","code":""},{"path":"software-framework.html","id":"description-24","chapter":"17 Software Framework","heading":"17.6.34.1 Description","text":"checkInputYearGeo visioneval framework control function checks\n‘Year’ ‘Geo’ columns input file determine whether \ncomplete duplications.","code":""},{"path":"software-framework.html","id":"usage-24","chapter":"17 Software Framework","heading":"17.6.34.2 Usage","text":"","code":"\ncheckInputYearGeo(Year_, Geo_, Group, Table)"},{"path":"software-framework.html","id":"arguments-20","chapter":"17 Software Framework","heading":"17.6.34.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-24","chapter":"17 Software Framework","heading":"17.6.34.4 Details","text":"function checks ‘Year’ ‘Geo’ columns input file \ndetermine whether records run years specified \nmodel geographic areas level geography. also checks\nredundant year geography entries.","code":""},{"path":"software-framework.html","id":"value-24","chapter":"17 Software Framework","heading":"17.6.34.5 Value","text":"list containing results check. list two\nmandatory components two optional components. ‘CompleteInput’ \nlogical identifies whether records present years \ngeographic areas. ‘DupInput’ identifies redundant year \ngeography entries. ‘CompleteInput’ FALSE, list contains \n‘MissingInputs’ component string identifying missing year \ngeography records. ‘DupInput’ TRUE, list contains component \nstring identifying duplicated year geography records.","code":""},{"path":"software-framework.html","id":"calls-24","chapter":"17 Software Framework","heading":"17.6.34.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"checkiselementof-check-if-data-values-are-in-a-specified-set-of-values","chapter":"17 Software Framework","heading":"17.6.35 checkIsElementOf: Check if data values are in a specified set of values","text":"","code":""},{"path":"software-framework.html","id":"description-25","chapter":"17 Software Framework","heading":"17.6.35.1 Description","text":"checkIsElementOf visioneval framework control function checks\nwhether data vector contains elements allowed set \nvalues.","code":""},{"path":"software-framework.html","id":"usage-25","chapter":"17 Software Framework","heading":"17.6.35.2 Usage","text":"","code":"\ncheckIsElementOf(Data_, SetElements_, DataName)"},{"path":"software-framework.html","id":"arguments-21","chapter":"17 Software Framework","heading":"17.6.35.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-25","chapter":"17 Software Framework","heading":"17.6.35.4 Details","text":"function used check whether categorical data values consistent\ndefined set allowed values.","code":""},{"path":"software-framework.html","id":"value-25","chapter":"17 Software Framework","heading":"17.6.35.5 Value","text":"character vector messages identify data field \ncondition met. zero-length vector returned none \nconditions met.","code":""},{"path":"software-framework.html","id":"calls-25","chapter":"17 Software Framework","heading":"17.6.35.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkmatchconditions-check-values-with-conditions.","chapter":"17 Software Framework","heading":"17.6.36 checkMatchConditions: Check values with conditions.","text":"","code":""},{"path":"software-framework.html","id":"description-26","chapter":"17 Software Framework","heading":"17.6.36.1 Description","text":"checkMatchConditions visioneval framework control function \nchecks whether data vector contains elements match set \nconditions.","code":""},{"path":"software-framework.html","id":"usage-26","chapter":"17 Software Framework","heading":"17.6.36.2 Usage","text":"","code":"\ncheckMatchConditions(Data_, Conditions_, DataName, ConditionType)"},{"path":"software-framework.html","id":"arguments-22","chapter":"17 Software Framework","heading":"17.6.36.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-26","chapter":"17 Software Framework","heading":"17.6.36.4 Details","text":"function checks whether values data vector match one \nconditions. conditions specified character vector \nelement either “NA” (match existence NA values) \ncharacter representation valid R comparison expression comparing\nelement specified value (e.g. “< 0”, “> 1”, “!= 10”). \nfunction used checking presence prohibited values \npresence unlikely values.","code":""},{"path":"software-framework.html","id":"value-26","chapter":"17 Software Framework","heading":"17.6.36.5 Value","text":"character vector messages identify data field \ncondition met. zero-length vector returned none \nconditions met.","code":""},{"path":"software-framework.html","id":"calls-26","chapter":"17 Software Framework","heading":"17.6.36.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkmatchtype-check-data-type","chapter":"17 Software Framework","heading":"17.6.37 checkMatchType: Check data type","text":"","code":""},{"path":"software-framework.html","id":"description-27","chapter":"17 Software Framework","heading":"17.6.37.1 Description","text":"checkMatchType visioneval framework control function checks\nwhether data type data vector consistent specifications.","code":""},{"path":"software-framework.html","id":"usage-27","chapter":"17 Software Framework","heading":"17.6.37.2 Usage","text":"","code":"\ncheckMatchType(Data_, Type, DataName)"},{"path":"software-framework.html","id":"arguments-23","chapter":"17 Software Framework","heading":"17.6.37.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-27","chapter":"17 Software Framework","heading":"17.6.37.4 Details","text":"function checks whether data type data vector consistent\nspecified data type. error message generated data can’t \ncoerced specified data type without possibility error loss\ninformation (e.g. double coerced integer). warning message\ngenerated specified type ‘character’ input data type \n‘integer’, ‘double’ ‘logical’ since can coerced correctly, \nmay intended (e.g. zone names may input numbers).\nNote modules may use NA inputs flag identify case \nresult need match target. case, R read type\ndata logical. case, function sets data type \nspecification data type function flag \ndata type error.","code":""},{"path":"software-framework.html","id":"value-27","chapter":"17 Software Framework","heading":"17.6.37.5 Value","text":"list 2 components, Errors Warnings. error \nwarning identified, components contain zero-length character\nstring. either error warning identified, relevant component\ncontain character string identifies data field type\nmismatch.","code":""},{"path":"software-framework.html","id":"calls-27","chapter":"17 Software Framework","heading":"17.6.37.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkmoduleexists-check-whether-a-module-required-to-run-a-model-is-present","chapter":"17 Software Framework","heading":"17.6.38 checkModuleExists: Check whether a module required to run a model is present","text":"","code":""},{"path":"software-framework.html","id":"description-28","chapter":"17 Software Framework","heading":"17.6.38.1 Description","text":"checkModuleExists visioneval framework control function checks\nwhether module required run model present.","code":""},{"path":"software-framework.html","id":"usage-28","chapter":"17 Software Framework","heading":"17.6.38.2 Usage","text":"","code":"\ncheckModuleExists(ModuleName, PackageName,\n  InstalledPkgs_ = rownames(installed.packages()), CalledBy = NA)"},{"path":"software-framework.html","id":"arguments-24","chapter":"17 Software Framework","heading":"17.6.38.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-28","chapter":"17 Software Framework","heading":"17.6.38.4 Details","text":"function takes specified module package, checks whether \npackage installed whether module package. \nfunction returns error message package installed \nmodule present package. module called \nanother module value ‘CalledBy’ argument used identify\ncalling module well user understands call \ncoming .","code":""},{"path":"software-framework.html","id":"value-28","chapter":"17 Software Framework","heading":"17.6.38.5 Value","text":"TRUE packages modules present FALSE .","code":""},{"path":"software-framework.html","id":"calls-28","chapter":"17 Software Framework","heading":"17.6.38.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkmodulespecs-checks-all-module-specifications-for-completeness-and-for-incorrect-entries","chapter":"17 Software Framework","heading":"17.6.39 checkModuleSpecs: Checks all module specifications for completeness and for incorrect entries","text":"","code":""},{"path":"software-framework.html","id":"description-29","chapter":"17 Software Framework","heading":"17.6.39.1 Description","text":"checkModuleSpecs visioneval framework control function checks\nmodule specifications completeness proper values.","code":""},{"path":"software-framework.html","id":"usage-29","chapter":"17 Software Framework","heading":"17.6.39.2 Usage","text":"","code":"\ncheckModuleSpecs(Specs_ls, ModuleName)"},{"path":"software-framework.html","id":"arguments-25","chapter":"17 Software Framework","heading":"17.6.39.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-29","chapter":"17 Software Framework","heading":"17.6.39.4 Details","text":"function iterates specifications module \ncalls checkSpec function check specification completeness \nproper values.","code":""},{"path":"software-framework.html","id":"value-29","chapter":"17 Software Framework","heading":"17.6.39.5 Value","text":"vector containing messages identifying errors found.","code":""},{"path":"software-framework.html","id":"calls-29","chapter":"17 Software Framework","heading":"17.6.39.6 Calls","text":"checkSpec","code":""},{"path":"software-framework.html","id":"checkspec-checks-a-module-specifications-for-completeness-and-for-incorrect-entries","chapter":"17 Software Framework","heading":"17.6.40 checkSpec: Checks a module specifications for completeness and for incorrect entries","text":"","code":""},{"path":"software-framework.html","id":"description-30","chapter":"17 Software Framework","heading":"17.6.40.1 Description","text":"checkSpec visioneval framework control function checks single\nmodule specification completeness proper values.","code":""},{"path":"software-framework.html","id":"usage-30","chapter":"17 Software Framework","heading":"17.6.40.2 Usage","text":"","code":"\ncheckSpec(Spec_ls, SpecGroup, SpecNum)"},{"path":"software-framework.html","id":"arguments-26","chapter":"17 Software Framework","heading":"17.6.40.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-30","chapter":"17 Software Framework","heading":"17.6.40.4 Details","text":"function checks whether single module specification (.e. \nspecification single dataset contains minimum required\nattributes values attributes correct.","code":""},{"path":"software-framework.html","id":"value-30","chapter":"17 Software Framework","heading":"17.6.40.5 Value","text":"vector containing messages identifying errors found.","code":""},{"path":"software-framework.html","id":"calls-30","chapter":"17 Software Framework","heading":"17.6.40.6 Calls","text":"checkSpecTypeUnits, SpecRequirements","code":""},{"path":"software-framework.html","id":"checkspecconsistency-check-specification-consistency","chapter":"17 Software Framework","heading":"17.6.41 checkSpecConsistency: Check specification consistency","text":"","code":""},{"path":"software-framework.html","id":"description-31","chapter":"17 Software Framework","heading":"17.6.41.1 Description","text":"checkSpecConsistency visioneval framework control function \nchecks whether specifications dataset consistent data\nattributes datastore.","code":""},{"path":"software-framework.html","id":"usage-31","chapter":"17 Software Framework","heading":"17.6.41.2 Usage","text":"","code":"\ncheckSpecConsistency(Spec_ls, DstoreAttr_)"},{"path":"software-framework.html","id":"arguments-27","chapter":"17 Software Framework","heading":"17.6.41.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-31","chapter":"17 Software Framework","heading":"17.6.41.4 Details","text":"function compares specifications dataset identified \nmodule “Get” “Set” consistent attributes data \ndatastore.","code":""},{"path":"software-framework.html","id":"value-31","chapter":"17 Software Framework","heading":"17.6.41.5 Value","text":"list containing two components, Errors Warnings. \ninconsistencies found, components zero-length character\nvectors. one inconsistencies, components\nhold vectors error warning messages. Mismatch UNITS\nproduce warning message. inconsistencies produce\nerror messages.","code":""},{"path":"software-framework.html","id":"calls-31","chapter":"17 Software Framework","heading":"17.6.41.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkspectypeunits-checks-the-type-and-units-and-associated-multiplier-and-year-attributes-of-a","chapter":"17 Software Framework","heading":"17.6.42 checkSpecTypeUnits: Checks the TYPE and UNITS and associated MULTIPLIER and YEAR attributes of a","text":"Inp, Get, Set specification consistency.","code":""},{"path":"software-framework.html","id":"description-32","chapter":"17 Software Framework","heading":"17.6.42.1 Description","text":"checkSpecTypeUnits visioneval framework control function checks\ncorrectness TYPE, UNITS, MULTIPLIER YEAR attributes specification\nprocessed parseUnitsSpec function.","code":""},{"path":"software-framework.html","id":"usage-32","chapter":"17 Software Framework","heading":"17.6.42.2 Usage","text":"","code":"\ncheckSpecTypeUnits(Spec_ls, SpecGroup, SpecNum)"},{"path":"software-framework.html","id":"arguments-28","chapter":"17 Software Framework","heading":"17.6.42.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-32","chapter":"17 Software Framework","heading":"17.6.42.4 Details","text":"function checks whether TYPE UNITS module’s specification\ncontain errors. check done module specification \nmodule’s UNITS attribute parsed parseUnitsSpec function \nsplit name, multiplier, years parts UNITS attribute. TYPE\nchecked types catalogued Types function. units name\nUNITS attribute checked units names corresponding \ntype catalogued Types function. MULTIPLIER checked \ndetermine whether value valid number, NA, number (NaN). NA\nvalue means multiplier specified (OK) NaN value means\nmultiplier number specified error. \nYEAR attribute checked determine whether proper\nspecification specified TYPE currency. TYPE currency, \nYEAR must specified Get Set specifications.","code":""},{"path":"software-framework.html","id":"value-32","chapter":"17 Software Framework","heading":"17.6.42.5 Value","text":"vector containing messages identifying errors found.","code":""},{"path":"software-framework.html","id":"calls-32","chapter":"17 Software Framework","heading":"17.6.42.6 Calls","text":"checkUnits, Types","code":""},{"path":"software-framework.html","id":"checktableexistence-check-whether-table-exists-in-the-datastore","chapter":"17 Software Framework","heading":"17.6.43 checkTableExistence: Check whether table exists in the datastore","text":"","code":""},{"path":"software-framework.html","id":"description-33","chapter":"17 Software Framework","heading":"17.6.43.1 Description","text":"checkTableExistence visioneval framework control function \nchecks whether table present datastore.","code":""},{"path":"software-framework.html","id":"usage-33","chapter":"17 Software Framework","heading":"17.6.43.2 Usage","text":"","code":"\ncheckTableExistence(Table, Group, DstoreListing_df)"},{"path":"software-framework.html","id":"arguments-29","chapter":"17 Software Framework","heading":"17.6.43.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-33","chapter":"17 Software Framework","heading":"17.6.43.4 Details","text":"function checks whether table present datastore.","code":""},{"path":"software-framework.html","id":"value-33","chapter":"17 Software Framework","heading":"17.6.43.5 Value","text":"logical identifying whether table present datastore.","code":""},{"path":"software-framework.html","id":"calls-33","chapter":"17 Software Framework","heading":"17.6.43.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"checkunits-check-measurement-units-for-consistency-with-recognized-units-for-stated-type.","chapter":"17 Software Framework","heading":"17.6.44 checkUnits: Check measurement units for consistency with recognized units for stated type.","text":"","code":""},{"path":"software-framework.html","id":"description-34","chapter":"17 Software Framework","heading":"17.6.44.1 Description","text":"checkUnits visioneval framework control function checks \nspecified UNITS dataset consistency recognized units \nTYPE specification dataset. also splits compound units \nelements.","code":""},{"path":"software-framework.html","id":"usage-34","chapter":"17 Software Framework","heading":"17.6.44.2 Usage","text":"","code":"\ncheckUnits(DataType, Units)"},{"path":"software-framework.html","id":"arguments-30","chapter":"17 Software Framework","heading":"17.6.44.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-34","chapter":"17 Software Framework","heading":"17.6.44.4 Details","text":"visioneval code recognizes 4 simple data types (integer, double, logical,\ncharacter) 9 complex data types (e.g. distance, time, mass).\nsimple data types can units measure, complex data\ntypes must use units measure declared Types() function. \naddition, compound data type can units composed\nunits two complex data types. example, speed \ncompound data type composed distance divided speed. example,\nspeed miles per hour represented MI/HR. function checks\nUNITS specification dataset consistency recognized\nunits given data TYPE. check units compound data type,\nfunction splits units elements operators separate\nelements. identifies element units, complex data type \nelement operators separate elements.","code":""},{"path":"software-framework.html","id":"value-34","chapter":"17 Software Framework","heading":"17.6.44.5 Value","text":"list contains following elements:\nDataType: string identifying data type.\nUnitType: string identifying whether units correspond ‘simple’\ndata type, ‘complex’ data type, ‘compound’ data type.\nUnits: string identifying units.\nElements: list containing elements compound units. Components \nlist :\nTypes: complex type element,\nUnits: units element,\nOperators: operators separate units.\nErrors: string containing error message character(0) error.","code":""},{"path":"software-framework.html","id":"calls-34","chapter":"17 Software Framework","heading":"17.6.44.6 Calls","text":"Types","code":""},{"path":"software-framework.html","id":"convertmagnitude-convert-values-between-different-magnitudes.","chapter":"17 Software Framework","heading":"17.6.45 convertMagnitude: Convert values between different magnitudes.","text":"","code":""},{"path":"software-framework.html","id":"description-35","chapter":"17 Software Framework","heading":"17.6.45.1 Description","text":"convertMagnitude visioneval framework control function \nconverts values different magnitudes dollars \nthousands dollars.","code":""},{"path":"software-framework.html","id":"usage-35","chapter":"17 Software Framework","heading":"17.6.45.2 Usage","text":"","code":"\nconvertMagnitude(Values_, FromMagnitude, ToMagnitude)"},{"path":"software-framework.html","id":"arguments-31","chapter":"17 Software Framework","heading":"17.6.45.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-35","chapter":"17 Software Framework","heading":"17.6.45.4 Details","text":"visioneval framework stores quantities single units \nunambiguous data contained datastore. example, total\nincome region stored dollars rather thousands \ndollars millions dollars. However, often inputs large quantities\nexpressed thousands millions. Also submodels may estimated using\nvalues expressed multiples, might produce results \nmultiples. case, framework enables model users \ndevelopers encode data multiplier input file field name \nUNITS specification. framework functions use information \nconvert units single units stored datastore. \nfunction implements conversion. multiplier must specified \nscientific notation used R additional constraint digit\nterm must 1. example, multiplier 1000 represented \n1e3. multiplier separated units name period (.). \nexample units dataset retrieved datastore \nthousands miles, UNITS specification written ‘MI.1e3’.","code":""},{"path":"software-framework.html","id":"value-35","chapter":"17 Software Framework","heading":"17.6.45.5 Value","text":"numeric vector values corresponding input Values_ \nconverted magnitude identified FromMagnitude argument \nmagnitude identified ToMagnitude argument. either FromMagnitude\nToMagnitude arguments NA, original Values_ returned. \nConverted attribute returned values FALSE. Otherwise conversion\ndone Converted attribute returned values TRUE.","code":""},{"path":"software-framework.html","id":"calls-35","chapter":"17 Software Framework","heading":"17.6.45.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"convertunits-convert-values-between-units-of-measure.","chapter":"17 Software Framework","heading":"17.6.46 convertUnits: Convert values between units of measure.","text":"","code":""},{"path":"software-framework.html","id":"description-36","chapter":"17 Software Framework","heading":"17.6.46.1 Description","text":"convertUnits visioneval framework control function \nconverts values different units measure complex compound\ndata types recognized visioneval code.","code":""},{"path":"software-framework.html","id":"usage-36","chapter":"17 Software Framework","heading":"17.6.46.2 Usage","text":"","code":"\nconvertUnits(Values_, DataType, FromUnits, ToUnits = \"default\")"},{"path":"software-framework.html","id":"arguments-32","chapter":"17 Software Framework","heading":"17.6.46.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-36","chapter":"17 Software Framework","heading":"17.6.46.4 Details","text":"visioneval code recognizes 4 simple data types (integer, double, logical,\ncharacter) 9 complex data types (e.g. distance, time, mass). \nsimple data types can units measure, complex data types\nmust use units measure declared Types() function. \naddition, compound data type can units composed\nunits two complex data types. example, speed \ncompound data type composed distance divided speed. example,\nspeed miles per hour represented MI/HR. function converts\nvector values one unit measure another unit measure. \ncompound data type combines multiple unit conversions. framework\nconverts units based default units declared ‘units.csv’ model\ndefinition file UNITS specifications declared modules.","code":""},{"path":"software-framework.html","id":"value-36","chapter":"17 Software Framework","heading":"17.6.46.5 Value","text":"list containing converted values additional information \nfollows:\nValues - numeric vector containing converted values.\nFromUnits - string representation units converted .\nToUnits - string representation units converted .\nErrors - string containing error message character(0) errors.\nWarnings - string containing warning message character(0) \nwarning.","code":""},{"path":"software-framework.html","id":"calls-36","chapter":"17 Software Framework","heading":"17.6.46.6 Calls","text":"checkUnits, getUnits, Types","code":""},{"path":"software-framework.html","id":"creategeoindex-create-datastore-index.","chapter":"17 Software Framework","heading":"17.6.47 createGeoIndex: Create datastore index.","text":"","code":""},{"path":"software-framework.html","id":"description-37","chapter":"17 Software Framework","heading":"17.6.47.1 Description","text":"createIndex visioneval framework control function creates \nindex reading writing module data datastore.","code":""},{"path":"software-framework.html","id":"usage-37","chapter":"17 Software Framework","heading":"17.6.47.2 Usage","text":"","code":"\ncreateGeoIndex(Table, Group, RunBy, Geo, GeoIndex_ls)"},{"path":"software-framework.html","id":"arguments-33","chapter":"17 Software Framework","heading":"17.6.47.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-37","chapter":"17 Software Framework","heading":"17.6.47.4 Details","text":"function creates indexing functions return index positions\ndatasets correspond positions index field table. \nexample index field ‘Azone’ ‘Household’ table, function\nreturn function provided name particular Azone,\nreturn positions corresponding Azone.","code":""},{"path":"software-framework.html","id":"value-37","chapter":"17 Software Framework","heading":"17.6.47.5 Value","text":"function creates vector positions corresponding \nlocation supplied value index field.","code":""},{"path":"software-framework.html","id":"calls-37","chapter":"17 Software Framework","heading":"17.6.47.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"creategeoindexlist-create-a-list-of-geographic-indices-for-all-tables-in-a-datastore.","chapter":"17 Software Framework","heading":"17.6.48 createGeoIndexList: Create a list of geographic indices for all tables in a datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-38","chapter":"17 Software Framework","heading":"17.6.48.1 Description","text":"createGeoIndexList visioneval framework control function \ncreates list containing geographic indices tables operating\ndatastore identified tables.","code":""},{"path":"software-framework.html","id":"usage-38","chapter":"17 Software Framework","heading":"17.6.48.2 Usage","text":"","code":"\ncreateGeoIndexList(Specs_ls, RunBy, RunYear)"},{"path":"software-framework.html","id":"arguments-34","chapter":"17 Software Framework","heading":"17.6.48.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-38","chapter":"17 Software Framework","heading":"17.6.48.4 Details","text":"function takes ‘Get’ ‘Set’ specifications list module \n‘RunBy’ specification returns list component table\nidentified specifications. component includes geographic\ndatasets table.","code":""},{"path":"software-framework.html","id":"value-38","chapter":"17 Software Framework","heading":"17.6.48.5 Value","text":"list contains component table identified \nspecifications component includes geographic datasets\ntable represented component.","code":""},{"path":"software-framework.html","id":"calls-38","chapter":"17 Software Framework","heading":"17.6.48.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"deflatecurrency-convert-currency-values-to-different-years.","chapter":"17 Software Framework","heading":"17.6.49 deflateCurrency: Convert currency values to different years.","text":"","code":""},{"path":"software-framework.html","id":"description-39","chapter":"17 Software Framework","heading":"17.6.49.1 Description","text":"deflateCurrency visioneval framework control function \nconverts currency values different years measure.","code":""},{"path":"software-framework.html","id":"usage-39","chapter":"17 Software Framework","heading":"17.6.49.2 Usage","text":"","code":"\ndeflateCurrency(Values_, FromYear, ToYear)"},{"path":"software-framework.html","id":"arguments-35","chapter":"17 Software Framework","heading":"17.6.49.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-39","chapter":"17 Software Framework","heading":"17.6.49.4 Details","text":"visioneval framework stores currency values base year real\ncurrency (e.g. dollar) values. However, currency inputs may different\nnominal year currency. Also modules may estimated using different nominal\nyear currency data. example, original vehicle travel model \nGreenSTEP used 2001 NHTS data newer model uses 2009 NHTS data. \nframework enables model uses specify currency year field name\ninput file contains currency data. Likewise, currency year can\nencoded UNIT attributes modules Get Set specifications.\nframework converts dollars specified currency year values \nbase year real dollar values. model uses set deflator values \nuser inputs region make adjustments. values \nstored model state list.","code":""},{"path":"software-framework.html","id":"value-39","chapter":"17 Software Framework","heading":"17.6.49.5 Value","text":"numeric vector values corresponding input Values_ \nconverted currency year identified FromYear argument \ncurrency year identified ToYear argument. either FromYear \nToYear arguments unaccounted deflator series, original\nValues_ returned Converted attribute FALSE. Otherwise \nconversion done Converted attribute returned values TRUE.","code":""},{"path":"software-framework.html","id":"calls-39","chapter":"17 Software Framework","heading":"17.6.49.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"doprocessinpspec-filters-inp-specifications-list-based-on-optional-specification-attributes.","chapter":"17 Software Framework","heading":"17.6.50 doProcessInpSpec: Filters Inp specifications list based on OPTIONAL specification attributes.","text":"","code":""},{"path":"software-framework.html","id":"description-40","chapter":"17 Software Framework","heading":"17.6.50.1 Description","text":"doProcessInpSpec visioneval framework control function filters\nInp specifications whose OPTIONAL specification attribute TRUE \nspecified input file present.","code":""},{"path":"software-framework.html","id":"usage-40","chapter":"17 Software Framework","heading":"17.6.50.2 Usage","text":"","code":"\ndoProcessInpSpec(InpSpecs_ls, InputDir = \"inputs\")"},{"path":"software-framework.html","id":"arguments-36","chapter":"17 Software Framework","heading":"17.6.50.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-40","chapter":"17 Software Framework","heading":"17.6.50.4 Details","text":"Inp specification component may OPTIONAL specification whose value\nTRUE. , specified input file present, input\nspecification needs processed. function checks whether \nOPTIONAL specification present, whether value TRUE, whether \nfile exists. true, input specification needs \nprocessed. input specification also needs processed \noptional. specification optional OPTIONAL attribute \npresent present value TRUE. function\nreturns list Inp specifications meet criteria.","code":""},{"path":"software-framework.html","id":"value-40","chapter":"17 Software Framework","heading":"17.6.50.5 Value","text":"list containing Inp specification components meet \ncriteria either optional optional specified\ninput file present.","code":""},{"path":"software-framework.html","id":"calls-40","chapter":"17 Software Framework","heading":"17.6.50.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"expandspec-expand-a-inp-get-or-set-specification-so-that-is-can-be-used-by-other","chapter":"17 Software Framework","heading":"17.6.51 expandSpec: Expand a Inp, Get, or Set specification so that is can be used by other","text":"functions process inputs read write datastore.","code":""},{"path":"software-framework.html","id":"description-41","chapter":"17 Software Framework","heading":"17.6.51.1 Description","text":"expandSpec visioneval framework control function takes Inp,\nGet, Set specification processes form can used\nfunctions use specification processing inputs \nreading writing datastore. parseUnitsSpec function \ncalled parse UNITS attribute extract name, multiplier, year\nvalues. specification multiple values NAME attribute,\nfunction creates specification name value.","code":""},{"path":"software-framework.html","id":"usage-41","chapter":"17 Software Framework","heading":"17.6.51.2 Usage","text":"","code":"\nexpandSpec(SpecToExpand_ls, ComponentName)"},{"path":"software-framework.html","id":"arguments-37","chapter":"17 Software Framework","heading":"17.6.51.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-41","chapter":"17 Software Framework","heading":"17.6.51.4 Details","text":"VisionEval design allows module developers assign multiple values \nNAME attributes Inp, Get, Set specification \nattributes named datasets (fields) . greatly\nreduces duplication potential error writing module\nspecifications. However, functions check use specifications\ncapable handling specifications NAME attributes\ncontaining multiple values. function expands specification \nmultiple values NAME attribute multiple specifications, \nsingle value NAME attribute. addition, function calls \nparseUnitsSpec function extract multiplier year information \nvalue UNITS attribute. See function details.","code":""},{"path":"software-framework.html","id":"value-41","chapter":"17 Software Framework","heading":"17.6.51.5 Value","text":"list standard specifications lists component \nvalue NAME attribute input specifications list.","code":""},{"path":"software-framework.html","id":"calls-41","chapter":"17 Software Framework","heading":"17.6.51.6 Calls","text":"parseUnitsSpec","code":""},{"path":"software-framework.html","id":"findspec-find-the-full-specification-corresponding-to-a-defined-name-table-and-group","chapter":"17 Software Framework","heading":"17.6.52 findSpec: Find the full specification corresponding to a defined NAME, TABLE, and GROUP","text":"","code":""},{"path":"software-framework.html","id":"description-42","chapter":"17 Software Framework","heading":"17.6.52.1 Description","text":"findSpec visioneval framework control function returns full\ndataset specification defined NAME, TABLE, GROUP.","code":""},{"path":"software-framework.html","id":"usage-42","chapter":"17 Software Framework","heading":"17.6.52.2 Usage","text":"","code":"\nfindSpec(Specs_ls, Name, Table, Group)"},{"path":"software-framework.html","id":"arguments-38","chapter":"17 Software Framework","heading":"17.6.52.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-42","chapter":"17 Software Framework","heading":"17.6.52.4 Details","text":"function finds returns full specification specifications\nlist whose NAME, TABLE GROUP values correspond Name, Table, \nGroup argument values. specifications list must standard format \nmust ‘Inp’, ‘Get’, ‘Set’ specifications.","code":""},{"path":"software-framework.html","id":"value-42","chapter":"17 Software Framework","heading":"17.6.52.5 Value","text":"list containing full specifications dataset","code":""},{"path":"software-framework.html","id":"calls-42","chapter":"17 Software Framework","heading":"17.6.52.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"getdatasetattr-get-attributes-of-a-dataset","chapter":"17 Software Framework","heading":"17.6.53 getDatasetAttr: Get attributes of a dataset","text":"","code":""},{"path":"software-framework.html","id":"description-43","chapter":"17 Software Framework","heading":"17.6.53.1 Description","text":"getDatasetAttr visioneval framework control function retrieves\nattributes dataset datastore.","code":""},{"path":"software-framework.html","id":"usage-43","chapter":"17 Software Framework","heading":"17.6.53.2 Usage","text":"","code":"\ngetDatasetAttr(Name, Table, Group, DstoreListing_df)"},{"path":"software-framework.html","id":"arguments-39","chapter":"17 Software Framework","heading":"17.6.53.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-43","chapter":"17 Software Framework","heading":"17.6.53.4 Details","text":"function extracts listed attributes specific dataset \ndatastore listing.","code":""},{"path":"software-framework.html","id":"value-43","chapter":"17 Software Framework","heading":"17.6.53.5 Value","text":"named list dataset attributes.","code":""},{"path":"software-framework.html","id":"calls-43","chapter":"17 Software Framework","heading":"17.6.53.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"getfromdatastore-retrieve-data-identified-in-get-specifications-from-datastore","chapter":"17 Software Framework","heading":"17.6.54 getFromDatastore: Retrieve data identified in ‘Get’ specifications from datastore","text":"","code":""},{"path":"software-framework.html","id":"description-44","chapter":"17 Software Framework","heading":"17.6.54.1 Description","text":"getFromDatastore visioneval framework control function \nretrieves datasets identified module’s ‘Get’ specifications \ndatastore.","code":""},{"path":"software-framework.html","id":"usage-44","chapter":"17 Software Framework","heading":"17.6.54.2 Usage","text":"","code":"\ngetFromDatastore(ModuleSpec_ls, RunYear, Geo = NULL,\n  GeoIndex_ls = NULL)"},{"path":"software-framework.html","id":"arguments-40","chapter":"17 Software Framework","heading":"17.6.54.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-44","chapter":"17 Software Framework","heading":"17.6.54.4 Details","text":"function retrieves datastore data sets identified \nmodule’s ‘Get’ specifications. module’s specifications include \nname geographic area, function retrieve data \ngeographic area.","code":""},{"path":"software-framework.html","id":"value-44","chapter":"17 Software Framework","heading":"17.6.54.5 Value","text":"list containing data sets specified module’s\n‘Get’ specifications identified geographic area.","code":""},{"path":"software-framework.html","id":"calls-44","chapter":"17 Software Framework","heading":"17.6.54.6 Calls","text":"checkDataset, convertMagnitude, convertUnits, createGeoIndex, deflateCurrency, getDatasetAttr, getModelState, initDataList, readModelState, Types","code":""},{"path":"software-framework.html","id":"getmodelstate-get-values-from-model-state-list.","chapter":"17 Software Framework","heading":"17.6.55 getModelState: Get values from model state list.","text":"","code":""},{"path":"software-framework.html","id":"description-45","chapter":"17 Software Framework","heading":"17.6.55.1 Description","text":"getModelState visioneval framework control function reads\ncomponents list keeps track model state.","code":""},{"path":"software-framework.html","id":"usage-45","chapter":"17 Software Framework","heading":"17.6.55.2 Usage","text":"","code":"\ngetModelState(Names_ = \"All\")"},{"path":"software-framework.html","id":"arguments-41","chapter":"17 Software Framework","heading":"17.6.55.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-45","chapter":"17 Software Framework","heading":"17.6.55.4 Details","text":"Key variables important managing model run stored \nlist (ModelState_ls) managed global environment. \nfunction extracts named components list.","code":""},{"path":"software-framework.html","id":"value-45","chapter":"17 Software Framework","heading":"17.6.55.5 Value","text":"list containing specified components model state file.","code":""},{"path":"software-framework.html","id":"calls-45","chapter":"17 Software Framework","heading":"17.6.55.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"getmodulespecs-retrieve-module-specifications-from-a-package","chapter":"17 Software Framework","heading":"17.6.56 getModuleSpecs: Retrieve module specifications from a package","text":"","code":""},{"path":"software-framework.html","id":"description-46","chapter":"17 Software Framework","heading":"17.6.56.1 Description","text":"getModuleSpecs visioneval framework control function retrieves\nspecifications list module returns specifications list.","code":""},{"path":"software-framework.html","id":"usage-46","chapter":"17 Software Framework","heading":"17.6.56.2 Usage","text":"","code":"\ngetModuleSpecs(ModuleName, PackageName)"},{"path":"software-framework.html","id":"arguments-42","chapter":"17 Software Framework","heading":"17.6.56.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-46","chapter":"17 Software Framework","heading":"17.6.56.4 Details","text":"function loads specifications module package. returns\nspecifications list.","code":""},{"path":"software-framework.html","id":"value-46","chapter":"17 Software Framework","heading":"17.6.56.5 Value","text":"specifications list specifications list\ndefined module package.","code":""},{"path":"software-framework.html","id":"calls-46","chapter":"17 Software Framework","heading":"17.6.56.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"getunits-retrieve-default-units-for-model","chapter":"17 Software Framework","heading":"17.6.57 getUnits: Retrieve default units for model","text":"","code":""},{"path":"software-framework.html","id":"description-47","chapter":"17 Software Framework","heading":"17.6.57.1 Description","text":"getUnits visioneval framework control function retrieves \ndefault model units vector complex data types.","code":""},{"path":"software-framework.html","id":"usage-47","chapter":"17 Software Framework","heading":"17.6.57.2 Usage","text":"","code":"\ngetUnits(Type_)"},{"path":"software-framework.html","id":"arguments-43","chapter":"17 Software Framework","heading":"17.6.57.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-47","chapter":"17 Software Framework","heading":"17.6.57.4 Details","text":"convenience function make easier retrieve default\nunits complex data type (e.g. distance, volume, speed). default\nunits units used store complex data type datastore.","code":""},{"path":"software-framework.html","id":"value-47","chapter":"17 Software Framework","heading":"17.6.57.5 Value","text":"string vector identifying default units complex data\ntype(s) NA type(s) defined.","code":""},{"path":"software-framework.html","id":"calls-47","chapter":"17 Software Framework","heading":"17.6.57.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"initdatastoregeography-initialize-datastore-geography.","chapter":"17 Software Framework","heading":"17.6.58 initDatastoreGeography: Initialize datastore geography.","text":"","code":""},{"path":"software-framework.html","id":"description-48","chapter":"17 Software Framework","heading":"17.6.58.1 Description","text":"initDatastoreGeography visioneval framework control function \ninitializes tables writes datasets datastore describe\ngeographic relationships model.","code":""},{"path":"software-framework.html","id":"usage-48","chapter":"17 Software Framework","heading":"17.6.58.2 Usage","text":"","code":"\ninitDatastoreGeography()"},{"path":"software-framework.html","id":"details-48","chapter":"17 Software Framework","heading":"17.6.58.3 Details","text":"function writes tables datastore geographic\nlevels. tables used model run store values \neither specified scenario inputs calculated model\nrun. function populates tables cross-references \ngeographic levels. function reads model geography (Geo_df) \nmodel state file. Upon successful completion, function calls \nlistDatastore function update datastore listing global list.","code":""},{"path":"software-framework.html","id":"value-48","chapter":"17 Software Framework","heading":"17.6.58.4 Value","text":"function returns TRUE geographic tables datasets \nsucessfully written datastore.","code":""},{"path":"software-framework.html","id":"calls-48","chapter":"17 Software Framework","heading":"17.6.58.5 Calls","text":"getModelState, writeLog","code":""},{"path":"software-framework.html","id":"initlog-initialize-run-log.","chapter":"17 Software Framework","heading":"17.6.59 initLog: Initialize run log.","text":"","code":""},{"path":"software-framework.html","id":"description-49","chapter":"17 Software Framework","heading":"17.6.59.1 Description","text":"initLog visioneval framework control function creates log\n(text file) stores messages generated model run.","code":""},{"path":"software-framework.html","id":"usage-49","chapter":"17 Software Framework","heading":"17.6.59.2 Usage","text":"","code":"\ninitLog(Suffix = NULL)"},{"path":"software-framework.html","id":"arguments-44","chapter":"17 Software Framework","heading":"17.6.59.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-49","chapter":"17 Software Framework","heading":"17.6.59.4 Details","text":"function creates log file text file stores messages\ngenerated model run. name log ‘Log ’\n‘’ initialization date ‘’ initialization\ntime. log initialized scenario name, scenario description \ndate time initialization.","code":""},{"path":"software-framework.html","id":"value-49","chapter":"17 Software Framework","heading":"17.6.59.5 Value","text":"TRUE log created successfully. creates log file \nworking directory identifies name log file \nmodel state file.","code":""},{"path":"software-framework.html","id":"calls-49","chapter":"17 Software Framework","heading":"17.6.59.6 Calls","text":"getModelState, setModelState","code":""},{"path":"software-framework.html","id":"initmodelstatefile-initialize-model-state.","chapter":"17 Software Framework","heading":"17.6.60 initModelStateFile: Initialize model state.","text":"","code":""},{"path":"software-framework.html","id":"description-50","chapter":"17 Software Framework","heading":"17.6.60.1 Description","text":"initModelState visioneval framework control function loads\nmodel run parameters model state list global workspace \nsaves file.","code":""},{"path":"software-framework.html","id":"usage-50","chapter":"17 Software Framework","heading":"17.6.60.2 Usage","text":"","code":"\ninitModelStateFile(Dir = \"defs\", ParamFile = \"run_parameters.json\",\n  DeflatorFile = \"deflators.csv\", UnitsFile = \"units.csv\")"},{"path":"software-framework.html","id":"arguments-45","chapter":"17 Software Framework","heading":"17.6.60.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-50","chapter":"17 Software Framework","heading":"17.6.60.4 Details","text":"function creates model state list loads model run parameters\nrecorded ‘parameters.json’ file model state list. also\nsaves model state list file (ModelState.Rda).","code":""},{"path":"software-framework.html","id":"value-50","chapter":"17 Software Framework","heading":"17.6.60.5 Value","text":"TRUE model state list created file saved. creates\nmodel state list loads parameters recorded ‘parameters.json’\nfile model state lists saves model state file.","code":""},{"path":"software-framework.html","id":"calls-50","chapter":"17 Software Framework","heading":"17.6.60.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"inputstodatastore-write-the-datasets-in-a-list-of-module-inputs-that-have-been-processed-to-the","chapter":"17 Software Framework","heading":"17.6.61 inputsToDatastore: Write the datasets in a list of module inputs that have been processed to the","text":"datastore.","code":""},{"path":"software-framework.html","id":"description-51","chapter":"17 Software Framework","heading":"17.6.61.1 Description","text":"inputsToDatastore visioneval framework control function takes \nlist processed module input files writes datasets \ndatastore.","code":""},{"path":"software-framework.html","id":"usage-51","chapter":"17 Software Framework","heading":"17.6.61.2 Usage","text":"","code":"\ninputsToDatastore(Inputs_ls, ModuleSpec_ls, ModuleName)"},{"path":"software-framework.html","id":"arguments-46","chapter":"17 Software Framework","heading":"17.6.61.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-51","chapter":"17 Software Framework","heading":"17.6.61.4 Details","text":"function takes processed list input datasets specified module\ncreated application ‘processModuleInputs’ function writes\ndatasets list datastore.","code":""},{"path":"software-framework.html","id":"value-51","chapter":"17 Software Framework","heading":"17.6.61.5 Value","text":"logical indicating successful completion. outputs \nfunction side effects writing data datastore.","code":""},{"path":"software-framework.html","id":"calls-51","chapter":"17 Software Framework","heading":"17.6.61.6 Calls","text":"findSpec, getModelState, processModuleSpecs, sortGeoTable","code":""},{"path":"software-framework.html","id":"loaddatastore-load-saved-datastore.","chapter":"17 Software Framework","heading":"17.6.62 loadDatastore: Load saved datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-52","chapter":"17 Software Framework","heading":"17.6.62.1 Description","text":"loadDatastore visioneval framework control function copies \nexisting saved datastore writes information run environment.","code":""},{"path":"software-framework.html","id":"usage-52","chapter":"17 Software Framework","heading":"17.6.62.2 Usage","text":"","code":"\nloadDatastore(FileToLoad, Dir = \"defs/\", GeoFile, SaveDatastore = TRUE)"},{"path":"software-framework.html","id":"arguments-47","chapter":"17 Software Framework","heading":"17.6.62.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-52","chapter":"17 Software Framework","heading":"17.6.62.4 Details","text":"function copies saved datastore working datastore attributes\nglobal list related geographic information. function enables\nscenario variants built constant set starting conditions.","code":""},{"path":"software-framework.html","id":"value-52","chapter":"17 Software Framework","heading":"17.6.62.5 Value","text":"TRUE datastore loaded. copies saved datastore \nworking directory ‘datastore.h5’. ‘datastore.h5’ file already\nexists, first renames file ‘archive-datastore.h5’. function\nupdates information model state file regarding model geography\ncontents loaded datastore. stored file exist\nerror thrown.","code":""},{"path":"software-framework.html","id":"calls-52","chapter":"17 Software Framework","heading":"17.6.62.6 Calls","text":"getModelState, setModelState, writeLog","code":""},{"path":"software-framework.html","id":"loadmodelparameters-load-model-global-parameters-file-into-datastore.","chapter":"17 Software Framework","heading":"17.6.63 loadModelParameters: Load model global parameters file into datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-53","chapter":"17 Software Framework","heading":"17.6.63.1 Description","text":"loadModelParameters visioneval framework control function reads \n‘model_parameters.json’ file stores contents ‘Global/Model’\ngroup datastore.","code":""},{"path":"software-framework.html","id":"usage-53","chapter":"17 Software Framework","heading":"17.6.63.2 Usage","text":"","code":"\nloadModelParameters(ModelParamFile = \"model_parameters.json\")"},{"path":"software-framework.html","id":"arguments-48","chapter":"17 Software Framework","heading":"17.6.63.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-53","chapter":"17 Software Framework","heading":"17.6.63.4 Details","text":"function reads ‘model_parameters.json’ file ‘defs’ directory\ncontains parameters specific model rather module. \narea parameters may used module. Parameters specified \nname, value, data type. function creates ‘Model’ group \n‘Global’ group stores values appropriate type ‘Model’\ngroup.","code":""},{"path":"software-framework.html","id":"value-53","chapter":"17 Software Framework","heading":"17.6.63.5 Value","text":"function returns TRUE model parameters file exists \nvalues sucessfully written datastore.","code":""},{"path":"software-framework.html","id":"calls-53","chapter":"17 Software Framework","heading":"17.6.63.6 Calls","text":"getModelState, writeLog","code":""},{"path":"software-framework.html","id":"parseinputfieldnames-parse-field-names-of-input-file-to-separate-out-the-field-name-currency","chapter":"17 Software Framework","heading":"17.6.64 parseInputFieldNames: Parse field names of input file to separate out the field name, currency","text":"year, multiplier.","code":""},{"path":"software-framework.html","id":"description-54","chapter":"17 Software Framework","heading":"17.6.64.1 Description","text":"parseInputFieldNames visioneval framework control function \nparses field names input file separate field name,\ncurrency year (data currency type), value multiplier.","code":""},{"path":"software-framework.html","id":"usage-54","chapter":"17 Software Framework","heading":"17.6.64.2 Usage","text":"","code":"\nparseInputFieldNames(FieldNames_, Specs_ls, FileName)"},{"path":"software-framework.html","id":"arguments-49","chapter":"17 Software Framework","heading":"17.6.64.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-54","chapter":"17 Software Framework","heading":"17.6.64.4 Details","text":"field names input files can used encode information \nname . can also encode currency year currency type data\nalso values multiples (e.g. thousands dollars). \ncurrency type data mandatory currency year specified \ndata can converted base year currency values (e.g. dollars \nbase year dollars). multiplier optional, needless say, can\napplied numeric data. function returns list component\nfield. component identifies field name, year, multiplier,\nerror status result parsing field name. field name\nparsed successfully, error status character(0). field name\nsuccessfully parsed, error status contains error message,\nidentifying problem.","code":""},{"path":"software-framework.html","id":"value-54","chapter":"17 Software Framework","heading":"17.6.64.5 Value","text":"named list one component field. component list\n4 named components: Error, Name, Year, Multiplier. Error\ncomponent value character(0) errors character\nvector error messages errors. Name component string\nname field. Year component string year\ncomponent data type currency NA data type currency\nYear component invalid value. Multiplier number \nmultiplier component present valid. NA \nmultiplier component NaN multiplier invalid. component \nlist named value Name component (.e. field name\nwithout year multiplier elements.)","code":""},{"path":"software-framework.html","id":"calls-54","chapter":"17 Software Framework","heading":"17.6.64.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"parsemodelscript-parse-model-script.","chapter":"17 Software Framework","heading":"17.6.65 parseModelScript: Parse model script.","text":"","code":""},{"path":"software-framework.html","id":"description-55","chapter":"17 Software Framework","heading":"17.6.65.1 Description","text":"parseModel visioneval framework control function reads \nparses model script identify sequence module calls \nassociated call arguments.","code":""},{"path":"software-framework.html","id":"usage-55","chapter":"17 Software Framework","heading":"17.6.65.2 Usage","text":"","code":"\nparseModelScript(FilePath = \"run_model.R\", TestMode = FALSE)"},{"path":"software-framework.html","id":"arguments-50","chapter":"17 Software Framework","heading":"17.6.65.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-55","chapter":"17 Software Framework","heading":"17.6.65.4 Details","text":"function reads model run script parses script \nidentify sequence module calls. extracts call ‘runModule’\nidentifies values assigned function arguments. creates \nlist calls arguments order calls \nscript.","code":""},{"path":"software-framework.html","id":"value-55","chapter":"17 Software Framework","heading":"17.6.65.5 Value","text":"data frame containing information calls ‘runModule’ \norder calls. row represents module call order. columns\nidentify ‘ModuleName’, ‘PackageName’, ‘RunFor’ value.","code":""},{"path":"software-framework.html","id":"calls-55","chapter":"17 Software Framework","heading":"17.6.65.6 Calls","text":"setModelState, writeLog","code":""},{"path":"software-framework.html","id":"parseunitsspec-parse-units-specification-into-components-and-add-to-specifications-list.","chapter":"17 Software Framework","heading":"17.6.66 parseUnitsSpec: Parse units specification into components and add to specifications list.","text":"","code":""},{"path":"software-framework.html","id":"description-56","chapter":"17 Software Framework","heading":"17.6.66.1 Description","text":"parseUnitsSpec visioneval framework control function parses \nUNITS attribute standard Inp, Get, Set specification dataset \nidentify units name, multiplier, year currency data. Returns \nmodified specifications list whose UNITS value units name, \nincludes MULTIPLIER attribute YEAR attribute.","code":""},{"path":"software-framework.html","id":"usage-56","chapter":"17 Software Framework","heading":"17.6.66.2 Usage","text":"","code":"\nparseUnitsSpec(Spec_ls, ComponentName)"},{"path":"software-framework.html","id":"arguments-51","chapter":"17 Software Framework","heading":"17.6.66.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-56","chapter":"17 Software Framework","heading":"17.6.66.4 Details","text":"UNITS component specifications list can encode information \naddition units name. includes value units multiplier \ncase currency values year currency measurement. \nmultiplier element can expressed scientific notation \nnumber ‘e’ can 1. year element currency\nspecification missing, replaced model base year \nrecorded model state file. done, WARN attribute added\nspecifications list notifying module developer \nyear element model base year used module called.\ntest module function reads warning writes module test\nlog. way module developer made aware situation \nmay corrected necessary. model user bothered warning.","code":""},{"path":"software-framework.html","id":"value-56","chapter":"17 Software Framework","heading":"17.6.66.5 Value","text":"list standard specifications list addition \nMULTIPLIER component YEAR component well modification \nUNIT component. MULTIPLIER component can value NA, number,\nNaN. value NA multiplier missing. number \nmultiplier valid number. value NaN multiplier \nvalid number. YEAR component character string 4-digit\nrepresentation year NA component proper year. \nyear component missing UNITS specification currency data,\nmodel base year substituted. case, WARN attribute added\nreturned specifications list. read testModule function\nwritten module test log notify module developer. \nUNITS component parsed YEAR MULTIPLIER components\nextracted, UNITS component modified units name.","code":""},{"path":"software-framework.html","id":"calls-56","chapter":"17 Software Framework","heading":"17.6.66.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"processmoduleinputs-process-module-input-files","chapter":"17 Software Framework","heading":"17.6.67 processModuleInputs: Process module input files","text":"","code":""},{"path":"software-framework.html","id":"description-57","chapter":"17 Software Framework","heading":"17.6.67.1 Description","text":"processModuleInputs visioneval framework control function \nprocesses input files identified module’s ‘Inp’ specifications \npreparation saving datastore.","code":""},{"path":"software-framework.html","id":"usage-57","chapter":"17 Software Framework","heading":"17.6.67.2 Usage","text":"","code":"\nprocessModuleInputs(ModuleSpec_ls, ModuleName, Dir = \"inputs\")"},{"path":"software-framework.html","id":"arguments-52","chapter":"17 Software Framework","heading":"17.6.67.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-57","chapter":"17 Software Framework","heading":"17.6.67.4 Details","text":"function processes input files identified module’s ‘Inp’\nspecifications preparation saving data datastore. Several\nprocesses carried . existence specified input file \nchecked. file whose corresponding ‘GROUP’ specification ‘Year’, \nchecked determine ‘Year’ ‘Geo’ columns. entries \n‘Year’ ‘Geo’ columns checked make sure complete \nduplicates. file whose ‘GROUP’ specification ‘Global’ \n‘BaseYear’ whose ‘TABLE’ specification geographic specification\n‘Region’ checked determine ‘Geo’ column \nentries checked completeness. data column checked\nspecifications determine conformance. function returns list\ncontains list error messages list data inputs. \nfunction also writes error messages warnings log file.","code":""},{"path":"software-framework.html","id":"value-57","chapter":"17 Software Framework","heading":"17.6.67.5 Value","text":"list containing results input processing. list \ntwo components. first (Errors) vector identified file data\nerrors. second (Data) list containing data input files\norganized standard format data exchange datastore.","code":""},{"path":"software-framework.html","id":"calls-57","chapter":"17 Software Framework","heading":"17.6.67.6 Calls","text":"checkDataConsistency, checkInputYearGeo, convertMagnitude, convertUnits, deflateCurrency, getModelState, initDataList, parseInputFieldNames, Types, writeLog","code":""},{"path":"software-framework.html","id":"processmodulespecs-process-module-specifications-to-expand-items-with-multiple-names.","chapter":"17 Software Framework","heading":"17.6.68 processModuleSpecs: Process module specifications to expand items with multiple names.","text":"","code":""},{"path":"software-framework.html","id":"description-58","chapter":"17 Software Framework","heading":"17.6.68.1 Description","text":"processModuleSpecs visioneval framework control function \nprocesses full module specifications list, expanding elements \nInp, Get, Set components parsing UNITS attributes duplicating\nevery specification multiple values NAME attribute.","code":""},{"path":"software-framework.html","id":"usage-58","chapter":"17 Software Framework","heading":"17.6.68.2 Usage","text":"","code":"\nprocessModuleSpecs(Spec_ls)"},{"path":"software-framework.html","id":"arguments-53","chapter":"17 Software Framework","heading":"17.6.68.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-58","chapter":"17 Software Framework","heading":"17.6.68.4 Details","text":"function process module specification list. \nspecifications include multiple listings data sets (.e. fields) \ntable, function expands listing establish separate\nspecification data set.","code":""},{"path":"software-framework.html","id":"value-58","chapter":"17 Software Framework","heading":"17.6.68.5 Value","text":"standard specifications list expansion multiple item\nspecifications.","code":""},{"path":"software-framework.html","id":"calls-58","chapter":"17 Software Framework","heading":"17.6.68.6 Calls","text":"doProcessInpSpec, expandSpec, getModelState","code":""},{"path":"software-framework.html","id":"readgeography-read-geographic-specifications.","chapter":"17 Software Framework","heading":"17.6.69 readGeography: Read geographic specifications.","text":"","code":""},{"path":"software-framework.html","id":"description-59","chapter":"17 Software Framework","heading":"17.6.69.1 Description","text":"readGeography visioneval framework control function reads \ngeographic specifications file model.","code":""},{"path":"software-framework.html","id":"usage-59","chapter":"17 Software Framework","heading":"17.6.69.2 Usage","text":"","code":"\nreadGeography(Dir = \"defs\", GeoFile = \"geo.csv\")"},{"path":"software-framework.html","id":"arguments-54","chapter":"17 Software Framework","heading":"17.6.69.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-59","chapter":"17 Software Framework","heading":"17.6.69.4 Details","text":"function manages reading error checking geographic\nspecifications model. calls checkGeography function check\nerrors specifications. checkGeography function reads \nfile checks errors. returns list errors found\ndata frame containing geographic specifications. errors \nfound, functions writes errors log file stops model\nexecution. errors, function adds geographic \ngeographic specifications file, errors written log file \nexecution stops. errors found, geographic specifications \nadded model state file.","code":""},{"path":"software-framework.html","id":"value-59","chapter":"17 Software Framework","heading":"17.6.69.5 Value","text":"value TRUE returned function successful reading\nfile specifications consistent. stops \nerrors specifications. identified errors written \nrun log. data frame containing file entries added \nmodel state file Geo_df’.","code":""},{"path":"software-framework.html","id":"calls-59","chapter":"17 Software Framework","heading":"17.6.69.6 Calls","text":"checkGeography, setModelState, writeLog","code":""},{"path":"software-framework.html","id":"readmodelstate-reads-values-from-model-state-file.","chapter":"17 Software Framework","heading":"17.6.70 readModelState: Reads values from model state file.","text":"","code":""},{"path":"software-framework.html","id":"description-60","chapter":"17 Software Framework","heading":"17.6.70.1 Description","text":"readModelState visioneval framework control function reads\ncomponents file saves copy model state.","code":""},{"path":"software-framework.html","id":"usage-60","chapter":"17 Software Framework","heading":"17.6.70.2 Usage","text":"","code":"\nreadModelState(Names_ = \"All\", FileName = \"ModelState.Rda\")"},{"path":"software-framework.html","id":"arguments-55","chapter":"17 Software Framework","heading":"17.6.70.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-60","chapter":"17 Software Framework","heading":"17.6.70.4 Details","text":"model state stored list (ModelState_ls) also saved \nfile (ModelState.Rda) whenever list updated. function reads \ncontents ModelState.Rda file.","code":""},{"path":"software-framework.html","id":"value-60","chapter":"17 Software Framework","heading":"17.6.70.5 Value","text":"list containing specified components model state file.","code":""},{"path":"software-framework.html","id":"calls-60","chapter":"17 Software Framework","heading":"17.6.70.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"setindatastore-save-the-data-sets-returned-by-a-module-in-the-datastore","chapter":"17 Software Framework","heading":"17.6.71 setInDatastore: Save the data sets returned by a module in the datastore","text":"","code":""},{"path":"software-framework.html","id":"description-61","chapter":"17 Software Framework","heading":"17.6.71.1 Description","text":"setInDatastore visioneval framework control function saves \ndatastore data returned standard list module.","code":""},{"path":"software-framework.html","id":"usage-61","chapter":"17 Software Framework","heading":"17.6.71.2 Usage","text":"","code":"\nsetInDatastore(Data_ls, ModuleSpec_ls, ModuleName, Year, Geo = NULL,\n  GeoIndex_ls = NULL)"},{"path":"software-framework.html","id":"arguments-56","chapter":"17 Software Framework","heading":"17.6.71.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-61","chapter":"17 Software Framework","heading":"17.6.71.4 Details","text":"function saves datastore data sets identified module’s\n‘Set’ specifications included list returned module. \nparticular geographic area identified, data saved positions\ndata sets datastore corresponding identified geographic\narea.","code":""},{"path":"software-framework.html","id":"value-61","chapter":"17 Software Framework","heading":"17.6.71.5 Value","text":"logical value TRUE data successfully saved \ndatastore.","code":""},{"path":"software-framework.html","id":"calls-61","chapter":"17 Software Framework","heading":"17.6.71.6 Calls","text":"checkTableExistence, convertMagnitude, convertUnits, createGeoIndex, deflateCurrency, getModelState, Types, writeLog","code":""},{"path":"software-framework.html","id":"setmodelstate-update-model-state.","chapter":"17 Software Framework","heading":"17.6.72 setModelState: Update model state.","text":"","code":""},{"path":"software-framework.html","id":"description-62","chapter":"17 Software Framework","heading":"17.6.72.1 Description","text":"setModelState visioneval framework control function updates \nlist keeps track model state list components update\nresaves model state file.","code":""},{"path":"software-framework.html","id":"usage-62","chapter":"17 Software Framework","heading":"17.6.72.2 Usage","text":"","code":"\nsetModelState(ChangeState_ls, FileName = \"ModelState.Rda\")"},{"path":"software-framework.html","id":"arguments-57","chapter":"17 Software Framework","heading":"17.6.72.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-62","chapter":"17 Software Framework","heading":"17.6.72.4 Details","text":"Key variables important managing model run stored \nlist (ModelState_ls) global workspace saved \n‘ModelState.Rda’ file. function updates entries model state list\nsupplied named list values, saves results file.","code":""},{"path":"software-framework.html","id":"value-62","chapter":"17 Software Framework","heading":"17.6.72.5 Value","text":"TRUE model state list file changed.","code":""},{"path":"software-framework.html","id":"calls-62","chapter":"17 Software Framework","heading":"17.6.72.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"simdatatransactions-create-simulation-of-datastore-transactions.","chapter":"17 Software Framework","heading":"17.6.73 simDataTransactions: Create simulation of datastore transactions.","text":"","code":""},{"path":"software-framework.html","id":"description-63","chapter":"17 Software Framework","heading":"17.6.73.1 Description","text":"simDataTransactions visioneval framework control function loads\nmodule specifications order (run year) creates simulated\nlisting data datastore requests data \ndatastore checks whether tables present put datasets \ndatasets present data retrieved .","code":""},{"path":"software-framework.html","id":"usage-63","chapter":"17 Software Framework","heading":"17.6.73.2 Usage","text":"","code":"\nsimDataTransactions(AllSpecs_ls)"},{"path":"software-framework.html","id":"arguments-58","chapter":"17 Software Framework","heading":"17.6.73.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-63","chapter":"17 Software Framework","heading":"17.6.73.4 Details","text":"function creates list datastore listings working\ndatastore datastore references. list includes ‘Global’\ncomponent, ‘Global’ references simulated, components \nmodel run year, ‘Year’ references simulated, base\nyear one run years, base year component, base year\nreferences simulated. model run year function steps \ndata frame module calls produced ‘parseModelScript’, loads \nprocesses module specifications order: adds ‘NewInpTable’ references,\nadds ‘Inp’ dataset references, checks whether references datasets\nidentified ‘Get’ specifications present, adds ‘NewSetTable’ references,\nadds ‘Set’ dataset references. function compiles vector error\nwarning messages. Error messages made : 1) ‘NewInpTable’ \n‘NewSetTable’ specification module create new table table\nalready exists; 2) dataset identified ‘Get’ specification \npresent working datastore referenced datastores; 3) \n‘Get’ specifications dataset consistent \nspecifications dataset datastore. function compiles\nwarnings ‘Set’ specification cause existing data working\ndatastore overwritten. function writes warning error messages\nlog stops program execution errors.","code":""},{"path":"software-framework.html","id":"value-63","chapter":"17 Software Framework","heading":"17.6.73.5 Value","text":"return value. function side effect \nwriting messages log stops program execution \nerrors.","code":""},{"path":"software-framework.html","id":"calls-63","chapter":"17 Software Framework","heading":"17.6.73.6 Calls","text":"checkDataset, checkSpecConsistency, checkTableExistence, getDatasetAttr, getModelState, getModuleSpecs, getYears, processModuleSpecs, readModelState, writeLog","code":""},{"path":"software-framework.html","id":"sortgeotable-sort-a-data-frame-so-that-the-order-of-rows-matches-the-geography-in-a","chapter":"17 Software Framework","heading":"17.6.74 sortGeoTable: Sort a data frame so that the order of rows matches the geography in a","text":"datastore table.","code":""},{"path":"software-framework.html","id":"description-64","chapter":"17 Software Framework","heading":"17.6.74.1 Description","text":"sortGeoTable visioneval framework control function returns \ndata frame whose rows sorted match geography specified table\ndatastore.","code":""},{"path":"software-framework.html","id":"usage-64","chapter":"17 Software Framework","heading":"17.6.74.2 Usage","text":"","code":"\nsortGeoTable(Data_df, Table, Group)"},{"path":"software-framework.html","id":"arguments-59","chapter":"17 Software Framework","heading":"17.6.74.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-64","chapter":"17 Software Framework","heading":"17.6.74.4 Details","text":"function sorts rows data frame ‘Geo’ field \ndata frame matches corresponding geography names specified table\ndatastore. function returns sorted table.","code":""},{"path":"software-framework.html","id":"value-64","chapter":"17 Software Framework","heading":"17.6.74.5 Value","text":"data frame sorted match order geography\nspecified table datastore.","code":""},{"path":"software-framework.html","id":"calls-64","chapter":"17 Software Framework","heading":"17.6.74.6 Calls","text":"","code":""},{"path":"software-framework.html","id":"specrequirements-list-basic-module-specifications-to-check-for-correctness","chapter":"17 Software Framework","heading":"17.6.75 SpecRequirements: List basic module specifications to check for correctness","text":"","code":""},{"path":"software-framework.html","id":"description-65","chapter":"17 Software Framework","heading":"17.6.75.1 Description","text":"SpecRequirements visioneval framework control function returns\nlist basic requirements module specifications used \nchecking correctness specifications.","code":""},{"path":"software-framework.html","id":"usage-65","chapter":"17 Software Framework","heading":"17.6.75.2 Usage","text":"","code":"\nSpecRequirements()"},{"path":"software-framework.html","id":"details-65","chapter":"17 Software Framework","heading":"17.6.75.3 Details","text":"function returns list basic requirements module\nspecifications. main components list components module\nspecifications: RunBy, NewInpTable, NewSetTable, Inp, Get, Set. \nitem module specifications component, list identifies \nrequired data type attribute entry allowed values \nattribute entry.","code":""},{"path":"software-framework.html","id":"value-65","chapter":"17 Software Framework","heading":"17.6.75.4 Value","text":"list comprised six named components: RunBy, NewInpTable,\nNewSetTable, Inp, Get, Set. main component list \ncomponent specification item values checked. \nitem list two components: ValueType ValuesAllowed.\nValueType component identifies data type data entry \nitem must (e.g. character, integer). ValuesAllowed item identifies\nvalues item may .","code":""},{"path":"software-framework.html","id":"calls-65","chapter":"17 Software Framework","heading":"17.6.75.5 Calls","text":"","code":""},{"path":"software-framework.html","id":"types-returns-a-list-of-returns-a-list-of-recognized-data-types-the-units-for-each","chapter":"17 Software Framework","heading":"17.6.76 Types: Returns a list of returns a list of recognized data types, the units for each","text":"type, storage mode type.","code":""},{"path":"software-framework.html","id":"description-66","chapter":"17 Software Framework","heading":"17.6.76.1 Description","text":"Types visioneval framework control function returns list \nreturns list recognized data types, units type, storage\nmode type.","code":""},{"path":"software-framework.html","id":"usage-66","chapter":"17 Software Framework","heading":"17.6.76.2 Usage","text":"","code":"\nTypes()"},{"path":"software-framework.html","id":"details-66","chapter":"17 Software Framework","heading":"17.6.76.3 Details","text":"function stores listing dataset types recognized \nvisioneval framework, units recognized type, storage\nmode used type. Types include simple types (e.g. integer, double,\ncharacter, logical) well complex types (e.g. distance, time, mass). \ncomplex types, units specified well. example distance\ntype, allowed units MI (miles), FT (feet), KM (kilometers), M (meters).\nlisting includes conversion factors units complex type.\nlisting also contains storage mode (.e. integer, double, character,\nlogical type. simple types, type storage mode \n).","code":""},{"path":"software-framework.html","id":"value-66","chapter":"17 Software Framework","heading":"17.6.76.4 Value","text":"list containing component recognized type. \ncomponent lists recognized units type storage mode. \ncurrently 4 simple types 10 complex type. simple types \ninteger, double, character logical. complex types currency,\ndistance, area, mass, volume, time, speed, vehicle_distance,\npassenger_distance, payload_distance.","code":""},{"path":"software-framework.html","id":"calls-66","chapter":"17 Software Framework","heading":"17.6.76.5 Calls","text":"","code":""},{"path":"software-framework.html","id":"writelog-write-to-log.","chapter":"17 Software Framework","heading":"17.6.77 writeLog: Write to log.","text":"","code":""},{"path":"software-framework.html","id":"description-67","chapter":"17 Software Framework","heading":"17.6.77.1 Description","text":"writeLog visioneval framework control function writes message\nrun log.","code":""},{"path":"software-framework.html","id":"usage-67","chapter":"17 Software Framework","heading":"17.6.77.2 Usage","text":"","code":"\nwriteLog(Msg = \"\", Print = FALSE)"},{"path":"software-framework.html","id":"arguments-60","chapter":"17 Software Framework","heading":"17.6.77.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-67","chapter":"17 Software Framework","heading":"17.6.77.4 Details","text":"function writes message form string run log. \nlogs time well message run log.","code":""},{"path":"software-framework.html","id":"value-67","chapter":"17 Software Framework","heading":"17.6.77.5 Value","text":"TRUE message written log uccessfully.\nappends time message text run log.","code":""},{"path":"software-framework.html","id":"calls-67","chapter":"17 Software Framework","heading":"17.6.77.6 Calls","text":"getModelState","code":""},{"path":"software-framework.html","id":"writevenameregistry-writes-module-inp-and-set-specifications-to-the-visioneval-name-registry.","chapter":"17 Software Framework","heading":"17.6.78 writeVENameRegistry: Writes module Inp and Set specifications to the VisionEval name registry.","text":"","code":""},{"path":"software-framework.html","id":"description-68","chapter":"17 Software Framework","heading":"17.6.78.1 Description","text":"writeVENameRegistry visioneval framework control function \nwrites module Inp Set specifications VisionEval name registry.","code":""},{"path":"software-framework.html","id":"usage-68","chapter":"17 Software Framework","heading":"17.6.78.2 Usage","text":"","code":"\nwriteVENameRegistry(ModuleName, PackageName, NameRegistryDir = NULL)"},{"path":"software-framework.html","id":"arguments-61","chapter":"17 Software Framework","heading":"17.6.78.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-68","chapter":"17 Software Framework","heading":"17.6.78.4 Details","text":"VisionEval name registry (VENameRegistry.json) keeps track \ndataset names created registered modules reading datasets\nspecified module Inp specifications returning calculated\ndatasets specified module Set specifications. functions adds\nInp Set specifications module registry. removes \nexisting entries module first.","code":""},{"path":"software-framework.html","id":"value-68","chapter":"17 Software Framework","heading":"17.6.78.5 Value","text":"TRUE successful. side effect updating VisionEval\nname registry.","code":""},{"path":"software-framework.html","id":"calls-68","chapter":"17 Software Framework","heading":"17.6.78.6 Calls","text":"getModuleSpecs, processModuleSpecs, readVENameRegistry","code":""},{"path":"software-framework.html","id":"appendix-j-visioneval-framework-datastore-functions","chapter":"17 Software Framework","heading":"17.6.79 Appendix J: VisionEval Framework Datastore Functions","text":"","code":""},{"path":"software-framework.html","id":"initdataseth5-initialize-dataset-in-an-hdf5-h5-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.80 initDatasetH5: Initialize dataset in an HDF5 (H5) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-69","chapter":"17 Software Framework","heading":"17.6.80.1 Description","text":"initDatasetH5 visioneval framework datastore connection function\ninitializes dataset HDF5 (H5) type datastore table.","code":""},{"path":"software-framework.html","id":"usage-69","chapter":"17 Software Framework","heading":"17.6.80.2 Usage","text":"","code":"\ninitDatasetH5(Spec_ls, Group)"},{"path":"software-framework.html","id":"arguments-62","chapter":"17 Software Framework","heading":"17.6.80.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-69","chapter":"17 Software Framework","heading":"17.6.80.4 Details","text":"function initializes dataset HDF5 (H5) type datastore table.","code":""},{"path":"software-framework.html","id":"value-69","chapter":"17 Software Framework","heading":"17.6.80.5 Value","text":"TRUE dataset successfully initialized. dataset already\nexists function throws error writes error message log.\nUpdates model state file.","code":""},{"path":"software-framework.html","id":"calls-69","chapter":"17 Software Framework","heading":"17.6.80.6 Calls","text":"getModelState, listDatastoreH5, Types, writeLog","code":""},{"path":"software-framework.html","id":"initdatasetrd-initialize-dataset-in-an-rdata-rd-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.81 initDatasetRD: Initialize dataset in an RData (RD) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-70","chapter":"17 Software Framework","heading":"17.6.81.1 Description","text":"initDatasetRD visioneval framework datastore connection function\ninitializes dataset RData (RD) type datastore table.","code":""},{"path":"software-framework.html","id":"usage-70","chapter":"17 Software Framework","heading":"17.6.81.2 Usage","text":"","code":"\ninitDatasetRD(Spec_ls, Group)"},{"path":"software-framework.html","id":"arguments-63","chapter":"17 Software Framework","heading":"17.6.81.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-70","chapter":"17 Software Framework","heading":"17.6.81.4 Details","text":"function initializes dataset RData (RD) type datastore table.","code":""},{"path":"software-framework.html","id":"value-70","chapter":"17 Software Framework","heading":"17.6.81.5 Value","text":"TRUE dataset successfully initialized. identified table\nexist, function throws error.","code":""},{"path":"software-framework.html","id":"calls-70","chapter":"17 Software Framework","heading":"17.6.81.6 Calls","text":"getModelState, listDatastoreRD, Types, writeLog","code":""},{"path":"software-framework.html","id":"initdatastoreh5-initialize-datastore-for-an-hdf5-h5-type-datastore.","chapter":"17 Software Framework","heading":"17.6.82 initDatastoreH5: Initialize Datastore for an HDF5 (H5) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-71","chapter":"17 Software Framework","heading":"17.6.82.1 Description","text":"initDatastoreH5 visioneval framework datastore connection function\ncreates datastore starting structure HDF5 (H5) type\ndatastore.","code":""},{"path":"software-framework.html","id":"usage-71","chapter":"17 Software Framework","heading":"17.6.82.2 Usage","text":"","code":"\ninitDatastoreH5()"},{"path":"software-framework.html","id":"details-71","chapter":"17 Software Framework","heading":"17.6.82.3 Details","text":"function creates datastore model run initial\nstructure HDF5 (H5) type datastore.","code":""},{"path":"software-framework.html","id":"value-71","chapter":"17 Software Framework","heading":"17.6.82.4 Value","text":"TRUE datastore initialization successful. Calls \nlistDatastore function adds listing datastore contents \nmodel state file.","code":""},{"path":"software-framework.html","id":"calls-71","chapter":"17 Software Framework","heading":"17.6.82.5 Calls","text":"getModelState, listDatastoreH5","code":""},{"path":"software-framework.html","id":"initdatastorerd-initialize-datastore-for-an-rdata-rd-type-datastore.","chapter":"17 Software Framework","heading":"17.6.83 initDatastoreRD: Initialize Datastore for an RData (RD) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-72","chapter":"17 Software Framework","heading":"17.6.83.1 Description","text":"initDatastoreRD visioneval framework datastore connection function\ncreates datastore starting structure RData (RD) type\ndatastore.","code":""},{"path":"software-framework.html","id":"usage-72","chapter":"17 Software Framework","heading":"17.6.83.2 Usage","text":"","code":"\ninitDatastoreRD()"},{"path":"software-framework.html","id":"details-72","chapter":"17 Software Framework","heading":"17.6.83.3 Details","text":"function creates datastore model run initial\nstructure RData (RD) type datastore.","code":""},{"path":"software-framework.html","id":"value-72","chapter":"17 Software Framework","heading":"17.6.83.4 Value","text":"TRUE datastore initialization successful. Calls \nlistDatastore function adds listing datastore contents \nmodel state file.","code":""},{"path":"software-framework.html","id":"calls-72","chapter":"17 Software Framework","heading":"17.6.83.5 Calls","text":"getModelState, getYears, listDatastoreRD, setModelState","code":""},{"path":"software-framework.html","id":"inittableh5-initialize-table-in-an-hdf5-h5-type-datastore.","chapter":"17 Software Framework","heading":"17.6.84 initTableH5: Initialize table in an HDF5 (H5) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-73","chapter":"17 Software Framework","heading":"17.6.84.1 Description","text":"initTableH5 visioneval framework datastore connection function \ninitializes table HDF5 (H5) type datastore.","code":""},{"path":"software-framework.html","id":"usage-73","chapter":"17 Software Framework","heading":"17.6.84.2 Usage","text":"","code":"\ninitTableH5(Table, Group, Length)"},{"path":"software-framework.html","id":"arguments-64","chapter":"17 Software Framework","heading":"17.6.84.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-73","chapter":"17 Software Framework","heading":"17.6.84.4 Details","text":"function initializes table HDF5 (H5) type datastore.","code":""},{"path":"software-framework.html","id":"value-73","chapter":"17 Software Framework","heading":"17.6.84.5 Value","text":"value TRUE returned function successful creating\ntable. addition, listDatastore function run update \ninventory model state file. function stops group \ntable placed exist datastore message \nwritten log.","code":""},{"path":"software-framework.html","id":"calls-73","chapter":"17 Software Framework","heading":"17.6.84.6 Calls","text":"getModelState, listDatastoreH5","code":""},{"path":"software-framework.html","id":"inittablerd-initialize-table-in-an-rdata-rd-type-datastore.","chapter":"17 Software Framework","heading":"17.6.85 initTableRD: Initialize table in an RData (RD) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-74","chapter":"17 Software Framework","heading":"17.6.85.1 Description","text":"initTableRD visioneval framework datastore connection function\ninitializes table RData (RD) type datastore.","code":""},{"path":"software-framework.html","id":"usage-74","chapter":"17 Software Framework","heading":"17.6.85.2 Usage","text":"","code":"\ninitTableRD(Table, Group, Length)"},{"path":"software-framework.html","id":"arguments-65","chapter":"17 Software Framework","heading":"17.6.85.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-74","chapter":"17 Software Framework","heading":"17.6.85.4 Details","text":"function initializes table RData (RD) type datastore.","code":""},{"path":"software-framework.html","id":"value-74","chapter":"17 Software Framework","heading":"17.6.85.5 Value","text":"value TRUE returned function successful creating\ntable. addition, listDatastore function run update \ninventory model state file. function stops group \ntable placed exist datastore message \nwritten log.","code":""},{"path":"software-framework.html","id":"calls-74","chapter":"17 Software Framework","heading":"17.6.85.6 Calls","text":"getModelState, listDatastoreRD","code":""},{"path":"software-framework.html","id":"listdatastoreh5-list-datastore-contents-for-an-hdf5-h5-type-datastore.","chapter":"17 Software Framework","heading":"17.6.86 listDatastoreH5: List datastore contents for an HDF5 (H5) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-75","chapter":"17 Software Framework","heading":"17.6.86.1 Description","text":"listDatastoreH5 visioneval framework datastore connection function\nlists contents HDF5 (H5) type datastore.","code":""},{"path":"software-framework.html","id":"usage-75","chapter":"17 Software Framework","heading":"17.6.86.2 Usage","text":"","code":"\nlistDatastoreH5()"},{"path":"software-framework.html","id":"details-75","chapter":"17 Software Framework","heading":"17.6.86.3 Details","text":"function lists contents datastore HDF5 (H5) type\ndatastore.","code":""},{"path":"software-framework.html","id":"value-75","chapter":"17 Software Framework","heading":"17.6.86.4 Value","text":"TRUE listing successfully read datastore \nwritten model state file.","code":""},{"path":"software-framework.html","id":"calls-75","chapter":"17 Software Framework","heading":"17.6.86.5 Calls","text":"getModelState, setModelState","code":""},{"path":"software-framework.html","id":"listdatastorerd-list-datastore-contents-for-an-rdata-rd-type-datastore.","chapter":"17 Software Framework","heading":"17.6.87 listDatastoreRD: List datastore contents for an RData (RD) type datastore.","text":"","code":""},{"path":"software-framework.html","id":"description-76","chapter":"17 Software Framework","heading":"17.6.87.1 Description","text":"listDatastoreRD visioneval framework datastore connection function\nlists contents RData (RD) type datastore.","code":""},{"path":"software-framework.html","id":"usage-76","chapter":"17 Software Framework","heading":"17.6.87.2 Usage","text":"","code":"\nlistDatastoreRD(DataListing_ls = NULL)"},{"path":"software-framework.html","id":"arguments-66","chapter":"17 Software Framework","heading":"17.6.87.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-76","chapter":"17 Software Framework","heading":"17.6.87.4 Details","text":"function lists contents datastore RData (RD) type\ndatastore.","code":""},{"path":"software-framework.html","id":"value-76","chapter":"17 Software Framework","heading":"17.6.87.5 Value","text":"TRUE listing successfully read datastore \nwritten model state file.","code":""},{"path":"software-framework.html","id":"calls-76","chapter":"17 Software Framework","heading":"17.6.87.6 Calls","text":"getModelState, readModelState, setModelState","code":""},{"path":"software-framework.html","id":"readfromtableh5-read-from-an-hdf5-h5-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.88 readFromTableH5: Read from an HDF5 (H5) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-77","chapter":"17 Software Framework","heading":"17.6.88.1 Description","text":"readFromTableH5 visioneval framework datastore connection function\nreads dataset HDF5 (H5) type datastore table.","code":""},{"path":"software-framework.html","id":"usage-77","chapter":"17 Software Framework","heading":"17.6.88.2 Usage","text":"","code":"\nreadFromTableH5(Name, Table, Group, File = NULL, Index = NULL,\n  ReadAttr = FALSE)"},{"path":"software-framework.html","id":"arguments-67","chapter":"17 Software Framework","heading":"17.6.88.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-77","chapter":"17 Software Framework","heading":"17.6.88.4 Details","text":"function reads dataset HDF5 (H5) type datastore table.","code":""},{"path":"software-framework.html","id":"value-77","chapter":"17 Software Framework","heading":"17.6.88.5 Value","text":"vector type stored datastore specified \nTYPE attribute.","code":""},{"path":"software-framework.html","id":"calls-77","chapter":"17 Software Framework","heading":"17.6.88.6 Calls","text":"checkDataset, getModelState, readModelState, writeLog","code":""},{"path":"software-framework.html","id":"readfromtablerd-read-from-an-rdata-rd-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.89 readFromTableRD: Read from an RData (RD) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-78","chapter":"17 Software Framework","heading":"17.6.89.1 Description","text":"readFromTableRD visioneval framework datastore connection function\nreads dataset RData (RD) type datastore table.","code":""},{"path":"software-framework.html","id":"usage-78","chapter":"17 Software Framework","heading":"17.6.89.2 Usage","text":"","code":"\nreadFromTableRD(Name, Table, Group, DstoreLoc = NULL, Index = NULL,\n  ReadAttr = FALSE)"},{"path":"software-framework.html","id":"arguments-68","chapter":"17 Software Framework","heading":"17.6.89.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-78","chapter":"17 Software Framework","heading":"17.6.89.4 Details","text":"function reads dataset RData (RD) type datastore table.","code":""},{"path":"software-framework.html","id":"value-78","chapter":"17 Software Framework","heading":"17.6.89.5 Value","text":"vector type stored datastore specified \nTYPE attribute.","code":""},{"path":"software-framework.html","id":"calls-78","chapter":"17 Software Framework","heading":"17.6.89.6 Calls","text":"checkDataset, getModelState, readModelState, writeLog","code":""},{"path":"software-framework.html","id":"writetotableh5-write-to-an-rdata-rd-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.90 writeToTableH5: Write to an RData (RD) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-79","chapter":"17 Software Framework","heading":"17.6.90.1 Description","text":"writeToTableRD visioneval framework datastore connection function\nwrites data RData (RD) type datastore table initializes\ndataset needed.","code":""},{"path":"software-framework.html","id":"usage-79","chapter":"17 Software Framework","heading":"17.6.90.2 Usage","text":"","code":"\nwriteToTableH5(Data_, Spec_ls, Group, Index = NULL)"},{"path":"software-framework.html","id":"arguments-69","chapter":"17 Software Framework","heading":"17.6.90.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-79","chapter":"17 Software Framework","heading":"17.6.90.4 Details","text":"function writes dataset file RData (RD) type datastore table. \ninitializes dataset dataset exist. Enables data \nwritten specific location indexes dataset.","code":""},{"path":"software-framework.html","id":"value-79","chapter":"17 Software Framework","heading":"17.6.90.5 Value","text":"TRUE data sucessfully written. Updates model state file.","code":""},{"path":"software-framework.html","id":"calls-79","chapter":"17 Software Framework","heading":"17.6.90.6 Calls","text":"checkDataset, getModelState, initDatasetH5, listDatastoreH5, writeLog","code":""},{"path":"software-framework.html","id":"writetotablerd-write-to-an-rdata-rd-type-datastore-table.","chapter":"17 Software Framework","heading":"17.6.91 writeToTableRD: Write to an RData (RD) type datastore table.","text":"","code":""},{"path":"software-framework.html","id":"description-80","chapter":"17 Software Framework","heading":"17.6.91.1 Description","text":"writeToTableRD visioneval framework datastore connection function\nwrites data RData (RD) type datastore table initializes\ndataset needed.","code":""},{"path":"software-framework.html","id":"usage-80","chapter":"17 Software Framework","heading":"17.6.91.2 Usage","text":"","code":"\nwriteToTableRD(Data_, Spec_ls, Group, Index = NULL)"},{"path":"software-framework.html","id":"arguments-70","chapter":"17 Software Framework","heading":"17.6.91.3 Arguments","text":"","code":""},{"path":"software-framework.html","id":"details-80","chapter":"17 Software Framework","heading":"17.6.91.4 Details","text":"function writes dataset file RData (RD) type datastore table. \ninitializes dataset dataset exist. Enables data \nwritten specific location indexes dataset.","code":""},{"path":"software-framework.html","id":"value-80","chapter":"17 Software Framework","heading":"17.6.91.5 Value","text":"TRUE data sucessfully written.","code":""},{"path":"software-framework.html","id":"calls-80","chapter":"17 Software Framework","heading":"17.6.91.6 Calls","text":"checkDataset, getModelState, listDatastoreRD, readFromTableRD, Types, writeLog","code":""},{"path":"topic-index.html","id":"topic-index","chapter":"18 VisionEval Topic Index","heading":"18 VisionEval Topic Index","text":"detailed descriptions documentation available VisionEval book.","code":""},{"path":"topic-index.html","id":"end-user-documentation","chapter":"18 VisionEval Topic Index","heading":"End User Documentation","text":"Introduction VisionEval\nGetting Started\nQuick Setup\nDepth Setup\nWalkthrough\nGetting StartedQuick SetupIn Depth SetupWalkthroughConcept PrimerSetting VisionEval model\nSelecting Model\nBuilding model inputs (general)\nBuilding scenarios\nSelecting ModelBuilding model inputs (general)Building scenariosDetails three main models VisionEval\nVERSPM\nVE-State\nVERPAT\nVERSPMVE-StateVERPATVisionEval module reference (User level; module module)\nModel Script Modules\nModule\nInputs Outputs\nmodule_docs\nRebuilding Packages (PUMS, PowertrainsAndFuels\nModel Script ModulesModuleInputs Outputsmodule_docsRebuilding Packages (PUMS, PowertrainsAndFuelsVEModel Framework API\nvisioneval.cnf environment (cascading)\nModel setup\nGeography extra fields, deflators, units display units\nModel scripts (structure, runModule parameters)\nInputs (including search path scenarios)\nStages (including StartFrom BaseScenario)\nScenarios (Manual category combinations)\n\nResults / Exporting\nResults (including Logs, ModelState_ls Datastore)\nOutputs\n\nQueries\nDesigning (examples)\nRunning exporting\n\nR Visualizer\nvisioneval.cnf environment (cascading)Model setup\nGeography extra fields, deflators, units display units\nModel scripts (structure, runModule parameters)\nInputs (including search path scenarios)\nStages (including StartFrom BaseScenario)\nScenarios (Manual category combinations)\nGeography extra fields, deflators, units display unitsModel scripts (structure, runModule parameters)Inputs (including search path scenarios)Stages (including StartFrom BaseScenario)Scenarios (Manual category combinations)Results / Exporting\nResults (including Logs, ModelState_ls Datastore)\nOutputs\nResults (including Logs, ModelState_ls Datastore)OutputsQueries\nDesigning (examples)\nRunning exporting\nDesigning (examples)Running exportingR Visualizer","code":""},{"path":"topic-index.html","id":"developer","chapter":"18 VisionEval Topic Index","heading":"18.1 Developer Documentation","text":"Repository Structure Build Tools\nGithub Development Environment Tutorial\nCloning building tutorial\nDirectory tree sources Git repository\nbuilt stuff goes\n\nDevelopment Environment depth\nDirectories\nve.build / ve.run / ve.test\n. Build scripts, config, components\nMake command line, Makefile\n\nStartup scripts\nlaunch.bat / .Rprofie\nVisionEval.R\nbuild/VisionEval-dev.R\n\nGithub Development Environment Tutorial\nCloning building tutorial\nDirectory tree sources Git repository\nbuilt stuff goes\nCloning building tutorialDirectory tree sources Git repositoryWhere built stuff goesDevelopment Environment depth\nDirectories\nve.build / ve.run / ve.test\n. Build scripts, config, components\nMake command line, Makefile\nDirectoriesve.build / ve.run / ve.test\n. Build scripts, config, componentsMake command line, MakefileStartup scripts\nlaunch.bat / .Rprofie\nVisionEval.R\nbuild/VisionEval-dev.R\nlaunch.bat / .RprofieVisionEval.Rbuild/VisionEval-dev.RDebugging VisionEval\nDebug tools\nPost-mortem Load Model\nR debugger (‘src’ modules)\nve.test(pkgLoad=TRUE), framework \n\nVESnapshot\nDebug tools\nPost-mortem Load Model\nR debugger (‘src’ modules)\nve.test(pkgLoad=TRUE), framework \nPost-mortem Load ModelR debugger (‘src’ modules)ve.test(pkgLoad=TRUE), framework onlyVESnapshotVisionEval Framework 3.0\nOveview works\nModel Running\nPackages versus Modules\nModel Script Structure\n\nModule Structure (module developers)d\nSpecifications\nModule Function\nEstimation / Package Data\nModule Docs\n\nvisioneval package\nSource Files\nFunctions\nFunction Interdependencies / Workflows\n\nVEModel package\nSource Files\nVEModel functions work / relate visioneval framework\n\nOveview works\nModel Running\nPackages versus Modules\nModel Script Structure\nModel RunningPackages versus ModulesModel Script StructureModule Structure (module developers)d\nSpecifications\nModule Function\nEstimation / Package Data\nModule Docs\nSpecificationsModule FunctionEstimation / Package DataModule Docsvisioneval package\nSource Files\nFunctions\nFunction Interdependencies / Workflows\nSource FilesFunctionsFunction Interdependencies / WorkflowsVEModel package\nSource Files\nVEModel functions work / relate visioneval framework\nSource FilesHow VEModel functions work / relate visioneval framework","code":""}]
